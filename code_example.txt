Repository: lehuygiang28/vnpay-nextjs-fullstack-example
Files analyzed: 34

Estimated tokens: 25.7k

Directory structure:
‚îî‚îÄ‚îÄ lehuygiang28-vnpay-nextjs-fullstack-example/
    ‚îú‚îÄ‚îÄ README.md
    ‚îú‚îÄ‚îÄ eslint.config.mjs
    ‚îú‚îÄ‚îÄ LICENSE
    ‚îú‚îÄ‚îÄ next.config.ts
    ‚îú‚îÄ‚îÄ package.json
    ‚îú‚îÄ‚îÄ postcss.config.mjs
    ‚îú‚îÄ‚îÄ tsconfig.json
    ‚îú‚îÄ‚îÄ .env.example
    ‚îú‚îÄ‚îÄ public/
    ‚îÇ   ‚îú‚îÄ‚îÄ manifest.json
    ‚îÇ   ‚îî‚îÄ‚îÄ robots.txt
    ‚îî‚îÄ‚îÄ src/
        ‚îú‚îÄ‚îÄ app/
        ‚îÇ   ‚îú‚îÄ‚îÄ globals.css
        ‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx
        ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx
        ‚îÇ   ‚îú‚îÄ‚îÄ sitemap.ts
        ‚îÇ   ‚îú‚îÄ‚îÄ actions/
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ payment.ts
        ‚îÇ   ‚îú‚îÄ‚îÄ api/
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ payment/
        ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ipn/
        ‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ route.ts
        ‚îÇ   ‚îî‚îÄ‚îÄ payment/
        ‚îÇ       ‚îî‚îÄ‚îÄ return/
        ‚îÇ           ‚îî‚îÄ‚îÄ page.tsx
        ‚îú‚îÄ‚îÄ components/
        ‚îÇ   ‚îú‚îÄ‚îÄ common/
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ErrorBoundary.tsx
        ‚îÇ   ‚îú‚îÄ‚îÄ layout/
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Footer.tsx
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.tsx
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
        ‚îÇ   ‚îú‚îÄ‚îÄ payment/
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ InfoPanels.tsx
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PaymentForm.tsx
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PaymentResult.tsx
        ‚îÇ   ‚îî‚îÄ‚îÄ ui/
        ‚îÇ       ‚îú‚îÄ‚îÄ Button.tsx
        ‚îÇ       ‚îú‚îÄ‚îÄ index.ts
        ‚îÇ       ‚îú‚îÄ‚îÄ Input.tsx
        ‚îÇ       ‚îú‚îÄ‚îÄ PrintButton.tsx
        ‚îÇ       ‚îú‚îÄ‚îÄ Select.tsx
        ‚îÇ       ‚îî‚îÄ‚îÄ Textarea.tsx
        ‚îú‚îÄ‚îÄ lib/
        ‚îÇ   ‚îú‚îÄ‚îÄ utils.ts
        ‚îÇ   ‚îî‚îÄ‚îÄ vnpay.ts
        ‚îî‚îÄ‚îÄ types/
            ‚îî‚îÄ‚îÄ payment.ts


================================================
FILE: README.md
================================================
# VNPay Next.js Fullstack Example

A comprehensive example of integrating VNPay payment gateway with Next.js 15, featuring server actions, IPN handling, and a modern responsive UI built with Tailwind CSS.

‚ö†Ô∏è **Important**: This implementation correctly handles VNPay on the **server-side only**. The VNPay package cannot be used on the client-side, so all VNPay operations are handled through Next.js server actions and API routes.

## üöÄ Features

- **Next.js 15** with App Router and Server Actions
- **Server-side VNPay Integration** - All VNPay operations happen server-side
- **Dual Payment Options** for demo environments:
  - üîÑ **Direct Redirect**: Production-ready flow to VNPay gateway
  - üëÅÔ∏è **URL Preview**: Generate and display payment URL for inspection, copying, or opening in new tab
- **TypeScript** for type safety and better development experience
- **Tailwind CSS** with modern responsive design
- **Clean Architecture** with organized component structure
- **IPN (Instant Payment Notification)** handling
- **Payment verification** and result display with print functionality
- **Bank selection** with dynamic bank list
- **Responsive design** optimized for all devices
- **Vietnamese language support** with proper SEO
- **Resource Links** with color-coded styling
- **Error Boundary** for robust error handling
- **Reusable UI Components** following best practices

## üõ† Tech Stack

- [Next.js 15](https://nextjs.org/) - React framework with App Router
- [TypeScript](https://www.typescriptlang.org/) - Type safety
- [Tailwind CSS](https://tailwindcss.com/) - Utility-first CSS framework
- [VNPay Package](https://www.npmjs.com/package/vnpay) v2.4.0 - VNPay integration
- [Heroicons](https://heroicons.com/) - Beautiful SVG icons
- [clsx](https://github.com/lukeed/clsx) - Conditional class names
- [tailwind-merge](https://github.com/dcastil/tailwind-merge) - Merge Tailwind classes

## üì± Demo Options

### üîÑ Redirect to VNPay

- Production-ready payment flow
- Immediately redirects to VNPay gateway
- Best for live applications

### üëÅÔ∏è Generate URL Demo

- Perfect for development and testing
- Shows the generated payment URL
- Copy URL to clipboard functionality
- Open URL in new tab
- Inspect payment parameters

## üèóÔ∏è Project Structure

```markdown
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ actions/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ payment.ts              # Server actions for VNPay operations
‚îÇ   ‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ payment/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ipn/
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ route.ts        # IPN webhook handler
‚îÇ   ‚îú‚îÄ‚îÄ payment/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ return/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ page.tsx            # Payment result page
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx                    # Main homepage with payment form
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx                  # Root layout with metadata
‚îÇ   ‚îú‚îÄ‚îÄ globals.css                 # Global styles
‚îÇ   ‚îî‚îÄ‚îÄ sitemap.ts                  # SEO sitemap generation
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx              # Reusable button component
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Input.tsx               # Form input component
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Select.tsx              # Select dropdown component
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Textarea.tsx            # Textarea component
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PrintButton.tsx         # Print functionality component
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts                # Barrel exports
‚îÇ   ‚îú‚îÄ‚îÄ layout/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.tsx              # App header with branding
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Footer.tsx              # Footer with author info
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts                # Barrel exports
‚îÇ   ‚îú‚îÄ‚îÄ payment/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PaymentForm.tsx         # Main payment form
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PaymentResult.tsx       # Payment result display
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ InfoPanels.tsx          # Information panels
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts                # Barrel exports
‚îÇ   ‚îî‚îÄ‚îÄ common/
‚îÇ       ‚îî‚îÄ‚îÄ ErrorBoundary.tsx       # Error boundary component
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îú‚îÄ‚îÄ vnpay.ts                    # VNPay configuration and utilities
‚îÇ   ‚îî‚îÄ‚îÄ utils.ts                    # Utility functions (cn, etc.)
‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îî‚îÄ‚îÄ payment.ts                  # TypeScript type definitions
‚îî‚îÄ‚îÄ public/                         # Static assets and favicons
```

## ‚öôÔ∏è Environment Variables

Create a `.env.local` file in the project root:

```env
# VNPay Configuration
VNPAY_TMN_CODE=your_tmn_code_here
VNPAY_SECURE_SECRET=your_secure_secret_here
VNPAY_RETURN_URL=http://localhost:3000/payment/return
VNPAY_IPN_URL=http://localhost:3000/api/payment/ipn
VNPAY_HOST=https://sandbox.vnpayment.vn
VNPAY_TEST_MODE=true
```

> **Note**: For demo purposes, the app works with fallback values even without environment variables.

## üöÄ Getting Started

1. **Clone the repository:**

   ```bash
   git clone https://github.com/lehuygiang28/vnpay-nextjs-fullstack-example.git
   cd vnpay-nextjs-fullstack-example
   ```

2. **Install dependencies:**

   ```bash
   npm install
   ```

3. **Set up environment variables (optional for demo):**

   ```bash
   # Copy and edit with your VNPay credentials
   cp .env.example .env.local
   ```

4. **Run the development server:**

   ```bash
   npm run dev
   ```

5. **Open your browser:**
   Navigate to [http://localhost:3000](http://localhost:3000)

## üîß VNPay Setup

1. **Register with VNPay:**
   - Visit [VNPay Merchant Portal](https://vnpay.vn/)
   - Complete merchant registration
   - Get your TMN Code and Secure Secret

2. **Configure webhooks:**
   - Set IPN URL to: `your-domain.com/api/payment/ipn`
   - Set Return URL to: `your-domain.com/payment/return`

## üìä Key Implementation Details

### Server Actions (`src/app/actions/payment.ts`)

- `createPaymentUrl()` - Creates payment and redirects to VNPay
- `generatePaymentUrlDemo()` - Generates payment URL for inspection
- `getBankListAction()` - Fetches available banks
- `getProductCodeOptions()` - Provides product categories
- `getLocaleOptions()` - Language options

### IPN Handler (`src/app/api/payment/ipn/route.ts`)

- Handles VNPay instant payment notifications
- Verifies payment authenticity using HMAC-SHA512
- Updates order status in your system
- Responds with appropriate status codes

### Payment Return (`src/app/payment/return/page.tsx`)

- Verifies payment results from VNPay
- Displays comprehensive transaction details
- Handles success/failure/error states
- Print functionality for receipts
- Beautiful responsive UI with status indicators

### VNPay Configuration (`src/lib/vnpay.ts`)

- Server-side VNPay client configuration
- Utility functions for payment processing
- IP detection and amount formatting
- Error handling and validation

### Component Architecture

- **UI Components**: Reusable components with TypeScript interfaces
- **Layout Components**: Header, Footer with consistent styling
- **Payment Components**: Specialized components for payment flow
- **Utility Functions**: Helper functions for class merging and formatting

### TypeScript & VNPay Types

‚ö†Ô∏è **Important**: When using VNPay types on the client-side, you **MUST** use Type-Only Imports to avoid bundling the VNPay package in the browser.

**‚úÖ Correct - Type-Only Imports:**

```typescript
// Single type import
import { type Bank } from "vnpay";

// Multiple type imports
import type { Bank, QueryDr, Refund } from "vnpay";

// Using in component
interface PaymentFormProps {
  banks: Bank[];
  onPayment: (data: QueryDr) => void;
}
```

**‚ùå Incorrect - Regular Imports:**

```typescript
// This will cause errors in browser
import { Bank, QueryDr } from "vnpay";
```

**Why?** The VNPay package contains Node.js-specific code that cannot run in the browser. Type-only imports ensure you get TypeScript type checking without including the runtime code in your client bundle.

### Next.js Redirect Behavior

‚ö†Ô∏è **Note**: When using the "Chuy·ªÉn ƒë·∫øn VNPay" button, you may see a `NEXT_REDIRECT` error in the console. This is **expected behavior** - it's how Next.js handles `redirect()` in Server Actions, not an actual error.

```typescript
// This is normal behavior in Server Actions
try {
  await createPaymentUrl(formData);
} catch (error) {
  // NEXT_REDIRECT errors are expected when redirect() is called
  if (error.digest?.includes("NEXT_REDIRECT")) {
    // This means the redirect is working correctly
    return;
  }
  // Handle actual errors here
}
```

## üîê Security Features

- ‚úÖ **Server-side only** VNPay processing
- ‚úÖ **HMAC-SHA512** signature verification
- ‚úÖ **Route Handlers** for secure API endpoints
- ‚úÖ **Server Actions** for form processing
- ‚úÖ **IP address validation**
- ‚úÖ **Transaction amount verification**
- ‚úÖ **Order ID uniqueness**
- ‚úÖ **Input validation** and sanitization
- ‚úÖ **HTTPS enforcement** for production
- ‚úÖ **Secure environment variables**

## üé® UI/UX Features

- üì± **Fully responsive** design for all devices
- üéØ **Modern gradient backgrounds** and shadows
- üîò **Interactive form elements** with proper validation
- üìã **Copy to clipboard** functionality
- üîó **Color-coded resource links** (GitHub, NPM, VNPay, API Docs)
- ‚ö° **Loading states** and comprehensive error handling
- üåü **Beautiful icons** from Heroicons
- üé® **Professional styling** with Tailwind CSS
- ‚ôø **Accessibility features** with ARIA labels
- üñ®Ô∏è **Print functionality** for payment receipts

## üìö Resources

- üìñ [VNPay Node.js Package](https://vnpay.js.org/)
- üì¶ [NPM Package](https://www.npmjs.com/package/vnpay)
- üêô [GitHub Repository](https://github.com/lehuygiang28/vnpay)
- üìò [VNPay API Documentation](https://sandbox.vnpayment.vn/apis/)
- ‚ö° [Next.js 15 Documentation](https://nextjs.org/docs)
- üé® [Tailwind CSS Documentation](https://tailwindcss.com/docs)

## üß™ Testing

The application includes comprehensive demo mode with sandbox environment:

- **Test Environment**: Uses VNPay sandbox for safe testing
- **Sample Data**: Pre-filled form with test values (50,000 VND)
- **Test Cards**: Use VNPay provided test card numbers
- **URL Generation**: Inspect payment URLs before redirecting
- **IPN Testing**: Webhook endpoints work in development
- **Error Handling**: Comprehensive error states and recovery

## üì± SEO & Performance

- üåê **Vietnamese language optimization**
- üìä **Structured data** for search engines
- üñºÔ∏è **Open Graph** and Twitter card meta tags
- ü§ñ **Sitemap generation** for better indexing
- üì± **Mobile-first responsive design**
- ‚ö° **Optimized performance** with Next.js 15
- üîó **Proper internal linking structure**

## ü§ù Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## üìÑ License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## üë§ Author

### lehuygiang28

- GitHub: [@lehuygiang28](https://github.com/lehuygiang28)
- Email: [lehuygiang28@gmail.com](mailto:lehuygiang28@gmail.com)

Made with ‚ù§Ô∏è for the Vietnamese developer community

## üôè Acknowledgments

- [VNPay](https://vnpay.vn/) for providing the payment gateway services
- [Next.js team](https://nextjs.org/) for the amazing React framework
- [Tailwind CSS](https://tailwindcss.com/) for the utility-first CSS framework
- [Heroicons](https://heroicons.com/) for the beautiful icon set
- [Vercel](https://vercel.com/) for Next.js hosting and deployment **platform**



================================================
FILE: eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2025 L√™ Huy Giang

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;



================================================
FILE: package.json
================================================
{
  "name": "vnpay-nextjs-fullstack-example",
  "version": "1.0.0",
  "description": "Demo t√≠ch h·ª£p c·ªïng thanh to√°n VNPay v·ªõi Next.js 15. Bao g·ªìm Server Actions, x·ª≠ l√Ω IPN, hai t√πy ch·ªçn thanh to√°n v√† giao di·ªán responsive hi·ªán ƒë·∫°i. Ho√†n h·∫£o cho ·ª©ng d·ª•ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ Vi·ªát Nam.",
  "keywords": [
    "vnpay",
    "vnpayjs",
    "vnpay.vn",
    "payment",
    "vn-payment",
    "vn-payments",
    "nextjs",
    "c·ªïng thanh to√°n",
    "thanh to√°n vi·ªát nam",
    "th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠",
    "server-actions",
    "ipn-handler",
    "react",
    "typescript",
    "tailwindcss",
    "fullstack",
    "demo",
    "t√≠ch h·ª£p",
    "thanh to√°n online",
    "ng√¢n h√†ng vi·ªát nam",
    "fintech",
    "x·ª≠ l√Ω thanh to√°n",
    "sandbox",
    "nextjs-15"
  ],
  "author": "lehuygiang28 <lehuygiang28@gmail.com>",
  "maintainers": [
    "lehuygiang28"
  ],
  "license": "MIT",
  "homepage": "https://vnpay-nextjs-fullstack-example.vercel.app",
  "repository": {
    "type": "git",
    "url": "https://github.com/lehuygiang28/vnpay-nextjs-fullstack-example.git"
  },
  "bugs": {
    "url": "https://github.com/lehuygiang28/vnpay-nextjs-fullstack-example/issues"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "private": false,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "type-check": "tsc --noEmit",
    "preview": "next build && next start",
    "clean": "rm -rf .next out node_modules/.cache"
  },
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "clsx": "^2.1.1",
    "next": "15.3.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.3.1",
    "vnpay": "^2.4.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}



================================================
FILE: postcss.config.mjs
================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: .env.example
================================================
NODE_ENV="development"
VNPAY_TMN_CODE="YOUR_TMN_CODE"
VNPAY_SECURE_SECRET="YOUR_SECURE_SECRET"
VNPAY_HOST="https://sandbox.vnpayment.vn"
VNPAY_TEST_MODE="true"
VNPAY_RETURN_URL="http://localhost:3000/payment/return"


================================================
FILE: public/manifest.json
================================================
{
  "name": "VNPay Next.js Demo - T√≠ch h·ª£p C·ªïng Thanh to√°n",
  "short_name": "VNPay Demo",
  "description": "Demo t√≠ch h·ª£p c·ªïng thanh to√°n VNPay v·ªõi Next.js 15",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#3B82F6",
  "orientation": "portrait-primary",
  "scope": "/",
  "lang": "vi-VN",
  "dir": "ltr",
  "categories": ["business", "finance", "productivity", "developer"],
  "icons": [
    {
      "src": "/favicon-16x16.png",
      "sizes": "16x16",
      "type": "image/png"
    },
    {
      "src": "/favicon-32x32.png",
      "sizes": "32x32",
      "type": "image/png"
    },
    {
      "src": "/apple-touch-icon.png",
      "sizes": "180x180",
      "type": "image/png"
    },
    {
      "src": "/android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "/android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any maskable"
    }
  ],
  "screenshots": [
    {
      "src": "/screenshot-wide.png",
      "sizes": "1280x720",
      "type": "image/png",
      "form_factor": "wide",
      "label": "Giao di·ªán demo VNPay tr√™n desktop"
    },
    {
      "src": "/screenshot-narrow.png",
      "sizes": "375x667",
      "type": "image/png",
      "form_factor": "narrow",
      "label": "Giao di·ªán demo VNPay tr√™n mobile"
    }
  ],
  "shortcuts": [
    {
      "name": "Thanh to√°n VNPay",
      "short_name": "VNPay",
      "description": "T·∫°o thanh to√°n VNPay nhanh",
      "url": "/",
      "icons": [
        {
          "src": "/favicon-32x32.png",
          "sizes": "32x32",
          "type": "image/png"
        }
      ]
    },
    {
      "name": "Demo URL",
      "short_name": "Demo",
      "description": "Generate payment URL for demo",
      "url": "/?action=demo",
      "icons": [
        {
          "src": "/favicon-32x32.png",
          "sizes": "32x32"
        }
      ]
    }
  ],
  "prefer_related_applications": false,
  "related_applications": [
    {
      "platform": "web",
      "url": "https://vnpay.vn/"
    }
  ],
  "launch_handler": {
    "client_mode": "navigate-existing"
  },
  "edge_side_panel": {
    "preferred_width": 400
  },
  "protocol_handlers": [
    {
      "protocol": "web+vnpay",
      "url": "/?payment=%s"
    }
  ]
}



================================================
FILE: public/robots.txt
================================================
# robots.txt for VNPay Next.js Demo - T√≠ch h·ª£p C·ªïng Thanh to√°n
# Created by: lehuygiang28 <lehuygiang28@gmail.com>

User-agent: *
Allow: /

# Sitemap location
Sitemap: https://vnpay-nextjs-demo.vercel.app/sitemap.xml

# Crawl-delay for respectful crawling
Crawl-delay: 1

# Allow all major search engines
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Slurp
Allow: /

User-agent: DuckDuckBot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: Twitterbot
Allow: /

# Block access to API routes (they're for webhooks only)
User-agent: *
Disallow: /api/

# Allow access to important resources
Allow: /*.css$
Allow: /*.js$
Allow: /*.png$
Allow: /*.jpg$
Allow: /*.jpeg$
Allow: /*.gif$
Allow: /*.svg$
Allow: /*.webp$
Allow: /*.ico$
Allow: /*.json$

# Special handling for Vietnamese content
# Vietnamese language pages are prioritized
# Contact: lehuygiang28@gmail.com
# Website: https://vnpay-nextjs-demo.vercel.app 


================================================
FILE: src/app/globals.css
================================================
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
  --accent: #3b82f6;
  --accent-hover: #1e40af;
  --muted: #f8fafc;
  --border: #e2e8f0;
  --input: #f8fafc;
  --ring: #3b82f6;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-accent: var(--accent);
  --color-accent-hover: var(--accent-hover);
  --color-muted: var(--muted);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
    --accent: #60a5fa;
    --accent-hover: #3b82f6;
    --muted: #1e293b;
    --border: #334155;
    --input: #1e293b;
    --ring: #60a5fa;
  }
}

* {
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
  scroll-padding-top: 2rem;
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: var(--font-geist-sans), -apple-system, BlinkMacSystemFont,
    "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans",
    "Droid Sans", "Helvetica Neue", sans-serif;
  line-height: 1.6;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

/* Focus styles for accessibility */
*:focus-visible {
  outline: 2px solid var(--ring);
  outline-offset: 2px;
}

/* Skip to main content link for screen readers */
.skip-to-main {
  position: absolute;
  left: -10000px;
  top: auto;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

.skip-to-main:focus {
  position: static;
  width: auto;
  height: auto;
  background: var(--accent);
  color: white;
  padding: 0.5rem 1rem;
  text-decoration: none;
  z-index: 1000;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: var(--muted);
}

::-webkit-scrollbar-thumb {
  background: var(--border);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--accent);
}

/* Selection styling */
::selection {
  background-color: var(--accent);
  color: white;
}

::-moz-selection {
  background-color: var(--accent);
  color: white;
}

/* Print styles */
@media print {
  body {
    background: white !important;
    color: black !important;
  }

  .no-print {
    display: none !important;
  }
}

/* Reduced motion */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* High contrast mode */
@media (prefers-contrast: high) {
  :root {
    --background: #ffffff;
    --foreground: #000000;
    --accent: #0000ff;
    --border: #000000;
  }

  [data-theme="dark"] {
    --background: #000000;
    --foreground: #ffffff;
    --accent: #00ffff;
    --border: #ffffff;
  }
}

/* Loading animation */
@keyframes pulse-subtle {
  0%,
  100% {
    opacity: 1;
  }
  50% {
    opacity: 0.7;
  }
}

.animate-pulse-subtle {
  animation: pulse-subtle 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

/* Form improvements */
input[type="number"]::-webkit-outer-spin-button,
input[type="number"]::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type="number"] {
  -moz-appearance: textfield;
}

/* Button loading state */
.btn-loading {
  position: relative;
  pointer-events: none;
}

.btn-loading::after {
  content: "";
  position: absolute;
  width: 16px;
  height: 16px;
  margin: auto;
  border: 2px solid transparent;
  border-top-color: currentColor;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* Toast notifications */
.toast {
  position: fixed;
  top: 1rem;
  right: 1rem;
  background: var(--accent);
  color: white;
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

/* VNPay branding colors */
.vnpay-primary {
  background-color: #1976d2;
}

.vnpay-secondary {
  background-color: #ffa726;
}

/* Utility classes */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}



================================================
FILE: src/app/layout.tsx
================================================
import type { Metadata, Viewport } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
  display: "swap",
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
  display: "swap",
});

export const viewport: Viewport = {
  width: "device-width",
  initialScale: 1,
  maximumScale: 5,
  themeColor: [
    { media: "(prefers-color-scheme: light)", color: "#3B82F6" },
    { media: "(prefers-color-scheme: dark)", color: "#1E40AF" },
  ],
};

export const metadata: Metadata = {
  title: {
    default: "VNPay Next.js Demo | T√≠ch h·ª£p C·ªïng Thanh to√°n VNPay",
    template: "%s | VNPay Next.js Demo",
  },
  description:
    "Demo t√≠ch h·ª£p c·ªïng thanh to√°n VNPay v·ªõi Next.js 15. Bao g·ªìm Server Actions, x·ª≠ l√Ω IPN, hai t√πy ch·ªçn thanh to√°n v√† giao di·ªán responsive hi·ªán ƒë·∫°i. Ho√†n h·∫£o cho ·ª©ng d·ª•ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ Vi·ªát Nam.",
  keywords: [
    "vnpay",
    "vnpayjs",
    "vnpay.vn",
    "payment",
    "vn-payment",
    "vn-payments",
    "nextjs",
    "c·ªïng thanh to√°n",
    "thanh to√°n vi·ªát nam",
    "th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠",
    "server actions",
    "ipn handler",
    "react",
    "typescript",
    "tailwindcss",
    "fullstack",
    "demo",
    "t√≠ch h·ª£p",
    "thanh to√°n online",
    "ng√¢n h√†ng vi·ªát nam",
    "fintech",
    "x·ª≠ l√Ω thanh to√°n",
    "sandbox",
    "nextjs-15",
  ],
  authors: [{ name: "lehuygiang28", url: "https://github.com/lehuygiang28" }],
  creator: "lehuygiang28",
  publisher: "lehuygiang28",
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      "max-video-preview": -1,
      "max-image-preview": "large",
      "max-snippet": -1,
    },
  },
  openGraph: {
    type: "website",
    locale: "vi_VN",
    url: "https://vnpay-nextjs-fullstack-example.vercel.app",
    siteName: "VNPay Next.js Demo - T√≠ch h·ª£p C·ªïng Thanh to√°n",
    title: "VNPay Next.js Demo | T√≠ch h·ª£p C·ªïng Thanh to√°n VNPay",
    description:
      "Demo t√≠ch h·ª£p c·ªïng thanh to√°n VNPay v·ªõi Next.js 15. Bao g·ªìm Server Actions, x·ª≠ l√Ω IPN, hai t√πy ch·ªçn thanh to√°n v√† giao di·ªán responsive hi·ªán ƒë·∫°i.",
  },
  twitter: {
    card: "summary",
    creator: "@lehuygiang28",
    title: "VNPay Next.js Demo | T√≠ch h·ª£p C·ªïng Thanh to√°n VNPay",
    description:
      "Demo t√≠ch h·ª£p c·ªïng thanh to√°n VNPay v·ªõi Next.js 15. Bao g·ªìm Server Actions, x·ª≠ l√Ω IPN v√† giao di·ªán responsive hi·ªán ƒë·∫°i.",
  },
  category: "technology",
  classification: "Business",
  referrer: "origin-when-cross-origin",
  formatDetection: {
    email: false,
    address: false,
    telephone: false,
  },
  metadataBase: new URL("https://vnpay-nextjs-fullstack-example.vercel.app"),
  alternates: {
    canonical: "/",
  },

  manifest: "/manifest.json",
  icons: {
    icon: [
      { url: "/favicon-16x16.png", sizes: "16x16", type: "image/png" },
      { url: "/favicon-32x32.png", sizes: "32x32", type: "image/png" },
      { url: "/favicon.ico", sizes: "any" },
    ],
    apple: [
      { url: "/apple-touch-icon.png", sizes: "180x180", type: "image/png" },
    ],
  },
  other: {
    "msapplication-TileColor": "#3B82F6",
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="vi" className="scroll-smooth">
      <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link
          rel="preconnect"
          href="https://fonts.gstatic.com"
          crossOrigin="anonymous"
        />

        {/* Structured Data for SEO */}
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify({
              "@context": "https://schema.org",
              "@type": "WebApplication",
              name: "VNPay Next.js Demo - T√≠ch h·ª£p C·ªïng Thanh to√°n",
              description: "Demo t√≠ch h·ª£p c·ªïng thanh to√°n VNPay v·ªõi Next.js 15",
              url: "https://vnpay-nextjs-fullstack-example.vercel.app",
              applicationCategory: "BusinessApplication",
              operatingSystem: "Web",
              browserRequirements: "Requires JavaScript. Requires HTML5.",
              inLanguage: "vi-VN",
              offers: {
                "@type": "Offer",
                price: "0",
                priceCurrency: "VND",
              },
              creator: {
                "@type": "Person",
                name: "lehuygiang28",
                email: "lehuygiang28@gmail.com",
              },
              featureList: [
                "T√≠ch h·ª£p VNPay Payment Gateway",
                "Next.js 15 Server Actions",
                "X·ª≠ l√Ω IPN Handler",
                "Giao di·ªán Responsive",
                "H·ªó tr·ª£ TypeScript",
                "Styling v·ªõi Tailwind CSS",
              ],
              audience: {
                "@type": "Audience",
                audienceType: "Developers",
                geographicArea: {
                  "@type": "Country",
                  name: "Vietnam",
                },
              },
            }),
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-screen`}
      >
        <a href="#main-content" className="skip-to-main">
          Chuy·ªÉn ƒë·∫øn n·ªôi dung ch√≠nh
        </a>
        <div id="main-content">{children}</div>
      </body>
    </html>
  );
}



================================================
FILE: src/app/page.tsx
================================================
"use client";

import { useState, useEffect } from "react";
import { Header } from "@/components/layout/Header";
import { Footer } from "@/components/layout/Footer";
import { PaymentForm } from "@/components/payment/PaymentForm";
import { PaymentResult } from "@/components/payment/PaymentResult";
import { InfoPanels } from "@/components/payment/InfoPanels";
import {
  createPaymentUrl,
  generatePaymentUrlDemo,
  getBankListAction,
  getProductCodeOptions,
  getLocaleOptions,
  type BankOption,
  type ProductCodeOption,
  type LocaleOption,
  type PaymentResult as PaymentResultType,
} from "./actions/payment";

export default function HomePage() {
  const [banks, setBanks] = useState<BankOption[]>([]);
  const [productCodeOptions, setProductCodeOptions] = useState<
    ProductCodeOption[]
  >([]);
  const [localeOptions, setLocaleOptions] = useState<LocaleOption[]>([]);
  const [loading, setLoading] = useState(false);
  const [paymentResult, setPaymentResult] = useState<PaymentResultType | null>(
    null
  );

  // Load initial data
  useEffect(() => {
    const loadData = async () => {
      try {
        const [banksData, productCodes, locales] = await Promise.all([
          getBankListAction(),
          getProductCodeOptions(),
          getLocaleOptions(),
        ]);

        setBanks(banksData);
        setProductCodeOptions(productCodes);
        setLocaleOptions(locales);
      } catch (error) {
        console.error("Failed to load initial data:", error);
      }
    };

    loadData();
  }, []);

  const handleRedirectPayment = async (formData: FormData) => {
    setLoading(true);
    try {
      await createPaymentUrl(formData);
    } catch (error) {
      // Check if this is a Next.js redirect (expected behavior)
      const isRedirect =
        error instanceof Error &&
        (error.message.includes("NEXT_REDIRECT") ||
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (error as any).digest?.includes("NEXT_REDIRECT"));

      if (isRedirect) {
        // This is expected behavior for redirect() in Server Actions
        console.log("Redirecting to VNPay payment gateway...");
      } else {
        // Only log actual errors
        console.error("Payment redirect failed:", error);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateUrl = async (
    formData: FormData
  ): Promise<PaymentResultType> => {
    setLoading(true);
    try {
      const result = await generatePaymentUrlDemo(formData);
      setPaymentResult(result);
      return result;
    } catch (error) {
      console.error("URL generation failed:", error);
      const errorResult: PaymentResultType = {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
      setPaymentResult(errorResult);
      return errorResult;
    } finally {
      setLoading(false);
    }
  };

  const clearPaymentResult = () => {
    setPaymentResult(null);
  };

  const resourceLinks = [
    {
      href: "https://github.com/lehuygiang28/vnpay-nextjs-fullstack-example",
      label: "GitHub",
      variant: "github" as const,
    },
    {
      href: "https://www.npmjs.com/package/vnpay",
      label: "NPM Package",
      variant: "npm" as const,
    },
    {
      href: "https://sandbox.vnpayment.vn/",
      label: "VNPay Sandbox",
      variant: "vnpay" as const,
    },
    {
      href: "https://sandbox.vnpayment.vn/apis/",
      label: "API Docs",
      variant: "docs" as const,
    },
  ];

  const poweredBy = [
    { name: "VNPay", url: "https://vnpay.vn" },
    { name: "Next.js 15", url: "https://nextjs.org" },
  ];

  const author = {
    name: "lehuygiang28",
    url: "https://github.com/lehuygiang28",
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50">
      <div className="container mx-auto px-4 py-8">
        <Header
          title="VNPay Next.js Demo"
          subtitle="T√≠ch h·ª£p C·ªïng Thanh to√°n VNPay v·ªõi Next.js 15"
          resourceLinks={resourceLinks}
        />

        <main className="grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
          <PaymentForm
            banks={banks}
            productCodeOptions={productCodeOptions}
            localeOptions={localeOptions}
            onRedirectPayment={handleRedirectPayment}
            onGenerateUrl={handleGenerateUrl}
            loading={loading}
          />

          <InfoPanels />
        </main>

        {paymentResult && (
          <div className="max-w-7xl mx-auto mt-8">
            <PaymentResult
              result={paymentResult}
              onClear={clearPaymentResult}
            />
          </div>
        )}

        <Footer
          poweredBy={poweredBy}
          repositoryUrl="https://github.com/lehuygiang28/vnpay-nextjs-fullstack-example"
          author={author}
        />
      </div>
    </div>
  );
}



================================================
FILE: src/app/sitemap.ts
================================================
import { MetadataRoute } from "next";

export default function sitemap(): MetadataRoute.Sitemap {
  const baseUrl = "https://vnpay-nextjs-demo.vercel.app";
  const lastModified = new Date();

  return [
    {
      url: baseUrl,
      lastModified,
      changeFrequency: "weekly",
      priority: 1,
    },
    {
      url: `${baseUrl}/payment/return`,
      lastModified,
      changeFrequency: "monthly",
      priority: 0.8,
    },
  ];
}



================================================
FILE: src/app/actions/payment.ts
================================================
"use server";

import { redirect } from "next/navigation";
import { headers } from "next/headers";
import { vnpay, getClientIP, formatAmount, generateOrderId } from "@/lib/vnpay";
import { ProductCode, VnpLocale, VnpCurrCode, dateFormat } from "vnpay";
import type {
  BankOption,
  ProductCodeOption,
  LocaleOption,
  PaymentResult,
} from "@/types/payment";

// Define types for client-side use (without importing VNPay)
export interface PaymentFormData {
  amount: string;
  orderInfo: string;
  orderType: string;
  bankCode?: string;
  locale: string;
}

export type {
  BankOption,
  ProductCodeOption,
  LocaleOption,
  PaymentResult,
} from "@/types/payment";

// Server action to get bank list
export async function getBankListAction(): Promise<BankOption[]> {
  try {
    const banks = await vnpay.getBankList();
    return banks.map((bank) => ({
      bank_code: bank.bank_code,
      bank_name: bank.bank_name,
    }));
  } catch (error) {
    console.error("Failed to fetch bank list:", error);
    return [];
  }
}

// Server action to get product code options
export async function getProductCodeOptions(): Promise<ProductCodeOption[]> {
  return [
    { value: ProductCode.Other, label: "Kh√°c" },
    { value: ProductCode.Fashion, label: "Th·ªùi trang" },
    { value: ProductCode.Food_Consumption, label: "Th·ª±c ph·∫©m" },
    { value: ProductCode.Books_Newspapers_Magazines, label: "S√°ch & B√°o ch√≠" },
    { value: ProductCode.Electronics_Sound, label: "ƒêi·ªán t·ª≠" },
    { value: ProductCode.Phone_Tablet, label: "ƒêi·ªán tho·∫°i & Tablet" },
    { value: ProductCode.Hotel_Tourism, label: "Kh√°ch s·∫°n & Du l·ªãch" },
    { value: ProductCode.Cuisine, label: "·∫®m th·ª±c" },
    { value: ProductCode.Entertainment_Training, label: "Gi·∫£i tr√≠ & ƒê√†o t·∫°o" },
    { value: ProductCode.Health_Beauty, label: "S·ª©c kh·ªèe & L√†m ƒë·∫πp" },
  ];
}

// Server action to get locale options
export async function getLocaleOptions(): Promise<LocaleOption[]> {
  return [
    { value: VnpLocale.VN, label: "Ti·∫øng Vi·ªát" },
    { value: VnpLocale.EN, label: "English" },
  ];
}

// Server action to create payment URL and redirect to VNPay
export async function createPaymentUrl(formData: FormData) {
  try {
    const headersList = await headers();
    const clientIP = getClientIP(headersList);

    // Extract form data
    const amount = formData.get("amount") as string;
    const orderInfo = formData.get("orderInfo") as string;
    const orderType = formData.get("orderType") as string;
    const bankCode = formData.get("bankCode") as string;
    const locale = formData.get("locale") as string;

    // Validation
    if (!amount || !orderInfo) {
      throw new Error("Amount and order info are required");
    }

    const numAmount = parseInt(amount);
    if (isNaN(numAmount) || numAmount < 1000) {
      throw new Error("Amount must be at least 1,000 VND");
    }

    // Generate order ID
    const orderId = generateOrderId();

    // Build payment URL
    const paymentUrl = vnpay.buildPaymentUrl({
      vnp_Amount: formatAmount(numAmount),
      vnp_CreateDate: dateFormat(new Date()),
      vnp_CurrCode: VnpCurrCode.VND,
      vnp_IpAddr: clientIP,
      vnp_Locale: locale as VnpLocale,
      vnp_OrderInfo: orderInfo,
      vnp_OrderType: orderType as ProductCode,
      vnp_ReturnUrl:
        process.env.VNPAY_RETURN_URL || "http://localhost:3000/payment/return",
      vnp_TxnRef: orderId,
      ...(bankCode && { vnp_BankCode: bankCode }),
    });

    console.log(`Generated payment URL for order ${orderId}:`, paymentUrl);

    // Redirect to VNPay
    // Note: redirect() in Server Actions throws a NEXT_REDIRECT error which is expected behavior
    redirect(paymentUrl);
  } catch (error) {
    // Check if this is a Next.js redirect (expected behavior)
    const isRedirect =
      error instanceof Error &&
      (error.message.includes("NEXT_REDIRECT") ||
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (error as any).digest?.includes("NEXT_REDIRECT"));

    if (isRedirect) {
      // This is expected behavior for redirect() in Server Actions
      console.log("Redirecting to VNPay payment gateway...");
    } else {
      // Only log actual errors
      console.error("Error creating payment URL:", error);
    }
    throw error;
  }
}

// Server action to generate payment URL without redirecting (for demo purposes)
export async function generatePaymentUrlDemo(
  formData: FormData
): Promise<PaymentResult> {
  try {
    const headersList = await headers();
    const clientIP = getClientIP(headersList);

    // Extract form data
    const amount = formData.get("amount") as string;
    const orderInfo = formData.get("orderInfo") as string;
    const orderType = formData.get("orderType") as string;
    const bankCode = formData.get("bankCode") as string;
    const locale = formData.get("locale") as string;

    // Validation
    if (!amount || !orderInfo) {
      return {
        success: false,
        error: "Amount and order info are required",
      };
    }

    const numAmount = parseInt(amount);
    if (isNaN(numAmount) || numAmount < 1000) {
      return {
        success: false,
        error: "Amount must be at least 1,000 VND",
      };
    }

    // Generate order ID
    const orderId = generateOrderId();

    // Build payment URL
    const paymentUrl = vnpay.buildPaymentUrl({
      vnp_Amount: formatAmount(numAmount),
      vnp_CreateDate: dateFormat(new Date()),
      vnp_CurrCode: VnpCurrCode.VND,
      vnp_IpAddr: clientIP,
      vnp_Locale: locale as VnpLocale,
      vnp_OrderInfo: orderInfo,
      vnp_OrderType: orderType as ProductCode,
      vnp_ReturnUrl:
        process.env.VNPAY_RETURN_URL || "http://localhost:3000/payment/return",
      vnp_TxnRef: orderId,
      ...(bankCode && { vnp_BankCode: bankCode }),
    });

    console.log(`Generated demo payment URL for order ${orderId}:`, paymentUrl);

    return {
      success: true,
      paymentUrl,
      orderId,
    };
  } catch (error) {
    console.error("Error generating demo payment URL:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
}

// Legacy function - kept for backwards compatibility
export async function generatePaymentUrl(
  data: PaymentFormData
): Promise<string> {
  const headersList = await headers();
  const clientIP = getClientIP(headersList);

  const orderId = generateOrderId();
  const numAmount = parseInt(data.amount);

  const paymentUrl = vnpay.buildPaymentUrl({
    vnp_Amount: formatAmount(numAmount),
    vnp_CreateDate: dateFormat(new Date()),
    vnp_CurrCode: VnpCurrCode.VND,
    vnp_IpAddr: clientIP,
    vnp_Locale: data.locale as VnpLocale,
    vnp_OrderInfo: data.orderInfo,
    vnp_OrderType: data.orderType as ProductCode,
    vnp_ReturnUrl:
      process.env.VNPAY_RETURN_URL || "http://localhost:3000/payment/return",
    vnp_TxnRef: orderId,
    ...(data.bankCode && { vnp_BankCode: data.bankCode }),
  });

  return paymentUrl;
}



================================================
FILE: src/app/api/payment/ipn/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { vnpay } from "@/lib/vnpay";
import {
  VerifyIpnCall,
  IpnFailChecksum,
  IpnOrderNotFound,
  IpnInvalidAmount,
  InpOrderAlreadyConfirmed,
  IpnSuccess,
  IpnUnknownError,
} from "vnpay";

// Mock database functions - replace with your actual database operations
interface Order {
  orderId: string;
  amount: number;
  status: "pending" | "completed" | "failed" | "cancelled";
  createdAt: Date;
  updatedAt: Date;
}

// Mock order storage (in real app, use database)
const orders = new Map<string, Order>();

async function findOrderById(orderId: string): Promise<Order | null> {
  // In a real application, this would query your database
  return orders.get(orderId) || null;
}

async function updateOrderStatus(
  orderId: string,
  status: Order["status"]
): Promise<void> {
  // In a real application, this would update your database
  const order = orders.get(orderId);
  if (order) {
    order.status = status;
    order.updatedAt = new Date();
    orders.set(orderId, order);
  }
}

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const queryParams = Object.fromEntries(searchParams.entries());

    console.log("IPN received:", queryParams);

    // Verify the IPN call
    const verify = vnpay.verifyIpnCall(queryParams as unknown as VerifyIpnCall);

    // Check if the verification is successful
    if (!verify.isVerified) {
      console.log("IPN verification failed: Invalid checksum");
      return NextResponse.json(IpnFailChecksum);
    }

    if (!verify.isSuccess) {
      console.log("IPN verification failed: Payment was not successful");
      return NextResponse.json(IpnUnknownError);
    }

    // Find the order in the database
    const foundOrder = await findOrderById(verify.vnp_TxnRef);

    // Check if order exists
    if (!foundOrder || verify.vnp_TxnRef !== foundOrder.orderId) {
      console.log("IPN verification failed: Order not found");
      return NextResponse.json(IpnOrderNotFound);
    }

    // Check if the payment amount matches
    if (verify.vnp_Amount !== foundOrder.amount) {
      console.log("IPN verification failed: Amount mismatch");
      return NextResponse.json(IpnInvalidAmount);
    }

    // Check if the order has already been confirmed
    if (foundOrder.status === "completed") {
      console.log("IPN verification: Order already confirmed");
      return NextResponse.json(InpOrderAlreadyConfirmed);
    }

    // Update the order status to completed
    await updateOrderStatus(foundOrder.orderId, "completed");

    console.log("IPN verification successful: Order completed", {
      orderId: foundOrder.orderId,
      amount: foundOrder.amount,
      transactionNo: verify.vnp_TransactionNo,
    });

    // Return success response to VNPay
    return NextResponse.json(IpnSuccess);
  } catch (error) {
    console.error("IPN processing error:", error);
    return NextResponse.json(IpnUnknownError);
  }
}

// VNPay may also send POST requests, so handle both methods
export async function POST(request: NextRequest) {
  return GET(request);
}



================================================
FILE: src/app/payment/return/page.tsx
================================================
import { Suspense } from "react";
import {
  CheckCircleIcon,
  XCircleIcon,
  ClockIcon,
} from "@heroicons/react/24/outline";
import { vnpay } from "@/lib/vnpay";
import { type VerifyReturnUrl, parseDate } from "vnpay";
import Link from "next/link";
import { PrintButton } from "@/components/ui";

// Mark this route as dynamic since it uses searchParams
export const dynamic = "force-dynamic";

interface PaymentReturnProps {
  searchParams: Promise<Record<string, string | string[] | undefined>>;
}

function PaymentResultSkeleton() {
  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-6">
        <div className="animate-pulse">
          <div className="w-16 h-16 bg-gray-200 rounded-full mx-auto mb-4"></div>
          <div className="h-6 bg-gray-200 rounded mb-2"></div>
          <div className="h-4 bg-gray-200 rounded mb-4"></div>
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded"></div>
            <div className="h-4 bg-gray-200 rounded"></div>
            <div className="h-4 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    </div>
  );
}

async function PaymentResult({ searchParams }: PaymentReturnProps) {
  try {
    const params = await searchParams;

    // Verify the return URL
    const verify = vnpay.verifyReturnUrl(params as unknown as VerifyReturnUrl);

    const isSuccess = verify.isVerified && verify.isSuccess;
    const Icon = isSuccess ? CheckCircleIcon : XCircleIcon;
    const iconColor = isSuccess ? "text-green-500" : "text-red-500";
    const bgColor = isSuccess ? "bg-green-50" : "bg-red-50";
    const borderColor = isSuccess ? "border-green-200" : "border-red-200";

    // Format payment date
    const paymentDate = verify.vnp_PayDate
      ? parseDate(verify.vnp_PayDate).toLocaleString("vi-VN", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        })
      : "N/A";

    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="max-w-md w-full bg-white rounded-lg shadow-lg overflow-hidden">
          {/* Header */}
          <div className={`${bgColor} ${borderColor} border-b px-6 py-4`}>
            <div className="flex items-center">
              <Icon className={`w-8 h-8 ${iconColor} mr-3`} />
              <div>
                <h1 className="text-lg font-semibold text-gray-900">
                  {isSuccess ? "Thanh to√°n th√†nh c√¥ng" : "Thanh to√°n th·∫•t b·∫°i"}
                </h1>
                <p className="text-sm text-gray-600">
                  {isSuccess
                    ? "Giao d·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng"
                    : "Giao d·ªãch kh√¥ng th·ªÉ ho√†n th√†nh"}
                </p>
              </div>
            </div>
          </div>

          {/* Demo Notice */}
          <div className="px-6 py-3 bg-blue-50 border-b border-blue-200">
            <div className="flex items-start gap-2">
              <div className="w-4 h-4 mt-0.5 flex-shrink-0">
                <svg
                  className="w-4 h-4 text-blue-600"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                    clipRule="evenodd"
                  />
                </svg>
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-xs text-blue-800 leading-relaxed">
                  <strong>M·ª•c ƒë√≠ch Demo:</strong> Trang n√†y hi·ªÉn th·ªã k·∫øt qu·∫£
                  thanh to√°n ch·ªâ ƒë·ªÉ demo giao di·ªán. Trong th·ª±c t·∫ø, b·∫°n ph·∫£i ch·ªù
                  v√† l·∫Øng nghe IPN (Instant Payment Notification) ƒë·ªÉ x√°c minh
                  giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng hay ch∆∞a v√† c·∫≠p nh·∫≠t h·ªá
                  th·ªëng c·ªßa b·∫°n.
                </p>
                <div className="mt-2 space-y-1">
                  <div>
                    <a
                      href="https://vnpay.js.org/ipn/verify-ipn-call"
                      target="_blank"
                      rel="noopener"
                      className="text-blue-600 hover:text-blue-800 underline font-medium text-xs"
                    >
                      üìö H∆∞·ªõng d·∫´n VNPay.js IPN ‚Üí
                    </a>
                  </div>
                  <div>
                    <a
                      href="https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#code-ipn-url"
                      target="_blank"
                      rel="noopener"
                      className="text-blue-600 hover:text-blue-800 underline font-medium text-xs"
                    >
                      üìñ T√†i li·ªáu ch√≠nh th·ª©c VNPay IPN ‚Üí
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="px-6 py-4 space-y-4">
            {/* Transaction Details */}
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-sm font-medium text-gray-600">
                  M√£ ƒë∆°n h√†ng:
                </span>
                <span className="text-sm text-gray-900 font-mono">
                  {verify.vnp_TxnRef}
                </span>
              </div>

              {verify.vnp_Amount && (
                <div className="flex justify-between">
                  <span className="text-sm font-medium text-gray-600">
                    S·ªë ti·ªÅn:
                  </span>
                  <span className="text-sm text-gray-900 font-semibold">
                    {Number(verify.vnp_Amount).toLocaleString("vi-VN")} VNƒê
                  </span>
                </div>
              )}

              {verify.vnp_OrderInfo && (
                <div className="flex justify-between">
                  <span className="text-sm font-medium text-gray-600">
                    N·ªôi dung:
                  </span>
                  <span className="text-sm text-gray-900 text-right max-w-48 truncate">
                    {verify.vnp_OrderInfo}
                  </span>
                </div>
              )}

              <div className="flex justify-between">
                <span className="text-sm font-medium text-gray-600">
                  Th·ªùi gian:
                </span>
                <span className="text-sm text-gray-900">{paymentDate}</span>
              </div>

              {verify.vnp_TransactionNo && (
                <div className="flex justify-between">
                  <span className="text-sm font-medium text-gray-600">
                    M√£ giao d·ªãch:
                  </span>
                  <span className="text-sm text-gray-900 font-mono">
                    {verify.vnp_TransactionNo}
                  </span>
                </div>
              )}

              {verify.vnp_BankCode && (
                <div className="flex justify-between">
                  <span className="text-sm font-medium text-gray-600">
                    Ng√¢n h√†ng:
                  </span>
                  <span className="text-sm text-gray-900">
                    {verify.vnp_BankCode}
                  </span>
                </div>
              )}
            </div>

            {/* Status Message */}
            {!verify.isVerified && (
              <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3">
                <div className="flex items-center">
                  <ClockIcon className="w-5 h-5 text-yellow-500 mr-2" />
                  <p className="text-sm text-yellow-800">
                    Kh√¥ng th·ªÉ x√°c minh t√≠nh to√†n v·∫πn d·ªØ li·ªáu. Vui l√≤ng li√™n h·ªá
                    h·ªó tr·ª£.
                  </p>
                </div>
              </div>
            )}
          </div>

          {/* Footer */}
          <div className="px-6 py-4 bg-gray-50 border-t">
            <div className="flex space-x-3">
              <Link
                href="/"
                className="flex-1 bg-blue-600 text-white text-center py-2 px-4 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors"
              >
                Quay v·ªÅ trang ch·ªß
              </Link>
              {isSuccess && <PrintButton />}
            </div>
          </div>
        </div>
      </div>
    );
  } catch (error) {
    console.error("Payment verification error:", error);

    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-6">
          <div className="text-center">
            <XCircleIcon className="w-16 h-16 text-red-500 mx-auto mb-4" />
            <h1 className="text-xl font-semibold text-gray-900 mb-2">
              L·ªói x·ª≠ l√Ω
            </h1>
            <p className="text-gray-600 mb-6">
              Kh√¥ng th·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá
              h·ªó tr·ª£.
            </p>
            <Link
              href="/"
              className="inline-block bg-blue-600 text-white px-6 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors"
            >
              Quay v·ªÅ trang ch·ªß
            </Link>
          </div>
        </div>
      </div>
    );
  }
}

export default function PaymentReturnPage(props: PaymentReturnProps) {
  return (
    <Suspense fallback={<PaymentResultSkeleton />}>
      <PaymentResult {...props} />
    </Suspense>
  );
}



================================================
FILE: src/components/common/ErrorBoundary.tsx
================================================
"use client";

import { Component, ErrorInfo, ReactNode } from "react";

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error("ErrorBoundary caught an error:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return (
        <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-50 flex items-center justify-center p-4">
          <div className="max-w-md w-full bg-white rounded-xl shadow-lg p-8 text-center border border-red-100">
            <div className="w-16 h-16 mx-auto mb-4 bg-red-100 rounded-full flex items-center justify-center">
              <svg
                className="w-8 h-8 text-red-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
                />
              </svg>
            </div>

            <h2 className="text-xl font-semibold text-gray-900 mb-2">
              C√≥ l·ªói x·∫£y ra
            </h2>

            <p className="text-gray-600 mb-6">
              ·ª®ng d·ª•ng ƒë√£ g·∫∑p l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i sau.
            </p>

            <div className="space-y-3">
              <button
                onClick={() => window.location.reload()}
                className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors font-medium"
              >
                T·∫£i l·∫°i trang
              </button>

              <button
                onClick={() => window.history.back()}
                className="w-full bg-gray-200 text-gray-800 py-2 px-4 rounded-lg hover:bg-gray-300 transition-colors font-medium"
              >
                Quay l·∫°i
              </button>
            </div>

            {process.env.NODE_ENV === "development" && this.state.error && (
              <details className="mt-6 text-left">
                <summary className="cursor-pointer text-sm text-gray-500 hover:text-gray-700">
                  Chi ti·∫øt l·ªói (Development)
                </summary>
                <pre className="mt-2 text-xs bg-gray-100 p-3 rounded overflow-auto text-red-600">
                  {this.state.error.stack}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}



================================================
FILE: src/components/layout/Footer.tsx
================================================
interface FooterProps {
  poweredBy?: Array<{
    name: string;
    url: string;
  }>;
  repositoryUrl?: string;
  author?: {
    name: string;
    url: string;
  };
}

export function Footer({ poweredBy, repositoryUrl, author }: FooterProps) {
  return (
    <footer className="text-center mt-12 space-y-4">
      {/* Author Info */}
      {author && (
        <div className="text-gray-700 text-sm">
          <p className="flex items-center justify-center gap-2">
            Made with
            <span className="text-red-500 animate-pulse">‚ù§Ô∏è</span>
            by
            <a
              href={author.url}
              target="_blank"
              rel="noopener noreferrer"
              className="inline-flex items-center gap-1 font-medium text-blue-600 hover:text-blue-700 hover:underline transition-colors"
            >
              <svg
                className="w-4 h-4"
                fill="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path
                  fillRule="evenodd"
                  d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"
                  clipRule="evenodd"
                />
              </svg>
              {author.name}
            </a>
          </p>
        </div>
      )}

      {/* Powered By */}
      {poweredBy && poweredBy.length > 0 && (
        <div className="text-gray-600 text-sm">
          <p className="flex items-center justify-center gap-1 flex-wrap">
            Powered by
            {poweredBy.map((item, index) => (
              <span key={index} className="flex items-center">
                <a
                  href={item.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="font-medium text-blue-600 hover:text-blue-700 hover:underline transition-colors"
                >
                  {item.name}
                </a>
                {index < poweredBy.length - 1 && (
                  <span className="mx-1 text-gray-400">&</span>
                )}
              </span>
            ))}
          </p>
        </div>
      )}

      {/* Repository Link */}
      {repositoryUrl && (
        <div className="pt-2 border-t border-gray-200">
          <a
            href={repositoryUrl}
            target="_blank"
            rel="noopener noreferrer"
            className="inline-flex items-center gap-2 text-gray-500 hover:text-gray-700 transition-colors text-sm"
          >
            <svg
              className="w-4 h-4"
              fill="currentColor"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <path
                fillRule="evenodd"
                d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"
                clipRule="evenodd"
              />
            </svg>
            View on GitHub
          </a>
        </div>
      )}
    </footer>
  );
}



================================================
FILE: src/components/layout/Header.tsx
================================================
import { CreditCardIcon } from "@heroicons/react/24/outline";

interface HeaderProps {
  title: string;
  subtitle?: string;
  resourceLinks?: Array<{
    href: string;
    label: string;
    icon?: React.ComponentType<{ className?: string }>;
    variant?: "github" | "npm" | "vnpay" | "docs" | "default";
  }>;
}

export function Header({ title, subtitle, resourceLinks }: HeaderProps) {
  const getLinkStyles = (variant?: string) => {
    const baseStyles =
      "inline-flex items-center gap-2 px-4 py-2 rounded-lg font-medium text-sm transition-all duration-200 hover:scale-105 hover:shadow-md";

    switch (variant) {
      case "github":
        return `${baseStyles} bg-gray-900 text-white hover:bg-gray-800`;
      case "npm":
        return `${baseStyles} bg-red-600 text-white hover:bg-red-700`;
      case "vnpay":
        return `${baseStyles} bg-blue-600 text-white hover:bg-blue-700`;
      case "docs":
        return `${baseStyles} bg-green-700 text-white hover:bg-green-800`;
      default:
        return `${baseStyles} bg-indigo-600 text-white hover:bg-indigo-700`;
    }
  };

  const getIcon = (
    variant?: string,
    IconComponent?: React.ComponentType<{ className?: string }>
  ) => {
    if (IconComponent) {
      return (
        <IconComponent className="w-4 h-4 flex-shrink-0" aria-hidden="true" />
      );
    }

    // Default icons based on variant
    switch (variant) {
      case "github":
        return (
          <svg
            className="w-4 h-4 flex-shrink-0"
            fill="currentColor"
            viewBox="0 0 24 24"
            aria-hidden="true"
          >
            <path
              fillRule="evenodd"
              d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"
              clipRule="evenodd"
            />
          </svg>
        );
      case "npm":
        return (
          <svg
            className="w-4 h-4 flex-shrink-0"
            fill="currentColor"
            viewBox="0 0 24 24"
            aria-hidden="true"
          >
            <path d="M0 7v5h6.5v1.5H4.5V15H11V7H0zm6.5 6H2V8.5h4.5V13zM11 7v8h6.5V7H11zm6 7.5h-5V8.5h5V14.5zM17.5 7v8H24V7h-6.5zm6 7.5h-5V8.5h5V14.5z" />
          </svg>
        );
      case "vnpay":
      case "docs":
        return (
          <svg
            className="w-4 h-4 flex-shrink-0"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            aria-hidden="true"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
            />
          </svg>
        );
      default:
        return (
          <svg
            className="w-4 h-4 flex-shrink-0"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            aria-hidden="true"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"
            />
          </svg>
        );
    }
  };

  return (
    <header className="text-center mb-8">
      <div className="flex items-center justify-center mb-4">
        <CreditCardIcon
          className="w-12 h-12 text-blue-600 mr-3 flex-shrink-0"
          aria-hidden="true"
        />
        <h1 className="text-4xl font-bold text-gray-900">{title}</h1>
      </div>

      {subtitle && (
        <p className="text-gray-700 text-lg mb-6 font-medium">{subtitle}</p>
      )}

      {resourceLinks && resourceLinks.length > 0 && (
        <nav
          aria-label="External resources"
          className="flex flex-wrap justify-center gap-3 mb-6"
        >
          {resourceLinks.map((link, index) => (
            <a
              key={index}
              href={link.href}
              target="_blank"
              rel="noopener noreferrer"
              className={getLinkStyles(link.variant)}
              aria-label={`Visit ${link.label}`}
            >
              {getIcon(link.variant, link.icon)}
              <span className="whitespace-nowrap">{link.label}</span>
            </a>
          ))}
        </nav>
      )}
    </header>
  );
}



================================================
FILE: src/components/layout/index.ts
================================================
export { Header } from "./Header";
export { Footer } from "./Footer";



================================================
FILE: src/components/payment/index.ts
================================================
export { PaymentForm } from "./PaymentForm";
export { PaymentResult } from "./PaymentResult";
export { InfoPanels } from "./InfoPanels";



================================================
FILE: src/components/payment/InfoPanels.tsx
================================================
import {
  ShieldCheckIcon,
  InformationCircleIcon,
  CogIcon,
  CodeBracketIcon,
} from "@heroicons/react/24/outline";

export function InfoPanels() {
  return (
    <aside className="space-y-6" aria-label="Payment information">
      {/* Demo Options Panel */}
      <div className="bg-blue-50 rounded-xl p-6 border border-blue-200">
        <h3 className="font-semibold text-blue-900 mb-3 flex items-center">
          <InformationCircleIcon
            className="w-5 h-5 mr-2 flex-shrink-0"
            aria-hidden="true"
          />
          T√πy ch·ªçn Demo
        </h3>
        <div className="text-blue-800 text-sm space-y-2">
          <p>
            <strong>Chuy·ªÉn ƒë·∫øn VNPay:</strong> Chuy·ªÉn h∆∞·ªõng tr·ª±c ti·∫øp ƒë·∫øn trang
            thanh to√°n VNPay (flow th·ª±c t·∫ø)
          </p>
          <p>
            <strong>T·∫°o URL Demo:</strong> T·∫°o v√† hi·ªÉn th·ªã URL thanh to√°n ƒë·ªÉ
            ki·ªÉm tra ho·∫∑c sao ch√©p
          </p>
        </div>
      </div>

      {/* Security Panel */}
      <div className="bg-green-50 rounded-xl p-6 border border-green-200">
        <h3 className="font-semibold text-green-900 mb-3 flex items-center">
          <ShieldCheckIcon
            className="w-5 h-5 mr-2 flex-shrink-0"
            aria-hidden="true"
          />
          T√≠nh nƒÉng B·∫£o m·∫≠t
        </h3>
        <ul className="text-green-800 text-sm space-y-1 mb-4">
          <li className="flex items-center gap-2">
            <span className="w-1 h-1 bg-green-700 rounded-full flex-shrink-0"></span>
            Server Actions cho x·ª≠ l√Ω server-side
          </li>
          <li className="flex items-center gap-2">
            <span className="w-1 h-1 bg-green-700 rounded-full flex-shrink-0"></span>
            Route Handlers cho API endpoints
          </li>
          <li className="flex items-center gap-2">
            <span className="w-1 h-1 bg-green-700 rounded-full flex-shrink-0"></span>
            IPN (Instant Payment Notification) handler
          </li>
          <li className="flex items-center gap-2">
            <span className="w-1 h-1 bg-green-700 rounded-full flex-shrink-0"></span>
            X√°c th·ª±c ch·ªØ k√Ω s·ªë v√† m√£ h√≥a d·ªØ li·ªáu
          </li>
          <li className="flex items-center gap-2">
            <span className="w-1 h-1 bg-green-700 rounded-full flex-shrink-0"></span>
            Validation form v√† sanitization
          </li>
          <li className="flex items-center gap-2">
            <span className="w-1 h-1 bg-green-700 rounded-full flex-shrink-0"></span>
            HTTPS v√† SSL/TLS encryption
          </li>
        </ul>
        <a
          href="https://github.com/lehuygiang28/vnpay-nextjs-fullstack-example"
          target="_blank"
          rel="noopener noreferrer"
          className="inline-flex items-center gap-2 px-3 py-2 bg-green-700 text-white rounded-lg hover:bg-green-800 transition-colors text-sm font-medium"
        >
          <CodeBracketIcon className="w-4 h-4" aria-hidden="true" />
          Xem m√£ ngu·ªìn
        </a>
      </div>

      {/* Environment Panel */}
      <div className="bg-gray-50 rounded-xl p-6 border border-gray-200">
        <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
          <CogIcon className="w-5 h-5 mr-2 flex-shrink-0" aria-hidden="true" />
          M√¥i tr∆∞·ªùng
        </h3>
        <div className="text-gray-700 text-sm space-y-3">
          <div className="flex items-start gap-2">
            <span className="w-1 h-1 bg-gray-600 rounded-full flex-shrink-0 mt-2"></span>
            <div className="flex-1 min-w-0">
              <span className="font-medium text-gray-900">Sandbox Mode:</span>
              <span className="ml-1 break-words">
                ƒêang s·ª≠ d·ª•ng m√¥i tr∆∞·ªùng test c·ªßa VNPay
              </span>
            </div>
          </div>

          <div className="flex items-start gap-2">
            <span className="w-1 h-1 bg-gray-600 rounded-full flex-shrink-0 mt-2"></span>
            <div className="flex-1 min-w-0">
              <span className="font-medium text-gray-900">Phi√™n b·∫£n:</span>
              <span className="ml-1 break-words">VNPay 2.4.0 + Next.js 15</span>
            </div>
          </div>

          <div className="flex items-start gap-2">
            <span className="w-1 h-1 bg-gray-600 rounded-full flex-shrink-0 mt-2"></span>
            <div className="flex-1 min-w-0">
              <span className="font-medium text-gray-900">C√¥ng ngh·ªá:</span>
              <span className="ml-1 break-words">
                Server Actions, TypeScript, Tailwind CSS
              </span>
            </div>
          </div>
        </div>
      </div>
    </aside>
  );
}



================================================
FILE: src/components/payment/PaymentForm.tsx
================================================
"use client";

import { useState, useEffect } from "react";
import {
  ArrowRightIcon,
  EyeIcon,
  BanknotesIcon,
} from "@heroicons/react/24/outline";
import { Button } from "@/components/ui/Button";
import { Input } from "@/components/ui/Input";
import { Select } from "@/components/ui/Select";
import { Textarea } from "@/components/ui/Textarea";
import { formatNumber } from "@/lib/utils";
import type {
  BankOption,
  ProductCodeOption,
  LocaleOption,
  PaymentResult,
} from "@/types/payment";

interface PaymentFormProps {
  banks: BankOption[];
  productCodeOptions: ProductCodeOption[];
  localeOptions: LocaleOption[];
  onRedirectPayment: (formData: FormData) => Promise<void>;
  onGenerateUrl: (formData: FormData) => Promise<PaymentResult>;
  loading: boolean;
}

interface PaymentFormData {
  amount: string;
  orderInfo: string;
  orderType: string;
  bankCode: string;
  locale: string;
}

export function PaymentForm({
  banks,
  productCodeOptions,
  localeOptions,
  onRedirectPayment,
  onGenerateUrl,
  loading,
}: PaymentFormProps) {
  const [formData, setFormData] = useState<PaymentFormData>({
    amount: "50000",
    orderInfo: "Thanh to√°n ƒë∆°n h√†ng demo - VNPay Next.js Integration",
    orderType: "",
    bankCode: "",
    locale: "",
  });

  const [errors, setErrors] = useState<Partial<PaymentFormData>>({});

  // Initialize default values
  useEffect(() => {
    if (productCodeOptions.length > 0 && localeOptions.length > 0) {
      setFormData((prev) => ({
        ...prev,
        orderType: prev.orderType || productCodeOptions[0]?.value || "",
        locale: prev.locale || localeOptions[0]?.value || "",
      }));
    }
  }, [productCodeOptions, localeOptions]);

  const validateForm = (): boolean => {
    const newErrors: Partial<PaymentFormData> = {};

    if (!formData.amount || parseInt(formData.amount) < 1000) {
      newErrors.amount = "S·ªë ti·ªÅn ph·∫£i t·ªëi thi·ªÉu 1,000 VNƒê";
    }

    if (!formData.orderInfo.trim()) {
      newErrors.orderInfo = "Vui l√≤ng nh·∫≠p n·ªôi dung thanh to√°n";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (field: keyof PaymentFormData, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));

    // Clear error when user starts typing
    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: undefined }));
    }
  };

  const createFormData = (): FormData => {
    const form = new FormData();
    form.append("amount", formData.amount);
    form.append("orderInfo", formData.orderInfo);
    form.append("orderType", formData.orderType);
    form.append("bankCode", formData.bankCode);
    form.append("locale", formData.locale);
    return form;
  };

  const handleRedirectPayment = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    try {
      await onRedirectPayment(createFormData());
    } catch (error) {
      console.error("Payment error:", error);
    }
  };

  const handleGenerateUrl = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    try {
      await onGenerateUrl(createFormData());
    } catch (error) {
      console.error("Generate URL error:", error);
    }
  };

  const bankOptions = [
    { value: "", label: "Ch·ªçn ng√¢n h√†ng (ho·∫∑c ƒë·ªÉ tr·ªëng)" },
    ...banks.map((bank) => ({
      value: bank.bank_code,
      label: bank.bank_name,
    })),
  ];

  return (
    <section className="lg:col-span-2" aria-labelledby="payment-form-heading">
      <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
        <h2
          id="payment-form-heading"
          className="text-2xl font-semibold text-gray-900 mb-6 flex items-center"
        >
          <BanknotesIcon
            className="w-6 h-6 mr-2 text-blue-600"
            aria-hidden="true"
          />
          Th√¥ng tin thanh to√°n
        </h2>

        <form className="space-y-6" noValidate>
          <Input
            type="number"
            label="S·ªë ti·ªÅn (VNƒê)"
            value={formData.amount}
            onChange={(e) => handleInputChange("amount", e.target.value)}
            error={errors.amount}
            helpText={`S·ªë ti·ªÅn hi·ªán t·∫°i: ${formatNumber(
              parseInt(formData.amount || "0")
            )} VNƒê`}
            min="1000"
            step="1000"
            required
            placeholder="Nh·∫≠p s·ªë ti·ªÅn (t·ªëi thi·ªÉu 1,000 VNƒê)"
          />

          <Textarea
            label="N·ªôi dung thanh to√°n"
            value={formData.orderInfo}
            onChange={(e) => handleInputChange("orderInfo", e.target.value)}
            error={errors.orderInfo}
            rows={3}
            required
            placeholder="M√¥ t·∫£ n·ªôi dung thanh to√°n..."
          />

          <Select
            label="Lo·∫°i s·∫£n ph·∫©m"
            value={formData.orderType}
            onChange={(e) => handleInputChange("orderType", e.target.value)}
            options={productCodeOptions.map((option) => ({
              value: option.value,
              label: option.label,
            }))}
          />

          <Select
            label="Ng√¢n h√†ng (t√πy ch·ªçn)"
            value={formData.bankCode}
            onChange={(e) => handleInputChange("bankCode", e.target.value)}
            options={bankOptions}
            helpText="ƒê·ªÉ tr·ªëng ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ ng√¢n h√†ng tr√™n trang VNPay"
          />

          <Select
            label="Ng√¥n ng·ªØ"
            value={formData.locale}
            onChange={(e) => handleInputChange("locale", e.target.value)}
            options={localeOptions.map((option) => ({
              value: option.value,
              label: option.label,
            }))}
          />

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Button
              type="button"
              onClick={handleRedirectPayment}
              loading={loading}
              disabled={loading}
              size="lg"
              className="shadow-md"
            >
              {loading ? (
                "ƒêang x·ª≠ l√Ω..."
              ) : (
                <>
                  Chuy·ªÉn ƒë·∫øn VNPay
                  <ArrowRightIcon className="w-4 h-4" aria-hidden="true" />
                </>
              )}
            </Button>

            <Button
              type="button"
              onClick={handleGenerateUrl}
              loading={loading}
              disabled={loading}
              variant="secondary"
              size="lg"
              className="bg-green-700 hover:bg-green-800 focus-visible:ring-green-500 text-white shadow-md"
            >
              {loading ? (
                "ƒêang t·∫°o..."
              ) : (
                <>
                  T·∫°o URL Demo
                  <EyeIcon className="w-4 h-4" aria-hidden="true" />
                </>
              )}
            </Button>
          </div>
        </form>
      </div>
    </section>
  );
}



================================================
FILE: src/components/payment/PaymentResult.tsx
================================================
"use client";

import { useState } from "react";
import {
  CheckIcon,
  ClipboardDocumentIcon,
  ExclamationCircleIcon,
} from "@heroicons/react/24/outline";
import { Button } from "@/components/ui/Button";
import type { PaymentResult as PaymentResultType } from "@/types/payment";

interface PaymentResultProps {
  result: PaymentResultType | null;
  onClear: () => void;
}

export function PaymentResult({ result, onClear }: PaymentResultProps) {
  const [copied, setCopied] = useState(false);

  if (!result) return null;

  const handleCopyUrl = async () => {
    if (result.paymentUrl) {
      try {
        await navigator.clipboard.writeText(result.paymentUrl);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      } catch (error) {
        console.error("Failed to copy URL:", error);
      }
    }
  };

  return (
    <section
      className="mt-6 bg-gray-50 rounded-xl p-6 border border-gray-200"
      aria-labelledby="payment-result-heading"
    >
      <div className="flex items-center justify-between mb-4">
        <h3
          id="payment-result-heading"
          className="text-lg font-semibold text-gray-900 flex items-center"
        >
          {result.success ? (
            <>
              <CheckIcon
                className="w-5 h-5 text-green-600 mr-2"
                aria-hidden="true"
              />
              URL Thanh to√°n ƒë√£ t·∫°o th√†nh c√¥ng
            </>
          ) : (
            <>
              <ExclamationCircleIcon
                className="w-5 h-5 text-red-600 mr-2"
                aria-hidden="true"
              />
              C√≥ l·ªói x·∫£y ra
            </>
          )}
        </h3>

        <Button
          onClick={onClear}
          variant="ghost"
          size="sm"
          className="text-gray-500 hover:text-gray-700"
        >
          ƒê√≥ng
        </Button>
      </div>

      {result.success && result.paymentUrl && (
        <div className="space-y-4">
          {result.orderId && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                M√£ ƒë∆°n h√†ng:
              </label>
              <code className="block w-full p-3 bg-white border border-gray-300 rounded-lg text-sm font-mono text-gray-900">
                {result.orderId}
              </code>
            </div>
          )}

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL Thanh to√°n:
            </label>
            <div className="flex items-center space-x-2">
              <code className="flex-1 p-3 bg-white border border-gray-300 rounded-lg text-sm font-mono text-gray-900 break-all">
                {result.paymentUrl}
              </code>
              <Button
                onClick={handleCopyUrl}
                variant="secondary"
                size="sm"
                className="flex-shrink-0"
                aria-label="Copy payment URL"
              >
                {copied ? (
                  <>
                    <CheckIcon className="w-4 h-4 mr-1" />
                    ƒê√£ sao ch√©p
                  </>
                ) : (
                  <>
                    <ClipboardDocumentIcon className="w-4 h-4 mr-1" />
                    Sao ch√©p
                  </>
                )}
              </Button>
            </div>
          </div>

          <div className="flex flex-wrap gap-3">
            <Button
              onClick={() => window.open(result.paymentUrl, "_blank")}
              size="sm"
              className="flex-1 sm:flex-none"
            >
              M·ªü trong tab m·ªõi
            </Button>

            <Button
              onClick={() => (window.location.href = result.paymentUrl!)}
              variant="secondary"
              size="sm"
              className="flex-1 sm:flex-none"
            >
              Chuy·ªÉn h∆∞·ªõng ngay
            </Button>
          </div>
        </div>
      )}

      {!result.success && result.error && (
        <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
          <p className="text-red-800 text-sm">{result.error}</p>
        </div>
      )}
    </section>
  );
}



================================================
FILE: src/components/ui/Button.tsx
================================================
import { ButtonHTMLAttributes, forwardRef } from "react";
import { cn } from "@/lib/utils";

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "primary" | "secondary" | "danger" | "ghost";
  size?: "sm" | "md" | "lg";
  loading?: boolean;
  children: React.ReactNode;
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      className,
      variant = "primary",
      size = "md",
      loading = false,
      disabled,
      children,
      ...props
    },
    ref
  ) => {
    const baseStyles =
      "inline-flex items-center justify-center rounded-lg font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 whitespace-nowrap";

    const variants = {
      primary:
        "bg-blue-600 text-white hover:bg-blue-700 focus-visible:ring-blue-500",
      secondary:
        "bg-gray-200 text-gray-900 hover:bg-gray-300 focus-visible:ring-gray-500",
      danger:
        "bg-red-600 text-white hover:bg-red-700 focus-visible:ring-red-500",
      ghost:
        "hover:bg-gray-100 hover:text-gray-900 focus-visible:ring-gray-500",
    };

    const sizes = {
      sm: "h-9 px-3 text-sm gap-1.5",
      md: "h-10 px-4 py-2 text-sm gap-2",
      lg: "h-11 px-8 text-base gap-2",
    };

    return (
      <button
        className={cn(baseStyles, variants[variant], sizes[size], className)}
        ref={ref}
        disabled={disabled || loading}
        {...props}
      >
        {loading && (
          <div
            className="animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent"
            aria-hidden="true"
          />
        )}
        {children}
      </button>
    );
  }
);

Button.displayName = "Button";

export { Button, type ButtonProps };



================================================
FILE: src/components/ui/index.ts
================================================
export { Button, type ButtonProps } from "./Button";
export { Input, type InputProps } from "./Input";
export { Select, type SelectProps } from "./Select";
export { Textarea, type TextareaProps } from "./Textarea";
export { PrintButton } from "./PrintButton";



================================================
FILE: src/components/ui/Input.tsx
================================================
import { InputHTMLAttributes, forwardRef } from "react";
import { cn } from "@/lib/utils";

interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helpText?: string;
}

const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ className, label, error, helpText, id, ...props }, ref) => {
    const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;
    const errorId = error ? `${inputId}-error` : undefined;
    const helpId = helpText ? `${inputId}-help` : undefined;

    return (
      <div className="space-y-2">
        {label && (
          <label
            htmlFor={inputId}
            className="block text-sm font-medium text-gray-800"
          >
            {label}
            {props.required && (
              <span className="text-red-500 ml-1" aria-label="required">
                *
              </span>
            )}
          </label>
        )}
        <input
          ref={ref}
          id={inputId}
          className={cn(
            "w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors text-gray-900 bg-white placeholder-gray-500",
            error && "border-red-500 focus:ring-red-500",
            className
          )}
          aria-describedby={cn(errorId, helpId)}
          aria-invalid={error ? "true" : "false"}
          {...props}
        />
        {error && (
          <p id={errorId} className="text-sm text-red-600" role="alert">
            {error}
          </p>
        )}
        {helpText && !error && (
          <p id={helpId} className="text-xs text-gray-600">
            {helpText}
          </p>
        )}
      </div>
    );
  }
);

Input.displayName = "Input";

export { Input, type InputProps };



================================================
FILE: src/components/ui/PrintButton.tsx
================================================
"use client";

export function PrintButton() {
  const handlePrint = () => {
    if (typeof window !== "undefined") {
      window.print();
    }
  };

  return (
    <button
      onClick={handlePrint}
      className="flex-1 bg-gray-600 text-white text-center py-2 px-4 rounded-md text-sm font-medium hover:bg-gray-700 transition-colors"
    >
      In h√≥a ƒë∆°n
    </button>
  );
}



================================================
FILE: src/components/ui/Select.tsx
================================================
import { SelectHTMLAttributes, forwardRef } from "react";
import { cn } from "@/lib/utils";

interface SelectOption {
  value: string;
  label: string;
  disabled?: boolean;
}

interface SelectProps extends SelectHTMLAttributes<HTMLSelectElement> {
  label?: string;
  error?: string;
  helpText?: string;
  options: SelectOption[];
  placeholder?: string;
}

const Select = forwardRef<HTMLSelectElement, SelectProps>(
  (
    { className, label, error, helpText, options, placeholder, id, ...props },
    ref
  ) => {
    const selectId = id || `select-${Math.random().toString(36).substr(2, 9)}`;
    const errorId = error ? `${selectId}-error` : undefined;
    const helpId = helpText ? `${selectId}-help` : undefined;

    return (
      <div className="space-y-2">
        {label && (
          <label
            htmlFor={selectId}
            className="block text-sm font-medium text-gray-800"
          >
            {label}
            {props.required && (
              <span className="text-red-500 ml-1" aria-label="required">
                *
              </span>
            )}
          </label>
        )}
        <select
          ref={ref}
          id={selectId}
          className={cn(
            "w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors text-gray-900 bg-white",
            error && "border-red-500 focus:ring-red-500",
            className
          )}
          aria-describedby={cn(errorId, helpId)}
          aria-invalid={error ? "true" : "false"}
          {...props}
        >
          {placeholder && (
            <option value="" disabled>
              {placeholder}
            </option>
          )}
          {options.map((option) => (
            <option
              key={option.value}
              value={option.value}
              disabled={option.disabled}
            >
              {option.label}
            </option>
          ))}
        </select>
        {error && (
          <p id={errorId} className="text-sm text-red-600" role="alert">
            {error}
          </p>
        )}
        {helpText && !error && (
          <p id={helpId} className="text-xs text-gray-600">
            {helpText}
          </p>
        )}
      </div>
    );
  }
);

Select.displayName = "Select";

export { Select, type SelectProps, type SelectOption };



================================================
FILE: src/components/ui/Textarea.tsx
================================================
import { TextareaHTMLAttributes, forwardRef } from "react";
import { cn } from "@/lib/utils";

interface TextareaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {
  label?: string;
  error?: string;
  helpText?: string;
}

const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, label, error, helpText, id, ...props }, ref) => {
    const textareaId =
      id || `textarea-${Math.random().toString(36).substr(2, 9)}`;
    const errorId = error ? `${textareaId}-error` : undefined;
    const helpId = helpText ? `${textareaId}-help` : undefined;

    return (
      <div className="space-y-2">
        {label && (
          <label
            htmlFor={textareaId}
            className="block text-sm font-medium text-gray-800"
          >
            {label}
            {props.required && (
              <span className="text-red-500 ml-1" aria-label="required">
                *
              </span>
            )}
          </label>
        )}
        <textarea
          ref={ref}
          id={textareaId}
          className={cn(
            "w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors text-gray-900 bg-white placeholder-gray-500 resize-vertical",
            error && "border-red-500 focus:ring-red-500",
            className
          )}
          aria-describedby={cn(errorId, helpId)}
          aria-invalid={error ? "true" : "false"}
          {...props}
        />
        {error && (
          <p id={errorId} className="text-sm text-red-600" role="alert">
            {error}
          </p>
        )}
        {helpText && !error && (
          <p id={helpId} className="text-xs text-gray-600">
            {helpText}
          </p>
        )}
      </div>
    );
  }
);

Textarea.displayName = "Textarea";

export { Textarea, type TextareaProps };



================================================
FILE: src/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatCurrency(amount: number, currency = "VND"): string {
  return new Intl.NumberFormat("vi-VN", {
    style: "currency",
    currency,
    minimumFractionDigits: 0,
  }).format(amount);
}

export function formatNumber(value: number): string {
  return value.toLocaleString("vi-VN");
}



================================================
FILE: src/lib/vnpay.ts
================================================
import { VNPay, HashAlgorithm } from "vnpay";

// VNPay configuration with fallback values for demo
const vnpayConfig = {
  tmnCode: process.env.VNPAY_TMN_CODE || "DEMO",
  secureSecret: process.env.VNPAY_SECURE_SECRET || "DEMOSECRET",
  vnpayHost: process.env.VNPAY_HOST || "https://sandbox.vnpayment.vn",
  testMode: process.env.VNPAY_TEST_MODE === "true" || true,
  returnUrl:
    process.env.VNPAY_RETURN_URL || "http://localhost:3000/payment/return",
};

// Initialize VNPay instance
export const vnpay = new VNPay({
  tmnCode: vnpayConfig.tmnCode,
  secureSecret: vnpayConfig.secureSecret,
  vnpayHost: vnpayConfig.vnpayHost,
  testMode: vnpayConfig.testMode,
  hashAlgorithm: HashAlgorithm.SHA512,
  enableLog: true,
});

// Export configuration for server-side use only
export { vnpayConfig };

// Utility functions for server-side use
export const getClientIP = (headers: Headers): string => {
  const forwardedFor = headers.get("x-forwarded-for");
  const realIP = headers.get("x-real-ip");
  const clientIP = headers.get("x-client-ip");

  if (forwardedFor) {
    return forwardedFor.split(",")[0].trim();
  }

  return realIP || clientIP || "127.0.0.1";
};

export const formatAmount = (amount: number): number => {
  // VNPay expects amount in VND (smallest unit)
  // The vnpay library handles the multiplication by 100 automatically
  // This is placeholder, if your app need to format amount, you can do it here.
  return amount;
};

export const generateOrderId = (): string => {
  return `ORDER_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};



================================================
FILE: src/types/payment.ts
================================================
export interface BankOption {
  bank_code: string;
  bank_name: string;
}

export interface ProductCodeOption {
  value: string;
  label: string;
}

export interface LocaleOption {
  value: string;
  label: string;
}

export interface PaymentResult {
  success: boolean;
  paymentUrl?: string;
  orderId?: string;
  error?: string;
}


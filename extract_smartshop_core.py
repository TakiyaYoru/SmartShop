#!/usr/bin/env python3
"""
SmartShop Core Code Extractor - UPDATED VERSION
Extract c√°c file quan tr·ªçng nh·∫•t t·ª´ SmartShop project
"""

import os
from pathlib import Path

# Danh s√°ch c√°c file quan tr·ªçng c·∫ßn extract - UPDATED
IMPORTANT_FILES = [
    # Backend - Core files
    "server/package.json",
    "server/index.js",
    "server/config.js",
    "server/config/firebase.js",
    "server/permissions.js",
    "server/check-db.js",
    "server/migrate-mongo-config.js",
    "server/jest.config.json",
    
    # Backend - VNPay Integration (NEW)
    "server/services/vnpayService.js",
    "server/routes/vnpayRoutes.js",
    "server/test-vnpay-new.js",
    
    # Backend - GraphQL
    "server/graphql/schema.js",
    "server/graphql/hello.js",
    "server/graphql/authentication.js",
    "server/graphql/products.js",
    "server/graphql/categories.js",
    "server/graphql/brands.js",
    "server/graphql/carts.js",
    "server/graphql/orders.js",
    "server/graphql/upload.js",
    "server/graphql/upload_old.js",
    
    # Backend - Models
    "server/data/models/index.js",
    "server/data/models/user.js",
    "server/data/models/product.js",
    "server/data/models/category.js",
    "server/data/models/brand.js",
    "server/data/models/cart.js",
    "server/data/models/order.js",
    "server/data/models/orderItem.js",
    
    # Backend - Data layer
    "server/data/mongoRepo.js",
    "server/data/mockRepo.js",
    "server/data/init.js",
    
    # Backend - Utils & Services
    "server/utils/otpUtils.js",
    "server/utils/passwordReset.js",
    "server/utils/imageHelper.js",
    "server/services/emailService.js",
    "server/services/firebaseStorageService.js",
    
    # Backend - Migrations
    "server/migrations/20250601031152-initial_smartshop_data.js",
    "server/migrations/20250601032421-add_sample_images.js",
    
    # Backend - Tests
    "server/data/__tests__/categories.test.js",
    "server/data/__tests__/products.test.js",
    "server/test/globalSetup.js",
    "server/test/globalTeardown.js",
    "server/test/setupFileAfterEnv.js",
    "server/test-firebase.js",
    
    # Frontend - Core files
    "webfrontend/package.json",
    "webfrontend/vite.config.js",
    "webfrontend/tailwind.config.js",
    "webfrontend/postcss.config.js",
    "webfrontend/eslint.config.js",
    "webfrontend/index.html",
    "webfrontend/.gitignore",
    
    # Frontend - Main app
    "webfrontend/src/main.jsx",
    "webfrontend/src/App.jsx",
    "webfrontend/src/router.jsx",
    
    # Frontend - Contexts & Hooks
    "webfrontend/src/contexts/AuthContext.jsx",
    "webfrontend/src/contexts/CartContext.jsx",
    "webfrontend/src/hooks/useAuth.js",
    "webfrontend/src/hooks/useProducts.js",
    "webfrontend/src/hooks/useUpload.js",
    
    # Frontend - Apollo & GraphQL
    "webfrontend/src/lib/apollo.js",
    "webfrontend/src/graphql/auth.js",
    "webfrontend/src/graphql/products.js",
    "webfrontend/src/graphql/categories.js",
    "webfrontend/src/graphql/brands.js",
    "webfrontend/src/graphql/cart.js",
    "webfrontend/src/graphql/orders.js",
    "webfrontend/src/graphql/upload.js",
    "webfrontend/src/graphql/admin.js",
    "webfrontend/src/graphql/vnpay.js",
    
    # Frontend - Common Components
    "webfrontend/src/components/common/Layout.jsx",
    "webfrontend/src/components/common/Header.jsx",
    "webfrontend/src/components/common/Sidebar.jsx",
    "webfrontend/src/components/common/Footer.jsx",
    "webfrontend/src/components/common/LoadingSkeleton.jsx",
    
    # Frontend - Auth Components
    "webfrontend/src/components/auth/LoginForm.jsx",
    "webfrontend/src/components/auth/RegisterForm.jsx",
    "webfrontend/src/components/auth/ProtectedRoute.jsx",
    
    # Frontend - Product Components
    "webfrontend/src/components/products/ProductCard.jsx",
    "webfrontend/src/components/products/ProductList.jsx",
    "webfrontend/src/components/products/ProductFilter.jsx",
    "webfrontend/src/components/products/ProductSearch.jsx",
    
    # Frontend - Cart Components
    "webfrontend/src/components/cart/CartIcon.jsx",
    "webfrontend/src/components/cart/CartItem.jsx",
    "webfrontend/src/components/cart/CartSummary.jsx",
    "webfrontend/src/components/cart/AddToCartButton.jsx",
    
    # Frontend - Admin Components
    "webfrontend/src/components/admin/AdminLayout.jsx",
    
    # Frontend - Pages
    "webfrontend/src/pages/HomePage.jsx",
    "webfrontend/src/pages/LoginPage.jsx",
    "webfrontend/src/pages/RegisterPage.jsx",
    "webfrontend/src/pages/ForgotPasswordPage.jsx",
    "webfrontend/src/pages/ProductsPage.jsx",
    "webfrontend/src/pages/ProductDetailPage.jsx",
    "webfrontend/src/pages/CategoriesPage.jsx",
    "webfrontend/src/pages/BrandsPage.jsx",
    "webfrontend/src/pages/CartPage.jsx",
    "webfrontend/src/pages/CheckoutPage.jsx",
    "webfrontend/src/pages/OrdersPage.jsx",
    "webfrontend/src/pages/OrderDetailPage.jsx",
    "webfrontend/src/pages/OrderSuccessPage.jsx",
    "webfrontend/src/pages/VnpayReturnPage.jsx",
    "webfrontend/src/pages/NotFoundPage.jsx",
    
    # Frontend - Admin Pages
    "webfrontend/src/pages/admin/DashboardPage.jsx",
    "webfrontend/src/pages/admin/AdminProductsPage.jsx",
    "webfrontend/src/pages/admin/CreateProductPage.jsx",
    "webfrontend/src/pages/admin/EditProductPage.jsx",
    "webfrontend/src/pages/admin/AdminOrderDetailPage.jsx",
    "webfrontend/src/pages/admin/CreateOrderPage.jsx",
    "webfrontend/src/pages/admin/AdminOrdersPage.jsx",
    
    # Frontend - Admin Components
    "webfrontend/src/pages/admin/products/ProductTable.jsx",
    "webfrontend/src/pages/admin/products/ProductForm.jsx",
    "webfrontend/src/pages/admin/products/ProductFilter.jsx",
    "webfrontend/src/pages/admin/products/AdminProductFilter.jsx",
    "webfrontend/src/pages/admin/products/ImageUpload.jsx",
    
    # Frontend - Styles
    "webfrontend/src/index.css",
    "webfrontend/src/App.css",
    
    # Frontend - Utils
    "webfrontend/src/lib/utils.js",
    "webfrontend/src/utils/imageHelper.js",
    
    # Documentation
    "README.md",
]

def get_file_content(file_path):
    """ƒê·ªçc n·ªôi dung file"""
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            return f.read()
    except Exception as e:
        return f"[ERROR READING FILE: {str(e)}]"

def format_file_section(file_path, content):
    """Format section cho m·ªôt file"""
    section = f"\n{'='*100}\n"
    section += f"FILE: {file_path}\n"
    section += f"{'='*100}\n\n"
    section += content
    section += f"\n{'='*100}\n"
    section += f"END OF FILE: {file_path}\n"
    section += f"{'='*100}\n\n"
    return section

def extract_smartshop_core():
    """Extract core files c·ªßa SmartShop"""
    
    print("üöÄ SmartShop Core Code Extractor - UPDATED VERSION")
    print("="*60)
    
    output_file = "smartshop_core_code_complete.txt"
    
    # T·∫°o header
    header = f"""
{'='*100}
SMARTSHOP CORE CODE EXTRACTION - COMPLETE VERSION
{'='*100}
Generated on: {os.popen('date').read().strip()}
Project: SmartShop E-commerce System
Description: Complete core files for backend (Node.js/GraphQL) and frontend (React/Vite)

{'='*100}
PROJECT OVERVIEW
{'='*100}
Backend: Node.js + Express + GraphQL + MongoDB
Frontend: React 18 + Vite + Tailwind CSS + Apollo Client
Authentication: JWT + bcrypt + OTP reset password
File Upload: GraphQL Upload with multiple images
Authorization: Role-based (admin/manager/customer)
Email Service: Nodemailer for password reset
Payment Gateway: VNPay integration with IPN and return URL handling
Testing: Jest + MongoDB Memory Server

{'='*100}
CORE FILES LIST - UPDATED
{'='*100}
"""
    
    # Th√™m danh s√°ch files v√†o header
    for i, file_path in enumerate(IMPORTANT_FILES, 1):
        header += f"{i:2d}. {file_path}\n"
    
    header += f"\n{'='*100}\n"
    header += f"TOTAL CORE FILES: {len(IMPORTANT_FILES)}\n"
    header += f"{'='*100}\n\n"
    
    # Ghi header
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(header)
    
    # Process t·ª´ng file
    processed_files = 0
    missing_files = []
    
    for file_path in IMPORTANT_FILES:
        if os.path.exists(file_path):
            print(f"‚úÖ Processing: {file_path}")
            
            content = get_file_content(file_path)
            if not content.startswith('[ERROR'):
                section = format_file_section(file_path, content)
                
                with open(output_file, 'a', encoding='utf-8') as f:
                    f.write(section)
                
                processed_files += 1
            else:
                print(f"  ‚ùå Error: {content}")
                missing_files.append(file_path)
        else:
            print(f"‚ùå Missing: {file_path}")
            missing_files.append(file_path)
    
    # Th√™m footer
    footer = f"""
{'='*100}
EXTRACTION SUMMARY - COMPLETE VERSION
{'='*100}
Total core files: {len(IMPORTANT_FILES)}
Successfully processed: {processed_files}
Missing files: {len(missing_files)}
Output file: {os.path.abspath(output_file)}

{'='*100}
MISSING FILES
{'='*100}
"""
    
    if missing_files:
        for file_path in missing_files:
            footer += f"- {file_path}\n"
    else:
        footer += "None - All files processed successfully!\n"
    
    footer += f"\n{'='*100}\n"
    footer += "SMARTSHOP PROJECT STRUCTURE - COMPLETE\n"
    footer += f"{'='*100}\n"
    footer += """
SmartShop/
‚îú‚îÄ‚îÄ server/                 # Backend Node.js/GraphQL
‚îÇ   ‚îú‚îÄ‚îÄ index.js           # Main server entry
‚îÇ   ‚îú‚îÄ‚îÄ config.js          # Database configuration
‚îÇ   ‚îú‚îÄ‚îÄ permissions.js     # Authorization middleware
‚îÇ   ‚îú‚îÄ‚îÄ check-db.js        # Database connection check
‚îÇ   ‚îú‚îÄ‚îÄ migrate-mongo-config.js # Migration config
‚îÇ   ‚îú‚îÄ‚îÄ jest.config.json   # Test configuration
‚îÇ   ‚îú‚îÄ‚îÄ graphql/           # GraphQL schema & resolvers
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ schema.js      # Main schema
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hello.js       # Hello resolver
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authentication.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ products.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ categories.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ brands.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ carts.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ orders.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ upload.js
‚îÇ   ‚îú‚îÄ‚îÄ data/              # Data layer
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ models/        # Mongoose models
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ product.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ category.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ brand.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cart.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ order.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ orderItem.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ mongoRepo.js   # Repository pattern
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ mockRepo.js    # Mock repository for tests
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ init.js        # Database initialization
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ __tests__/     # Data layer tests
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ categories.test.js
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ products.test.js
‚îÇ   ‚îú‚îÄ‚îÄ utils/             # Utility functions
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ otpUtils.js    # OTP generation & validation
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ passwordReset.js # Password reset utilities
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ imageHelper.js # Image processing utilities
‚îÇ   ‚îú‚îÄ‚îÄ services/          # External services
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ emailService.js # Email service for password reset
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ vnpayService.js # VNPay payment gateway service
‚îÇ   ‚îú‚îÄ‚îÄ routes/            # Express routes
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ vnpayRoutes.js # VNPay payment routes
‚îÇ   ‚îú‚îÄ‚îÄ migrations/        # Database migrations
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ 20250601031152-initial_smartshop_data.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ 20250601032421-add_sample_images.js
‚îÇ   ‚îú‚îÄ‚îÄ test/              # Test setup files
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ globalSetup.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ globalTeardown.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ setupFileAfterEnv.js
‚îÇ   ‚îú‚îÄ‚îÄ test-vnpay-new.js  # VNPay integration test
‚îÇ   ‚îî‚îÄ‚îÄ img/               # Uploaded images
‚îú‚îÄ‚îÄ webfrontend/           # Frontend React/Vite
‚îÇ   ‚îú‚îÄ‚îÄ index.html         # Main HTML file
‚îÇ   ‚îú‚îÄ‚îÄ package.json       # Frontend dependencies
‚îÇ   ‚îú‚îÄ‚îÄ vite.config.js     # Vite configuration
‚îÇ   ‚îú‚îÄ‚îÄ tailwind.config.js # Tailwind CSS config
‚îÇ   ‚îú‚îÄ‚îÄ postcss.config.js  # PostCSS config
‚îÇ   ‚îú‚îÄ‚îÄ eslint.config.js   # ESLint configuration
‚îÇ   ‚îî‚îÄ‚îÄ src/
‚îÇ       ‚îú‚îÄ‚îÄ main.jsx       # App entry point
‚îÇ       ‚îú‚îÄ‚îÄ App.jsx        # Main app component
‚îÇ       ‚îú‚îÄ‚îÄ router.jsx     # React Router setup
‚îÇ       ‚îú‚îÄ‚îÄ index.css      # Global styles
‚îÇ       ‚îú‚îÄ‚îÄ App.css        # App-specific styles
‚îÇ       ‚îú‚îÄ‚îÄ contexts/      # React contexts
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ AuthContext.jsx
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ CartContext.jsx
‚îÇ       ‚îú‚îÄ‚îÄ hooks/         # Custom hooks
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ useAuth.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ useProducts.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ useUpload.js
‚îÇ       ‚îú‚îÄ‚îÄ components/    # Reusable components
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ common/    # Common components
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Layout.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Sidebar.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Footer.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ LoadingSkeleton.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ auth/      # Authentication components
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginForm.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RegisterForm.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ProtectedRoute.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ products/  # Product components
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductCard.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductList.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductFilter.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ProductSearch.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ cart/      # Cart components
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CartIcon.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CartItem.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CartSummary.jsx
‚îÇ       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ AddToCartButton.jsx
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ admin/     # Admin components
‚îÇ       ‚îÇ       ‚îî‚îÄ‚îÄ AdminLayout.jsx
‚îÇ       ‚îú‚îÄ‚îÄ pages/         # Page components
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ HomePage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ LoginPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ RegisterPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ForgotPasswordPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ProductsPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ProductDetailPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ CategoriesPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ BrandsPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ CartPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ CheckoutPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ OrdersPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ OrderDetailPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ OrderSuccessPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ VnpayReturnPage.jsx
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ NotFoundPage.jsx
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ admin/     # Admin pages
‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ DashboardPage.jsx
‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ AdminProductsPage.jsx
‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ CreateProductPage.jsx
‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ EditProductPage.jsx
‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ AdminOrderDetailPage.jsx
‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ CreateOrderPage.jsx
‚îÇ       ‚îÇ       ‚îî‚îÄ‚îÄ AdminOrdersPage.jsx
‚îÇ       ‚îÇ           ‚îú‚îÄ‚îÄ ProductTable.jsx
‚îÇ       ‚îÇ           ‚îú‚îÄ‚îÄ ProductForm.jsx
‚îÇ       ‚îÇ           ‚îú‚îÄ‚îÄ ProductFilter.jsx
‚îÇ       ‚îÇ           ‚îú‚îÄ‚îÄ AdminProductFilter.jsx
‚îÇ       ‚îÇ           ‚îî‚îÄ‚îÄ ImageUpload.jsx
‚îÇ       ‚îú‚îÄ‚îÄ graphql/       # GraphQL queries/mutations
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ products.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ categories.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ brands.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ cart.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ orders.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ upload.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ admin.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ vnpay.js
‚îÇ       ‚îî‚îÄ‚îÄ lib/           # Utilities
‚îÇ           ‚îú‚îÄ‚îÄ apollo.js
‚îÇ           ‚îî‚îÄ‚îÄ utils.js
‚îî‚îÄ‚îÄ README.md
"""
    
    footer += f"\n{'='*100}\n"
    footer += "EXTRACTION COMPLETED - COMPLETE VERSION\n"
    footer += f"{'='*100}\n"
    
    with open(output_file, 'a', encoding='utf-8') as f:
        f.write(footer)
    
    print(f"\n‚úÖ Extraction completed!")
    print(f"üìÅ Total core files: {len(IMPORTANT_FILES)}")
    print(f"‚úÖ Successfully processed: {processed_files}")
    print(f"‚ùå Missing files: {len(missing_files)}")
    print(f"üìÑ Output file: {os.path.abspath(output_file)}")
    
    if missing_files:
        print(f"\n‚ö†Ô∏è  Missing files:")
        for file_path in missing_files:
            print(f"   - {file_path}")

if __name__ == "__main__":
    extract_smartshop_core() 
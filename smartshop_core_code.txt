
====================================================================================================
SMARTSHOP CORE CODE EXTRACTION
====================================================================================================
Generated on: Fri Jun 27 15:57:23 UTC 2025
Project: SmartShop E-commerce System
Description: Core files for backend (Node.js/GraphQL) and frontend (React/Vite)

====================================================================================================
PROJECT OVERVIEW
====================================================================================================
Backend: Node.js + Express + GraphQL + MongoDB
Frontend: React 18 + Vite + Tailwind CSS + Apollo Client
Authentication: JWT + bcrypt
File Upload: GraphQL Upload
Authorization: Role-based (admin/manager/customer)

====================================================================================================
CORE FILES LIST
====================================================================================================
 1. server/package.json
 2. server/index.js
 3. server/config.js
 4. server/permissions.js
 5. server/graphql/schema.js
 6. server/graphql/authentication.js
 7. server/graphql/products.js
 8. server/graphql/categories.js
 9. server/graphql/brands.js
10. server/graphql/carts.js
11. server/graphql/orders.js
12. server/graphql/upload.js
13. server/data/models/index.js
14. server/data/models/user.js
15. server/data/models/product.js
16. server/data/models/category.js
17. server/data/models/brand.js
18. server/data/models/cart.js
19. server/data/models/order.js
20. server/data/models/orderItem.js
21. server/data/mongoRepo.js
22. server/data/init.js
23. webfrontend/package.json
24. webfrontend/vite.config.js
25. webfrontend/tailwind.config.js
26. webfrontend/src/main.jsx
27. webfrontend/src/App.jsx
28. webfrontend/src/router.jsx
29. webfrontend/src/contexts/AuthContext.jsx
30. webfrontend/src/hooks/useAuth.js
31. webfrontend/src/hooks/useProducts.js
32. webfrontend/src/hooks/useUpload.js
33. webfrontend/src/lib/apollo.js
34. webfrontend/src/graphql/auth.js
35. webfrontend/src/graphql/products.js
36. webfrontend/src/graphql/categories.js
37. webfrontend/src/graphql/brands.js
38. webfrontend/src/graphql/upload.js
39. webfrontend/src/graphql/admin.js
40. webfrontend/src/components/common/Layout.jsx
41. webfrontend/src/components/common/Header.jsx
42. webfrontend/src/components/common/Sidebar.jsx
43. webfrontend/src/components/common/Footer.jsx
44. webfrontend/src/components/auth/LoginForm.jsx
45. webfrontend/src/components/auth/RegisterForm.jsx
46. webfrontend/src/components/auth/ProtectedRoute.jsx
47. webfrontend/src/components/products/ProductCard.jsx
48. webfrontend/src/components/products/ProductList.jsx
49. webfrontend/src/components/products/ProductFilter.jsx
50. webfrontend/src/components/products/ProductSearch.jsx
51. webfrontend/src/components/admin/AdminLayout.jsx
52. webfrontend/src/pages/HomePage.jsx
53. webfrontend/src/pages/LoginPage.jsx
54. webfrontend/src/pages/RegisterPage.jsx
55. webfrontend/src/pages/ProductsPage.jsx
56. webfrontend/src/pages/ProductDetailPage.jsx
57. webfrontend/src/pages/CategoriesPage.jsx
58. webfrontend/src/pages/BrandsPage.jsx
59. webfrontend/src/pages/CartPage.jsx
60. webfrontend/src/pages/NotFoundPage.jsx
61. webfrontend/src/pages/admin/DashboardPage.jsx
62. webfrontend/src/pages/admin/AdminProductsPage.jsx
63. webfrontend/src/pages/admin/CreateProductPage.jsx
64. webfrontend/src/pages/admin/EditProductPage.jsx
65. webfrontend/src/pages/admin/products/ProductTable.jsx
66. webfrontend/src/pages/admin/products/ProductForm.jsx
67. webfrontend/src/pages/admin/products/ProductFilter.jsx
68. webfrontend/src/pages/admin/products/AdminProductFilter.jsx
69. webfrontend/src/pages/admin/products/ImageUpload.jsx
70. webfrontend/src/index.css
71. webfrontend/src/App.css
72. webfrontend/src/lib/utils.js


====================================================================================================
TOTAL CORE FILES: 72
====================================================================================================


====================================================================================================
FILE: server/package.json
====================================================================================================

{
  "name": "smartshop-server",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "start": "node index.js",
    "dev": "node --watch index.js",
    "test": "NODE_OPTIONS=--experimental-vm-modules jest"
  },
  "dependencies": {
    "@envelop/graphql-middleware": "^7.1.3",
    "bcrypt": "^6.0.0",
    "dotenv": "^16.5.0",
    "express": "^5.1.0",
    "graphql": "^16.8.1",
    "graphql-upload-minimal": "^1.6.1",
    "graphql-yoga": "^5.1.1",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "mongoose": "^8.15.1",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "mongodb-memory-server": "^10.1.4"
  }
}

====================================================================================================
END OF FILE: server/package.json
====================================================================================================


====================================================================================================
FILE: server/index.js
====================================================================================================

import { createYoga } from "graphql-yoga";
import { schema } from "./graphql/schema.js";
import { useGraphQLMiddleware } from "@envelop/graphql-middleware";
import { permissions } from "./permissions.js";
import { db } from "./config.js";
import express from "express";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";
import fs from "fs";
import dotenv from "dotenv";
import jwt from "jsonwebtoken";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load environment variables
dotenv.config();

import { initDatabase } from "./data/init.js";

// Initialize database connection
await initDatabase();

const signingKey = process.env.JWT_SECRET;

const yoga = createYoga({ 
  schema,
  graphqlEndpoint: "/",
  plugins: [useGraphQLMiddleware([permissions])],
  context: async ({ request }) => {
    const authorization = request.headers.get("authorization") || "";
    let user = null;

    if (authorization.startsWith("Bearer ")) {
      const token = authorization.substring(7, authorization.length);
      
      try {
        const decoded = jwt.verify(token, signingKey);
        user = decoded;
      } catch (error) {
        console.log("JWT verification failed:", error.message);
      }
    }

    return {
      db: db,
      user: user,
      secret: request.headers.get("secret"),
    };
  },
});

// Tạo Express app
const app = express();

// CORS middleware
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// Serving static images - theo document
app.get("/img/:filename", (req, res) => {
  const filename = req.params.filename;
  const pathDir = path.join(__dirname, "/img/" + filename);
  
  // Kiểm tra file có tồn tại không
  if (!fs.existsSync(pathDir)) {
    return res.status(404).send("File not found");
  }
  
  res.sendFile(pathDir);
});

// GraphQL endpoint
app.use(yoga.graphqlEndpoint, yoga);

const PORT = process.env.PORT || 4000;

// Tạo thư mục img nếu chưa có
const imgDir = path.join(__dirname, "img");
if (!fs.existsSync(imgDir)) {
  console.log('Creating img directory...');
  fs.mkdirSync(imgDir, { recursive: true });
}

app.listen(PORT, () => {
  console.info(`Server is running on http://localhost:${PORT}`);
});
====================================================================================================
END OF FILE: server/index.js
====================================================================================================


====================================================================================================
FILE: server/config.js
====================================================================================================

const source = "mock"; // "test" / "mongodb"

import { db } from './data/mongoRepo.js';

export { db };
====================================================================================================
END OF FILE: server/config.js
====================================================================================================


====================================================================================================
FILE: server/permissions.js
====================================================================================================

import { GraphQLError } from "graphql";

const hasValidSecret = async (next, parent, args, ctx, info) => {
  const secret = ctx.secret;
  if (!secret || secret.length < 8) {
    throw new GraphQLError(`Access denied! Premium secret required for SmartShop VIP features.`);
  }
  return next();
};

const isAuthenticated = async (next, parent, args, ctx, info) => {
  if (!ctx.user) {
    throw new GraphQLError("Authentication required. Please login first.");
  }
  return next();
};

const isAdmin = async (next, parent, args, ctx, info) => {
  if (!ctx.user) {
    throw new GraphQLError("Authentication required.");
  }
  
  if (ctx.user.role !== "admin") {
    throw new GraphQLError("Admin access required.");
  }
  
  return next();
};

const isAdminOrManager = async (next, parent, args, ctx, info) => {
  if (!ctx.user) {
    throw new GraphQLError("Authentication required.");
  }
  
  if (ctx.user.role !== "admin" && ctx.user.role !== "manager") {
    throw new GraphQLError("Admin or Manager access required.");
  }
  
  return next();
};

export const permissions = {
  Query: {
    // Cart queries require authentication
    getCart: isAuthenticated,
    getCartItemCount: isAuthenticated,
    
    // Customer order queries
    getMyOrders: isAuthenticated,
    getMyOrder: isAuthenticated,
    
    // Admin order queries
    getAllOrders: isAdminOrManager,
    getOrder: isAdminOrManager,
    getOrderStats: isAdminOrManager,
  },
  
  Mutation: {
    // Category operations - Admin only
    createCategory: isAdmin,
    updateCategory: isAdmin,
    deleteCategory: isAdmin,
    
    // Brand operations - Admin only
    createBrand: isAdmin,
    updateBrand: isAdmin,
    deleteBrand: isAdmin,
    
    // Product operations - Admin or Manager
    createProduct: isAdminOrManager,
    updateProduct: isAdminOrManager,
    deleteProduct: isAdmin,
    
    // Upload operations - Admin or Manager
    upload: isAdminOrManager,
    uploadProductImage: isAdminOrManager,
    uploadProductImages: isAdminOrManager,
    removeProductImage: isAdminOrManager,
    
    // Cart operations - Customer access required
    addToCart: isAuthenticated,
    updateCartItem: isAuthenticated,
    removeFromCart: isAuthenticated,
    clearCart: isAuthenticated,
    
    // Order operations
    createOrderFromCart: isAuthenticated, // Customer can create orders
    updateOrderStatus: isAdminOrManager,  // Admin/Manager can update status
    updatePaymentStatus: isAdminOrManager, // Admin/Manager can update payment
    cancelOrder: isAdminOrManager,        // Admin/Manager can cancel orders
  },
};
====================================================================================================
END OF FILE: server/permissions.js
====================================================================================================


====================================================================================================
FILE: server/graphql/schema.js
====================================================================================================

import { createSchema } from "graphql-yoga";
import _ from "lodash";
import { typeDef as hello, resolvers as helloResolvers } from "./hello.js";
import { typeDef as categories, resolvers as categoriesResolvers } from "./categories.js";
import { typeDef as products, resolvers as productsResolvers } from "./products.js";
import { typeDef as brands, resolvers as brandsResolvers } from "./brands.js";
import { typeDef as authentication, resolvers as authenticationResolvers } from "./authentication.js";
import { typeDef as upload, resolvers as uploadResolvers } from "./upload.js";
import { typeDef as carts, resolvers as cartsResolvers } from "./carts.js";
import { typeDef as orders, resolvers as ordersResolvers } from "./orders.js";

const query = `
  type Query {
    _empty: String
  }
  
  type Mutation {
    _emptyAction: String
  }
`;

const typeDefs = [query, hello,  categories, products, brands, authentication, upload, carts, orders];
const resolvers = _.merge(
  helloResolvers, 
  categoriesResolvers,
  productsResolvers,
  brandsResolvers,
  authenticationResolvers,
  uploadResolvers,
  cartsResolvers,
  ordersResolvers 
);

export const schema = createSchema({
  typeDefs: typeDefs,
  resolvers: resolvers,
});
====================================================================================================
END OF FILE: server/graphql/schema.js
====================================================================================================


====================================================================================================
FILE: server/graphql/authentication.js
====================================================================================================

import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

export const typeDef = `
  type LoginResult {
    jwt: String!
    user: UserInfo!
  }

  type UserInfo {
    _id: ID!
    username: String!
    email: String!
    firstName: String
    lastName: String
    role: String!
  }

  type LoginResponse {
    success: Boolean!
    message: String!
    data: LoginResult
  }

  type RegisterResponse {
    success: Boolean!
    message: String!
    data: UserInfo
  }

  input LoginInput {
    username: String!
    password: String!
  }

  input RegisterInput {
    username: String!
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    phone: String
  }

  extend type Mutation {
    login(input: LoginInput!): LoginResponse
    register(input: RegisterInput!): RegisterResponse
  }

  extend type Query {
    me: UserInfo
  }
`;

export const resolvers = {
  Query: {
    me: async (parent, args, context, info) => {
      if (!context.user) {
        throw new GraphQLError("Authentication required");
      }
      
      const user = await context.db.users.findById(context.user.id);
      if (!user) {
        throw new GraphQLError("User not found");
      }
      
      return {
        _id: user._id,
        username: user.username,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
      };
    },
  },

  Mutation: {
    login: async (parent, args, context, info) => {
      const { username, password } = args.input;
      
      if (!username || username.length === 0 || !password || password.length === 0) {
        return {
          success: false,
          message: "Username and password are required",
        };
      }

      const user = await context.db.users.findOne(username);
      if (!user) {
        return {
          success: false,
          message: "Invalid username or password",
        };
      }

      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        return {
          success: false,
          message: "Invalid username or password",
        };
      }

      if (!user.isActive) {
        return {
          success: false,
          message: "Account is deactivated. Please contact support.",
        };
      }

      const token = jwt.sign(
        {
          id: user._id,
          username: user.username,
          role: user.role,
        },
        process.env.JWT_SECRET,
        {
          expiresIn: "24h",
        }
      );

      return {
        success: true,
        message: "Login successful",
        data: {
          jwt: token,
          user: {
            _id: user._id,
            username: user.username,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            role: user.role,
          },
        },
      };
    },

    register: async (parent, args, context, info) => {
      const { username, email, password, firstName, lastName, phone } = args.input;

      // Kiểm tra user đã tồn tại
      const existingUserByUsername = await context.db.users.findOne(username);
      if (existingUserByUsername) {
        return {
          success: false,
          message: "Username already exists",
        };
      }

      const existingUserByEmail = await context.db.users.findByEmail(email);
      if (existingUserByEmail) {
        return {
          success: false,
          message: "Email already exists",
        };
      }

      // Validate password
      if (password.length < 6) {
        return {
          success: false,
          message: "Password must be at least 6 characters long",
        };
      }

      // Hash password
      const hashedPassword = await bcrypt.hash(password, 10);

      // Tạo user mới
      const newUser = await context.db.users.create({
        username,
        email,
        password: hashedPassword,
        firstName,
        lastName,
        phone,
        role: "customer", // Default role
        isActive: true,
      });

      return {
        success: true,
        message: "Registration successful",
        data: {
          _id: newUser._id,
          username: newUser.username,
          email: newUser.email,
          firstName: newUser.firstName,
          lastName: newUser.lastName,
          role: newUser.role,
        },
      };
    },
  },
};
====================================================================================================
END OF FILE: server/graphql/authentication.js
====================================================================================================


====================================================================================================
FILE: server/graphql/products.js
====================================================================================================

export const typeDef = `
  type Product {
    _id: ID!
    name: String!
    description: String
    price: Float!
    originalPrice: Float
    sku: String!
    category: Category!
    brand: Brand!
    images: [String]
    stock: Int!
    isActive: Boolean
    isFeatured: Boolean
    createdAt: String
    updatedAt: String
  }

  enum ProductsOrderBy {
    ID_ASC
    ID_DESC
    NAME_ASC
    NAME_DESC
    PRICE_ASC
    PRICE_DESC
    STOCK_ASC
    STOCK_DESC
    CREATED_ASC
    CREATED_DESC
  }

  type ProductConnection {
    nodes: [Product]
    totalCount: Int
    hasNextPage: Boolean
    hasPreviousPage: Boolean
  }

  input RangeConditionInput {
    min: Float
    max: Float
  }

  input ProductConditionInput {
    name: String
    brand: ID!
    category: ID
    price: RangeConditionInput
    stock: RangeConditionInput
    isActive: Boolean
    isFeatured: Boolean
  }

  extend type Query {
    products(
      first: Int = 10,
      offset: Int = 0,
      orderBy: ProductsOrderBy = CREATED_DESC,
      condition: ProductConditionInput
    ): ProductConnection
    
    product(id: ID!): Product
    
    # Backward compatibility - simple lists
    allProducts: [Product]
    featuredProducts: [Product]
    productsByCategory(categoryId: ID!): [Product]
    productsByBrand(brandId: ID!): [Product]
    productsByBrandAndCategory(brandId: ID!, categoryId: ID!): [Product]
    
    # Search products
    searchProducts(
      query: String!,
      first: Int = 10,
      offset: Int = 0,
      orderBy: ProductsOrderBy = CREATED_DESC
    ): ProductConnection
  }
  
  extend type Mutation {
    createProduct(input: ProductInput!): Product
    updateProduct(id: ID!, input: ProductInput!): Product
    deleteProduct(id: ID!): ID
  }
  
  input ProductInput {
    name: String!
    description: String
    price: Float!
    originalPrice: Float
    sku: String!
    category: ID!
    brand: ID!
    images: [String]
    stock: Int!
    isActive: Boolean = true
    isFeatured: Boolean = false
  }
`;

export const resolvers = {
  Query: {
    products: async (parent, args, context, info) => {
      console.log('Products query args:', args);
      const result = await context.db.products.getAll(args);
      
      const { first = 10, offset = 0 } = args;
      const hasNextPage = offset + first < result.totalCount;
      const hasPreviousPage = offset > 0;
      
      return {
        nodes: result.items,
        totalCount: result.totalCount,
        hasNextPage,
        hasPreviousPage
      };
    },
    
    product: async (parent, args, context, info) => {
      return await context.db.products.findById(args.id);
    },
    
    searchProducts: async (parent, args, context, info) => {
      console.log('Search products args:', args);
      const result = await context.db.products.search(args);
      
      const { first = 10, offset = 0 } = args;
      const hasNextPage = offset + first < result.totalCount;
      const hasPreviousPage = offset > 0;
      
      return {
        nodes: result.items,
        totalCount: result.totalCount,
        hasNextPage,
        hasPreviousPage
      };
    },
    
    // Simple lists for backward compatibility
    allProducts: async (parent, args, context, info) => {
      return await context.db.products.getAllSimple();
    },
    
    featuredProducts: async (parent, args, context, info) => {
      return await context.db.products.getFeatured();
    },
    
    productsByCategory: async (parent, args, context, info) => {
      return await context.db.products.getByCategory(args.categoryId);
    },
    productsByBrand: async (parent, args, context, info) => {
      return await context.db.products.getByBrand(args.brandId);
    },
    productsByBrandAndCategory: async (parent, args, context, info) => {
      return await context.db.products.getByBrandAndCategory(args.brandId, args.categoryId);
    },
    productsByBrandAndCategory: async (parent, args, context, info) => {
      return await context.db.products.getByBrandAndCategory(args.brandId, args.categoryId);
    }
  },
  
  Mutation: {
    createProduct: async (parent, args, context, info) => {
      try {
        console.log('Creating product with input:', args.input);
        
        // Validate required fields
        const { name, price, sku, category, stock } = args.input;
        
        if (!name || !price || !sku || !category || stock === undefined) {
          throw new Error('Missing required fields: name, price, sku, category, stock');
        }

        // Check if category exists
        const categoryExists = await context.db.categories.findById(category);
        if (!categoryExists) {
          throw new Error('Category not found');
        }

        // Check if SKU is unique
        const existingProduct = await context.db.products.getAllSimple();
        const skuExists = existingProduct.find(p => p.sku === sku);
        if (skuExists) {
          throw new Error('SKU already exists');
        }

        const product = await context.db.products.create(args.input);
        console.log('Product created successfully:', product._id);
        
        return product;
      } catch (error) {
        console.error('Error creating product:', error);
        throw error;
      }
    },
    
    updateProduct: async (parent, args, context, info) => {
      try {
        console.log('Updating product:', args.id, 'with input:', args.input);
        
        // Check if product exists
        const existingProduct = await context.db.products.findById(args.id);
        if (!existingProduct) {
          throw new Error('Product not found');
        }

        // If category is being updated, check if it exists
        if (args.input.category) {
          const categoryExists = await context.db.categories.findById(args.input.category);
          if (!categoryExists) {
            throw new Error('Category not found');
          }
        }

        // If SKU is being updated, check uniqueness
        if (args.input.sku && args.input.sku !== existingProduct.sku) {
          const allProducts = await context.db.products.getAllSimple();
          const skuExists = allProducts.find(p => p.sku === args.input.sku && p._id.toString() !== args.id);
          if (skuExists) {
            throw new Error('SKU already exists');
          }
        }

        const product = await context.db.products.updateById(args.id, args.input);
        console.log('Product updated successfully:', product._id);
        
        return product;
      } catch (error) {
        console.error('Error updating product:', error);
        throw error;
      }
    },
    
    deleteProduct: async (parent, args, context, info) => {
      try {
        console.log('Deleting product:', args.id);
        
        // Check if product exists and get its images
        const existingProduct = await context.db.products.findById(args.id);
        if (!existingProduct) {
          throw new Error('Product not found');
        }

        // Delete product images from filesystem (optional)
        if (existingProduct.images && existingProduct.images.length > 0) {
          const fs = await import('fs');
          const path = await import('path');
          const { fileURLToPath } = await import('url');
          const { dirname } = await import('path');
          
          const __filename = fileURLToPath(import.meta.url);
          const __dirname = dirname(__filename);
          
          for (const imageName of existingProduct.images) {
            try {
              const imagePath = path.join(__dirname, '../img/', imageName);
              if (fs.existsSync(imagePath)) {
                fs.unlinkSync(imagePath);
                console.log('Deleted image file:', imageName);
              }
            } catch (imageError) {
              console.warn('Could not delete image file:', imageName, imageError.message);
            }
          }
        }

        const deletedId = await context.db.products.deleteById(args.id);
        console.log('Product deleted successfully:', deletedId);
        
        return deletedId;
      } catch (error) {
        console.error('Error deleting product:', error);
        throw error;
      }
    },
  },
};
====================================================================================================
END OF FILE: server/graphql/products.js
====================================================================================================


====================================================================================================
FILE: server/graphql/categories.js
====================================================================================================

export const typeDef = `
  type Category {
    _id: ID!
    name: String!
    description: String
    image: String
    isActive: Boolean
    createdAt: String
    updatedAt: String
  }

  enum CategoriesOrderBy {
    ID_ASC
    ID_DESC
    NAME_ASC
    NAME_DESC
    CREATED_ASC
    CREATED_DESC
  }

  type CategoryConnection {
    nodes: [Category]
    totalCount: Int
    hasNextPage: Boolean
    hasPreviousPage: Boolean
  }

  input CategoryConditionInput {
    name: String
    isActive: Boolean
  }

  extend type Query {
    categories(
      first: Int = 10,
      offset: Int = 0,
      orderBy: CategoriesOrderBy = CREATED_DESC,
      condition: CategoryConditionInput
    ): CategoryConnection
    
    category(id: ID!): Category
    
    # Backward compatibility - simple list
    allCategories: [Category]
  }
  
  extend type Mutation {
    createCategory(input: CategoryInput!): Category
    updateCategory(id: ID!, input: CategoryInput!): Category
    deleteCategory(id: ID!): ID
  }
  
  input CategoryInput {
    name: String!
    description: String
    image: String
    isActive: Boolean = true
  }
`;

export const resolvers = {
  Query: {
    categories: async (parent, args, context, info) => {
      console.log('Categories query args:', args);
      const result = await context.db.categories.getAll(args);
      
      const { first = 10, offset = 0 } = args;
      const hasNextPage = offset + first < result.totalCount;
      const hasPreviousPage = offset > 0;
      
      return {
        nodes: result.items,
        totalCount: result.totalCount,
        hasNextPage,
        hasPreviousPage
      };
    },
    
    category: async (parent, args, context, info) => {
      return await context.db.categories.findById(args.id);
    },
    
    // Simple list for backward compatibility
    allCategories: async (parent, args, context, info) => {
      const result = await context.db.categories.getAllSimple();
      return result;
    },
  },
  
  Mutation: {
    createCategory: async (parent, args, context, info) => {
      return await context.db.categories.create(args.input);
    },
    updateCategory: async (parent, args, context, info) => {
      return await context.db.categories.updateById(args.id, args.input);
    },
    deleteCategory: async (parent, args, context, info) => {
      return await context.db.categories.deleteById(args.id);
    },
  },
};
====================================================================================================
END OF FILE: server/graphql/categories.js
====================================================================================================


====================================================================================================
FILE: server/graphql/brands.js
====================================================================================================

export const typeDef = `
  type Brand {
    _id: ID!
    name: String!
    slug: String!
    description: String
    logo: String
    banner: String
    website: String
    country: String
    foundedYear: Int
    categories: [Category]
    isActive: Boolean
    isFeatured: Boolean
    seoTitle: String
    seoDescription: String
    createdAt: String
    updatedAt: String
  }

  enum BrandsOrderBy {
    ID_ASC
    ID_DESC
    NAME_ASC
    NAME_DESC
    FOUNDED_ASC
    FOUNDED_DESC
    CREATED_ASC
    CREATED_DESC
  }

  type BrandConnection {
    nodes: [Brand]
    totalCount: Int
    hasNextPage: Boolean
    hasPreviousPage: Boolean
  }

  input BrandConditionInput {
    name: String
    country: String
    categories: [ID]
    isActive: Boolean
    isFeatured: Boolean
  }

  extend type Query {
    brands(
      first: Int = 10,
      offset: Int = 0,
      orderBy: BrandsOrderBy = CREATED_DESC,
      condition: BrandConditionInput
    ): BrandConnection
    
    brand(id: ID, slug: String): Brand
    brandsByCategory(categoryId: ID!): [Brand]
    allBrands: [Brand]
    featuredBrands: [Brand]
  }
  
  extend type Mutation {
    createBrand(input: BrandInput!): Brand
    updateBrand(id: ID!, input: BrandInput!): Brand
    deleteBrand(id: ID!): ID
  }
  
  input BrandInput {
    name: String!
    description: String
    logo: String
    banner: String
    website: String
    country: String
    foundedYear: Int
    categories: [ID]
    isActive: Boolean = true
    isFeatured: Boolean = false
    seoTitle: String
    seoDescription: String
  }
`;

export const resolvers = {
  Query: {
    brands: async (parent, args, context, info) => {
      console.log('Brands query args:', args);
      const result = await context.db.brands.getAll(args);
      
      const { first = 10, offset = 0 } = args;
      const hasNextPage = offset + first < result.totalCount;
      const hasPreviousPage = offset > 0;
      
      return {
        nodes: result.items,
        totalCount: result.totalCount,
        hasNextPage,
        hasPreviousPage
      };
    },
    
    brand: async (parent, args, context, info) => {
      if (args.id) {
        return await context.db.brands.findById(args.id);
      }
      if (args.slug) {
        return await context.db.brands.findBySlug(args.slug);
      }
      throw new Error('Either id or slug must be provided');
    },
    
    brandsByCategory: async (parent, args, context, info) => {
      return await context.db.brands.getByCategory(args.categoryId);
    },
    
    allBrands: async (parent, args, context, info) => {
      return await context.db.brands.getAllSimple();
    },
    
    featuredBrands: async (parent, args, context, info) => {
      return await context.db.brands.getFeatured();
    },
  },
  
  Mutation: {
    createBrand: async (parent, args, context, info) => {
      try {
        console.log('Creating brand with input:', args.input);
        
        const { name } = args.input;
        
        if (!name) {
          throw new Error('Missing required field: name');
        }

        const existingBrand = await context.db.brands.findByName(name);
        if (existingBrand) {
          throw new Error('Brand name already exists');
        }

        if (args.input.categories && args.input.categories.length > 0) {
          for (const categoryId of args.input.categories) {
            const categoryExists = await context.db.categories.findById(categoryId);
            if (!categoryExists) {
              throw new Error(`Category with ID ${categoryId} not found`);
            }
          }
        }

        const brand = await context.db.brands.create(args.input);
        console.log('Brand created successfully:', brand._id);
        
        return brand;
      } catch (error) {
        console.error('Error creating brand:', error);
        throw error;
      }
    },
    
    updateBrand: async (parent, args, context, info) => {
      try {
        console.log('Updating brand:', args.id, 'with input:', args.input);
        
        const existingBrand = await context.db.brands.findById(args.id);
        if (!existingBrand) {
          throw new Error('Brand not found');
        }

        if (args.input.name && args.input.name !== existingBrand.name) {
          const brandWithSameName = await context.db.brands.findByName(args.input.name);
          if (brandWithSameName && brandWithSameName._id.toString() !== args.id) {
            throw new Error('Brand name already exists');
          }
        }

        if (args.input.categories && args.input.categories.length > 0) {
          for (const categoryId of args.input.categories) {
            const categoryExists = await context.db.categories.findById(categoryId);
            if (!categoryExists) {
              throw new Error(`Category with ID ${categoryId} not found`);
            }
          }
        }

        const brand = await context.db.brands.updateById(args.id, args.input);
        console.log('Brand updated successfully:', brand._id);
        
        return brand;
      } catch (error) {
        console.error('Error updating brand:', error);
        throw error;
      }
    },
    
    deleteBrand: async (parent, args, context, info) => {
      try {
        console.log('Deleting brand:', args.id);
        
        const existingBrand = await context.db.brands.findById(args.id);
        if (!existingBrand) {
          throw new Error('Brand not found');
        }

        const productsUsingBrand = await context.db.products.getByBrand(args.id);
        if (productsUsingBrand && productsUsingBrand.length > 0) {
          throw new Error(`Cannot delete brand. ${productsUsingBrand.length} products are using this brand.`);
        }

        const deletedId = await context.db.brands.deleteById(args.id);
        console.log('Brand deleted successfully:', deletedId);
        
        return deletedId;
      } catch (error) {
        console.error('Error deleting brand:', error);
        throw error;
      }
    },
  },
};
====================================================================================================
END OF FILE: server/graphql/brands.js
====================================================================================================


====================================================================================================
FILE: server/graphql/carts.js
====================================================================================================

export const typeDef = `
  type CartItem {
    _id: ID!
    userId: ID!
    product: Product!
    quantity: Int!
    unitPrice: Float!
    productName: String!
    totalPrice: Float!
    addedAt: String!
  }

  type CartSummary {
    items: [CartItem!]!
    totalItems: Int!
    subtotal: Float!
  }

  input AddToCartInput {
    productId: ID!
    quantity: Int! = 1
  }

  input UpdateCartInput {
    productId: ID!
    quantity: Int!
  }

  extend type Query {
    getCart: CartSummary!
    getCartItemCount: Int!
  }

  extend type Mutation {
    addToCart(input: AddToCartInput!): CartItem!
    updateCartItem(input: UpdateCartInput!): CartItem!
    removeFromCart(productId: ID!): Boolean!
    clearCart: Boolean!
  }
`;

export const resolvers = {
  CartItem: {
    // Resolver để tính totalPrice
    totalPrice: (parent) => {
      return parent.quantity * parent.unitPrice;
    },
    
    // Populate product information
    product: async (parent, args, context) => {
      return await context.db.products.findById(parent.productId);
    }
  },

  Query: {
    getCart: async (parent, args, context, info) => {
      if (!context.user) {
        throw new Error("Authentication required");
      }

      console.log('Getting cart for user:', context.user.id);
      
      const cartItems = await context.db.carts.getByUserId(context.user.id);
      
      const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
      const subtotal = cartItems.reduce((sum, item) => sum + (item.quantity * item.unitPrice), 0);

      return {
        items: cartItems,
        totalItems,
        subtotal
      };
    },

    getCartItemCount: async (parent, args, context, info) => {
      if (!context.user) {
        return 0;
      }

      const cartItems = await context.db.carts.getByUserId(context.user.id);
      return cartItems.reduce((sum, item) => sum + item.quantity, 0);
    }
  },

  Mutation: {
    addToCart: async (parent, args, context, info) => {
      if (!context.user) {
        throw new Error("Authentication required");
      }

      const { productId, quantity } = args.input;

      console.log('Adding to cart:', { userId: context.user.id, productId, quantity });

      // Kiểm tra product có tồn tại không
      const product = await context.db.products.findById(productId);
      if (!product) {
        throw new Error("Product not found");
      }

      // Kiểm tra stock
      if (product.stock < quantity) {
        throw new Error(`Only ${product.stock} items available in stock`);
      }

      // Kiểm tra product đã có trong cart chưa
      const existingCartItem = await context.db.carts.findByUserAndProduct(context.user.id, productId);

      if (existingCartItem) {
        // Nếu đã có, cập nhật quantity
        const newQuantity = existingCartItem.quantity + quantity;
        
        // Kiểm tra stock cho quantity mới
        if (product.stock < newQuantity) {
          throw new Error(`Cannot add ${quantity} more. Only ${product.stock - existingCartItem.quantity} items available`);
        }

        return await context.db.carts.updateQuantity(context.user.id, productId, newQuantity);
      } else {
        // Nếu chưa có, tạo mới
        const cartData = {
          userId: context.user.id,
          productId: productId,
          quantity: quantity,
          unitPrice: product.price,
          productName: product.name
        };

        return await context.db.carts.create(cartData);
      }
    },

    updateCartItem: async (parent, args, context, info) => {
      if (!context.user) {
        throw new Error("Authentication required");
      }

      const { productId, quantity } = args.input;

      console.log('Updating cart item:', { userId: context.user.id, productId, quantity });

      if (quantity <= 0) {
        throw new Error("Quantity must be greater than 0");
      }

      // Kiểm tra product có tồn tại không
      const product = await context.db.products.findById(productId);
      if (!product) {
        throw new Error("Product not found");
      }

      // Kiểm tra stock
      if (product.stock < quantity) {
        throw new Error(`Only ${product.stock} items available in stock`);
      }

      // Kiểm tra cart item có tồn tại không
      const existingCartItem = await context.db.carts.findByUserAndProduct(context.user.id, productId);
      if (!existingCartItem) {
        throw new Error("Item not found in cart");
      }

      return await context.db.carts.updateQuantity(context.user.id, productId, quantity);
    },

    removeFromCart: async (parent, args, context, info) => {
      if (!context.user) {
        throw new Error("Authentication required");
      }

      console.log('Removing from cart:', { userId: context.user.id, productId: args.productId });

      const result = await context.db.carts.removeItem(context.user.id, args.productId);
      return result;
    },

    clearCart: async (parent, args, context, info) => {
      if (!context.user) {
        throw new Error("Authentication required");
      }

      console.log('Clearing cart for user:', context.user.id);

      const result = await context.db.carts.clearByUserId(context.user.id);
      return result;
    }
  }
};
====================================================================================================
END OF FILE: server/graphql/carts.js
====================================================================================================


====================================================================================================
FILE: server/graphql/orders.js
====================================================================================================

export const typeDef = `
  type Order {
    _id: ID!
    orderNumber: String!
    userId: ID!
    user: UserInfo
    customerInfo: CustomerInfo!
    status: OrderStatus!
    paymentMethod: PaymentMethod!
    paymentStatus: PaymentStatus!
    subtotal: Float!
    totalAmount: Float!
    items: [OrderItem!]!
    orderDate: String!
    confirmedAt: String
    processedAt: String
    shippedAt: String
    deliveredAt: String
    cancelledAt: String
    customerNotes: String
    adminNotes: String
    createdAt: String!
    updatedAt: String!
  }

  type OrderItem {
    _id: ID!
    orderId: ID!
    productId: ID!
    product: Product
    productName: String!
    productSku: String!
    quantity: Int!
    unitPrice: Float!
    totalPrice: Float!
    productSnapshot: ProductSnapshot
  }

  type ProductSnapshot {
    description: String
    images: [String]
    brand: String
    category: String
  }

  type CustomerInfo {
    fullName: String!
    phone: String!
    address: String!
    city: String!
    notes: String
  }

  enum OrderStatus {
    pending
    confirmed
    processing
    shipping
    delivered
    cancelled
  }

  enum PaymentMethod {
    cod
    bank_transfer
  }

  enum PaymentStatus {
    pending
    paid
    failed
    refunded
  }

  enum OrdersOrderBy {
    DATE_ASC
    DATE_DESC
    STATUS_ASC
    STATUS_DESC
    TOTAL_ASC
    TOTAL_DESC
  }

  type OrderConnection {
    nodes: [Order!]!
    totalCount: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
  }

  input CustomerInfoInput {
    fullName: String!
    phone: String!
    address: String!
    city: String!
    notes: String
  }

  input CreateOrderInput {
    customerInfo: CustomerInfoInput!
    paymentMethod: PaymentMethod!
    customerNotes: String
  }

  input OrderConditionInput {
    status: OrderStatus
    paymentStatus: PaymentStatus
    paymentMethod: PaymentMethod
    userId: ID
    dateFrom: String
    dateTo: String
  }

  extend type Query {
    # Customer queries
    getMyOrders(
      first: Int = 10,
      offset: Int = 0,
      orderBy: OrdersOrderBy = DATE_DESC
    ): OrderConnection!
    
    getMyOrder(orderNumber: String!): Order
    
    # Admin queries  
    getAllOrders(
      first: Int = 10,
      offset: Int = 0,
      orderBy: OrdersOrderBy = DATE_DESC,
      condition: OrderConditionInput
    ): OrderConnection!
    
    getOrder(orderNumber: String!): Order
    
    # Statistics
    getOrderStats: OrderStats!
  }

  type OrderStats {
    totalOrders: Int!
    pendingOrders: Int!
    confirmedOrders: Int!
    shippingOrders: Int!
    deliveredOrders: Int!
    cancelledOrders: Int!
    totalRevenue: Float!
    todayOrders: Int!
  }

  extend type Mutation {
    # Customer mutations
    createOrderFromCart(input: CreateOrderInput!): Order!
    
    # Admin mutations
    updateOrderStatus(orderNumber: String!, status: OrderStatus!, adminNotes: String): Order!
    updatePaymentStatus(orderNumber: String!, paymentStatus: PaymentStatus!): Order!
    cancelOrder(orderNumber: String!, reason: String): Order!
  }
`;

export const resolvers = {
  Order: {
    user: async (parent, args, context) => {
      if (parent.userId) {
        return await context.db.users.findById(parent.userId);
      }
      return null;
    },
    
    items: async (parent, args, context) => {
      return await context.db.orderItems.getByOrderId(parent._id);
    }
  },

  OrderItem: {
    product: async (parent, args, context) => {
      return await context.db.products.findById(parent.productId);
    }
  },

  Query: {
    getMyOrders: async (parent, args, context, info) => {
      if (!context.user) {
        throw new Error("Authentication required");
      }

      console.log('Getting orders for user:', context.user.id);
      
      const result = await context.db.orders.getByUserId(context.user.id, args);
      
      const { first = 10, offset = 0 } = args;
      const hasNextPage = offset + first < result.totalCount;
      const hasPreviousPage = offset > 0;
      
      return {
        nodes: result.items,
        totalCount: result.totalCount,
        hasNextPage,
        hasPreviousPage
      };
    },

    getMyOrder: async (parent, args, context, info) => {
      if (!context.user) {
        throw new Error("Authentication required");
      }

      const order = await context.db.orders.getByOrderNumber(args.orderNumber);
      
      if (!order) {
        throw new Error("Order not found");
      }

      // Kiểm tra order có thuộc về user này không
      if (order.userId.toString() !== context.user.id) {
        throw new Error("Access denied");
      }

      return order;
    },

    getAllOrders: async (parent, args, context, info) => {
      // Admin only - will be protected by permissions
      console.log('Getting all orders with args:', args);
      
      const result = await context.db.orders.getAll(args);
      
      const { first = 10, offset = 0 } = args;
      const hasNextPage = offset + first < result.totalCount;
      const hasPreviousPage = offset > 0;
      
      return {
        nodes: result.items,
        totalCount: result.totalCount,
        hasNextPage,
        hasPreviousPage
      };
    },

    getOrder: async (parent, args, context, info) => {
      // Admin only
      return await context.db.orders.getByOrderNumber(args.orderNumber);
    },

    getOrderStats: async (parent, args, context, info) => {
      // Admin only
      return await context.db.orders.getStats();
    }
  },

  Mutation: {
    createOrderFromCart: async (parent, args, context, info) => {
      if (!context.user) {
        throw new Error("Authentication required");
      }

      console.log('Creating order from cart for user:', context.user.id);
      console.log('Order input:', args.input);

      try {
        // Validate cart
        const cartValidation = await context.db.carts.validateCart(context.user.id);
        
        if (!cartValidation.isValid) {
          throw new Error(`Cart validation failed: ${cartValidation.errors.join(', ')}`);
        }

        if (cartValidation.validItems.length === 0) {
          throw new Error('Cart is empty');
        }

        // Create order
        const order = await context.db.orders.createFromCart(context.user.id, args.input);
        
        console.log('Order created successfully:', order.orderNumber);
        
        return order;
      } catch (error) {
        console.error('Error creating order:', error);
        throw error;
      }
    },

    updateOrderStatus: async (parent, args, context, info) => {
      // Admin only
      console.log('Updating order status:', args);
      
      const order = await context.db.orders.updateStatus(
        args.orderNumber, 
        args.status, 
        args.adminNotes
      );
      
      if (!order) {
        throw new Error('Order not found');
      }
      
      return order;
    },

    updatePaymentStatus: async (parent, args, context, info) => {
      // Admin only
      console.log('Updating payment status:', args);
      
      const order = await context.db.orders.updatePaymentStatus(
        args.orderNumber, 
        args.paymentStatus
      );
      
      if (!order) {
        throw new Error('Order not found');
      }
      
      return order;
    },

    cancelOrder: async (parent, args, context, info) => {
      // Admin only
      console.log('Cancelling order:', args);
      
      const order = await context.db.orders.cancelOrder(
        args.orderNumber, 
        args.reason
      );
      
      if (!order) {
        throw new Error('Order not found');
      }
      
      return order;
    }
  }
};
====================================================================================================
END OF FILE: server/graphql/orders.js
====================================================================================================


====================================================================================================
FILE: server/graphql/upload.js
====================================================================================================

/*
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";
import { v4 as uuidv4 } from "uuid";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export const typeDef = `
  scalar File

  extend type Mutation {
    upload(file: File!): String!
  }
`;

export const resolvers = {
  Mutation: {
    upload: async (_, { file }) => {
      try {
        const fileArrayBuffer = await file.arrayBuffer();
        
        // Tạo tên file unique với UUID
        const originalName = file.name;
        const fileExtension = path.extname(originalName);
        const uniqueFilename = `${uuidv4()}${fileExtension}`;
        
        await fs.promises.writeFile(
          path.join(__dirname + "/../img/", uniqueFilename),
          Buffer.from(fileArrayBuffer)
        );
        
        return uniqueFilename; // trả về tên file đã tạo
      } catch (e) {
        console.log("Cannot save uploaded file, reason: " + e);
        return false;
      }
    },
  },
}; */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";
import { v4 as uuidv4 } from "uuid";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Validate image file
const validateImageFile = (filename, allowedTypes = ['.jpg', '.jpeg', '.png', '.gif', '.webp']) => {
  if (!filename) {
    throw new Error("Filename is required");
  }
  
  const fileExtension = path.extname(filename).toLowerCase();
  
  if (!fileExtension) {
    throw new Error("File must have an extension");
  }
  
  if (!allowedTypes.includes(fileExtension)) {
    throw new Error(`Invalid file type. Allowed types: ${allowedTypes.join(', ')}`);
  }
  
  return true;
};

export const typeDef = `
  scalar File

  type UploadResult {
    success: Boolean!
    message: String!
    filename: String
    url: String
  }

  extend type Mutation {
    upload(file: File!): String!
    uploadProductImage(productId: ID!, file: File!): UploadResult!
    uploadProductImages(productId: ID!, files: [File!]!): UploadResult!
    removeProductImage(productId: ID!, filename: String!): Boolean!
  }
`;

export const resolvers = {
  Mutation: {
    // Original upload mutation (keep for compatibility)
    upload: async (_, { file }) => {
      try {
        const fileArrayBuffer = await file.arrayBuffer();
        
        // Tạo tên file unique với UUID
        const originalName = file.name;
        const fileExtension = path.extname(originalName);
        const uniqueFilename = `${uuidv4()}${fileExtension}`;
        
        await fs.promises.writeFile(
          path.join(__dirname + "/../img/", uniqueFilename),
          Buffer.from(fileArrayBuffer)
        );
        
        return uniqueFilename;
      } catch (e) {
        console.log("Cannot save uploaded file, reason: " + e);
        throw new Error(`Upload failed: ${e.message}`);
      }
    },

    // Upload single image for product
    uploadProductImage: async (_, { productId, file }, context) => {
      try {
        console.log('=== UPLOAD PRODUCT IMAGE START ===');
        console.log('Product ID:', productId);
        
        // Check if product exists
        const product = await context.db.products.findById(productId);
        if (!product) {
          throw new Error("Product not found");
        }

        const fileArrayBuffer = await file.arrayBuffer();
        const originalName = file.name;
        
        // Validate image
        validateImageFile(originalName);
        
        const fileExtension = path.extname(originalName);
        const uniqueFilename = `product_${productId}_${Date.now()}_${uuidv4()}${fileExtension}`;
        
        // Save file
        const uploadDir = path.join(__dirname, "../img/");
        if (!fs.existsSync(uploadDir)) {
          fs.mkdirSync(uploadDir, { recursive: true });
        }
        
        await fs.promises.writeFile(
          path.join(uploadDir, uniqueFilename),
          Buffer.from(fileArrayBuffer)
        );
        
        // Update product with new image
        const currentImages = product.images || [];
        const updatedImages = [...currentImages, uniqueFilename];
        
        await context.db.products.updateById(productId, {
          images: updatedImages
        });
        
        const fileUrl = `/img/${uniqueFilename}`;
        
        console.log('Product image uploaded successfully:', fileUrl);
        console.log('=== UPLOAD PRODUCT IMAGE END ===');
        
        return {
          success: true,
          message: "Image uploaded and added to product successfully",
          filename: uniqueFilename,
          url: fileUrl
        };
        
      } catch (error) {
        console.error("Upload product image error:", error);
        return {
          success: false,
          message: `Upload failed: ${error.message}`,
          filename: null,
          url: null
        };
      }
    },

    // Upload multiple images for product
    uploadProductImages: async (_, { productId, files }, context) => {
      try {
        console.log('=== UPLOAD PRODUCT IMAGES START ===');
        console.log('Product ID:', productId);
        console.log('Files count:', files.length);
        
        // Check if product exists
        const product = await context.db.products.findById(productId);
        if (!product) {
          throw new Error("Product not found");
        }

        const uploadedFilenames = [];
        const errors = [];
        
        // Create upload directory if it doesn't exist
        const uploadDir = path.join(__dirname, "../img/");
        if (!fs.existsSync(uploadDir)) {
          fs.mkdirSync(uploadDir, { recursive: true });
        }
        
        // Process each file
        for (let i = 0; i < files.length; i++) {
          try {
            const file = files[i];
            const fileArrayBuffer = await file.arrayBuffer();
            const originalName = file.name;
            
            console.log(`Processing file ${i + 1}/${files.length}: ${originalName}`);
            
            // Validate image
            validateImageFile(originalName);
            
            const fileExtension = path.extname(originalName);
            const uniqueFilename = `product_${productId}_${Date.now()}_${i}_${uuidv4()}${fileExtension}`;
            
            // Save file
            await fs.promises.writeFile(
              path.join(uploadDir, uniqueFilename),
              Buffer.from(fileArrayBuffer)
            );
            
            uploadedFilenames.push(uniqueFilename);
            console.log(`File ${i + 1} uploaded: ${uniqueFilename}`);
            
          } catch (fileError) {
            console.error(`Error uploading file ${i + 1}:`, fileError);
            errors.push(`File ${i + 1}: ${fileError.message}`);
          }
        }
        
        if (uploadedFilenames.length === 0) {
          throw new Error(`No files uploaded successfully. Errors: ${errors.join('; ')}`);
        }
        
        // Update product with new images
        const currentImages = product.images || [];
        const updatedImages = [...currentImages, ...uploadedFilenames];
        
        await context.db.products.updateById(productId, {
          images: updatedImages
        });
        
        const message = errors.length > 0 
          ? `${uploadedFilenames.length} file(s) uploaded successfully. Some files failed: ${errors.join('; ')}`
          : `${uploadedFilenames.length} file(s) uploaded successfully for product`;
        
        console.log('Product images upload completed:', message);
        console.log('=== UPLOAD PRODUCT IMAGES END ===');
        
        return {
          success: true,
          message: message,
          filename: uploadedFilenames.join(", "),
          url: `/img/${uploadedFilenames[0]}`
        };
        
      } catch (error) {
        console.error("Upload product images error:", error);
        return {
          success: false,
          message: `Upload failed: ${error.message}`,
          filename: null,
          url: null
        };
      }
    },

    // Remove image from product
    removeProductImage: async (_, { productId, filename }, context) => {
      try {
        console.log('=== REMOVE PRODUCT IMAGE START ===');
        console.log('Product ID:', productId, 'Filename:', filename);
        
        // Check if product exists
        const product = await context.db.products.findById(productId);
        if (!product) {
          throw new Error("Product not found");
        }
        
        const currentImages = product.images || [];
        
        // Check if image exists in product
        if (!currentImages.includes(filename)) {
          throw new Error("Image not found in product");
        }
        
        // Remove image from product
        const updatedImages = currentImages.filter(img => img !== filename);
        
        await context.db.products.updateById(productId, {
          images: updatedImages
        });
        
        // Try to delete physical file (optional - don't fail if file doesn't exist)
        try {
          const filePath = path.join(__dirname, "../img/", filename);
          if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
            console.log('Physical file deleted:', filename);
          }
        } catch (deleteError) {
          console.warn('Could not delete physical file:', deleteError.message);
        }
        
        console.log('Image removed from product successfully');
        console.log('=== REMOVE PRODUCT IMAGE END ===');
        
        return true;
        
      } catch (error) {
        console.error("Remove product image error:", error);
        throw new Error(`Remove image failed: ${error.message}`);
      }
    }
  },
};
====================================================================================================
END OF FILE: server/graphql/upload.js
====================================================================================================


====================================================================================================
FILE: server/data/models/index.js
====================================================================================================

import mongoose from "mongoose";
import { CategorySchema } from "./category.js";
import { ProductSchema } from "./product.js";
import { UserSchema } from "./user.js";
import { BrandSchema } from "./brand.js";
import { CartSchema } from "./cart.js"; 
import { OrderSchema } from "./order.js";
import { OrderItemSchema } from "./orderItem.js"; 

export const Category = mongoose.model("Category", CategorySchema);
export const Product = mongoose.model("Product", ProductSchema);
export const User = mongoose.model("User", UserSchema);
export const Brand = mongoose.model("Brand", BrandSchema);
export const Cart = mongoose.model("Cart", CartSchema); 
export const Order = mongoose.model("Order", OrderSchema);
export const OrderItem = mongoose.model("OrderItem", OrderItemSchema); 
====================================================================================================
END OF FILE: server/data/models/index.js
====================================================================================================


====================================================================================================
FILE: server/data/models/user.js
====================================================================================================

import mongoose from "mongoose";

let Schema = mongoose.Schema;
let String = Schema.Types.String;

export const UserSchema = new Schema(
  {
    username: {
      type: String,
      required: true,
      unique: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    password: {
      type: String,
      required: true,
    },
    firstName: String,
    lastName: String,
    role: {
      type: String,
      enum: ['admin', 'manager', 'customer'],
      default: 'customer',
    },
    phone: String,
    isActive: {
      type: Boolean,
      default: true,
    },
  },
  {
    collection: "users",
    timestamps: true,
  }
);
====================================================================================================
END OF FILE: server/data/models/user.js
====================================================================================================


====================================================================================================
FILE: server/data/models/product.js
====================================================================================================

import mongoose from "mongoose";

let Schema = mongoose.Schema;
let String = Schema.Types.String;
let Number = Schema.Types.Number;

export const ProductSchema = new Schema(
  {
    name: {
      type: String,
      required: true,
    },
    description: String,
    price: {
      type: Number,
      required: true,
      min: 0,
    },
    originalPrice: Number,
    sku: {
      type: String,
      unique: true,
      required: true,
    },
    category: {
      type: Schema.Types.ObjectId,
      ref: 'Category',
      required: true,
    },
    brand: {
      type: Schema.Types.ObjectId,
      ref: 'Brand', // Changed from String to ObjectId reference
      required: true,
    },
    images: [String],
    stock: {
      type: Number,
      default: 0,
      min: 0,
    },
    isActive: {
      type: Boolean,
      default: true,
    },
    isFeatured: {
      type: Boolean,
      default: false,
    },
  },
  {
    collection: "products",
    timestamps: true,
  }
);
====================================================================================================
END OF FILE: server/data/models/product.js
====================================================================================================


====================================================================================================
FILE: server/data/models/category.js
====================================================================================================

import mongoose from "mongoose";

let Schema = mongoose.Schema;
let String = Schema.Types.String;

export const CategorySchema = new Schema(
  {
    name: {
      type: String,
      required: true,
      unique: true,
    },
    description: String,
    image: String,
    isActive: {
      type: Boolean,
      default: true,
    },
  },
  {
    collection: "categories",
    timestamps: true,
  }
);
====================================================================================================
END OF FILE: server/data/models/category.js
====================================================================================================


====================================================================================================
FILE: server/data/models/brand.js
====================================================================================================

import mongoose from "mongoose";

let Schema = mongoose.Schema;
let String = Schema.Types.String;
let Number = Schema.Types.Number;
let Boolean = Schema.Types.Boolean;

export const BrandSchema = new Schema(
  {
    name: {
      type: String,
      required: true,
      unique: true,
      trim: true,
    },
    slug: {
      type: String,
      unique: true,
      lowercase: true,
      trim: true,
    },
    description: {
      type: String,
      trim: true,
    },
    logo: String,
    banner: String,
    website: {
      type: String,
      trim: true,
    },
    country: {
      type: String,
      trim: true,
    },
    foundedYear: {
      type: Number,
      min: 1800,
      max: new Date().getFullYear(),
    },
    categories: [{
      type: Schema.Types.ObjectId,
      ref: 'Category',
    }],
    isActive: {
      type: Boolean,
      default: true,
    },
    isFeatured: {
      type: Boolean,
      default: false,
    },
    seoTitle: {
      type: String,
      trim: true,
    },
    seoDescription: {
      type: String,
      trim: true,
    },
  },
  {
    collection: "brands",
    timestamps: true,
  }
);

// Pre-save middleware to generate slug
BrandSchema.pre('save', function(next) {
  if (this.isModified('name') || this.isNew) {
    this.slug = this.name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
  }
  next();
});
====================================================================================================
END OF FILE: server/data/models/brand.js
====================================================================================================


====================================================================================================
FILE: server/data/models/cart.js
====================================================================================================

import mongoose from "mongoose";

let Schema = mongoose.Schema;
let Number = Schema.Types.Number;

export const CartSchema = new Schema(
  {
    userId: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true,
    },
    productId: {
      type: Schema.Types.ObjectId,
      ref: 'Product',
      required: true,
    },
    quantity: {
      type: Number,
      required: true,
      min: 1,
      default: 1,
    },
    unitPrice: {
      type: Number,
      required: true,
      min: 0,
    },
    productName: {
      type: String,
      required: true,
    },
    addedAt: {
      type: Date,
      default: Date.now,
    }
  },
  {
    collection: "carts",
    timestamps: true,
  }
);

// Compound index để đảm bảo 1 user chỉ có 1 item cho 1 product
CartSchema.index({ userId: 1, productId: 1 }, { unique: true });
====================================================================================================
END OF FILE: server/data/models/cart.js
====================================================================================================


====================================================================================================
FILE: server/data/models/order.js
====================================================================================================

import mongoose from "mongoose";

let Schema = mongoose.Schema;
let String = Schema.Types.String;
let Number = Schema.Types.Number;

export const OrderSchema = new Schema(
  {
    orderNumber: {
      type: String,
      unique: true,
      required: true,
    },
    userId: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true,
    },
    customerInfo: {
      fullName: {
        type: String,
        required: true,
      },
      phone: {
        type: String,
        required: true,
      },
      address: {
        type: String,
        required: true,
      },
      city: {
        type: String,
        required: true,
      },
      notes: String, // Ghi chú từ khách hàng
    },
    status: {
      type: String,
      enum: ['pending', 'confirmed', 'processing', 'shipping', 'delivered', 'cancelled'],
      default: 'pending',
    },
    paymentMethod: {
      type: String,
      enum: ['cod', 'bank_transfer'],
      required: true,
    },
    paymentStatus: {
      type: String,
      enum: ['pending', 'paid', 'failed', 'refunded'],
      default: 'pending',
    },
    subtotal: {
      type: Number,
      required: true,
      min: 0,
    },
    totalAmount: {
      type: Number,
      required: true,
      min: 0,
    },
    orderDate: {
      type: Date,
      default: Date.now,
    },
    confirmedAt: Date,
    processedAt: Date,
    shippedAt: Date,
    deliveredAt: Date,
    cancelledAt: Date,
    customerNotes: String,
    adminNotes: String,
  },
  {
    collection: "orders",
    timestamps: true,
  }
);

// Index để query nhanh
OrderSchema.index({ userId: 1, orderDate: -1 });
OrderSchema.index({ status: 1, orderDate: -1 });
// OrderSchema.index({ orderNumber: 1 });
====================================================================================================
END OF FILE: server/data/models/order.js
====================================================================================================


====================================================================================================
FILE: server/data/models/orderItem.js
====================================================================================================

import mongoose from "mongoose";

let Schema = mongoose.Schema;
let String = Schema.Types.String;
let Number = Schema.Types.Number;

export const OrderItemSchema = new Schema(
  {
    orderId: {
      type: Schema.Types.ObjectId,
      ref: 'Order',
      required: true,
    },
    productId: {
      type: Schema.Types.ObjectId,
      ref: 'Product',
      required: true,
    },
    productName: {
      type: String,
      required: true,
    },
    productSku: {
      type: String,
      required: true,
    },
    quantity: {
      type: Number,
      required: true,
      min: 1,
    },
    unitPrice: {
      type: Number,
      required: true,
      min: 0,
    },
    totalPrice: {
      type: Number,
      required: true,
      min: 0,
    },
    // Snapshot thông tin product tại thời điểm đặt hàng
    productSnapshot: {
      description: String,
      images: [String],
      brand: String,
      category: String,
    }
  },
  {
    collection: "orderItems",
    timestamps: true,
  }
);

// Index để query nhanh
OrderItemSchema.index({ orderId: 1 });
OrderItemSchema.index({ productId: 1 });
====================================================================================================
END OF FILE: server/data/models/orderItem.js
====================================================================================================


====================================================================================================
FILE: server/data/mongoRepo.js
====================================================================================================

import { Category, User, Product, Brand, Cart, Order, OrderItem  } from "./models/index.js";
import mongoose from "mongoose";

// Helper function to build sort options from GraphQL enum
const buildSortOptions = (orderBy, columnMapping) => {
  if (!orderBy) return { createdAt: -1 }; // Default sort
  
  const [field, direction] = orderBy.split('_');
  const fieldName = columnMapping[field] || 'createdAt';
  const sortDirection = direction === 'ASC' ? 1 : -1;
  
  return { [fieldName]: sortDirection };
};

// Helper function to build query conditions
const buildQueryConditions = (condition) => {
  const query = {};
  
  if (!condition) return query;
  
  // Text search with regex (case insensitive)
  if (condition.name && condition.name.trim() !== '') {
    query.name = { $regex: condition.name.trim(), $options: 'i' };
  }
  
  if (condition.brand && condition.brand.trim() !== '') {
    query.brand = { $regex: condition.brand.trim(), $options: 'i' };
  }
  
  if (condition.country && condition.country.trim() !== '') {
    query.country = { $regex: condition.country.trim(), $options: 'i' };
  }
  
  // Exact matches
  if (condition.category) {
    query.category = condition.category;
  }
  
  if (condition.categories && condition.categories.length > 0) {
    query.categories = { $in: condition.categories };
  }
  
  if (condition.isActive !== undefined) {
    query.isActive = condition.isActive;
  }
  
  if (condition.isFeatured !== undefined) {
    query.isFeatured = condition.isFeatured;
  }
  
  // Range queries
  if (condition.price) {
    const priceQuery = {};
    if (condition.price.min !== undefined) {
      priceQuery.$gte = condition.price.min;
    }
    if (condition.price.max !== undefined) {
      priceQuery.$lte = condition.price.max;
    }
    if (Object.keys(priceQuery).length > 0) {
      query.price = priceQuery;
    }
  }
  
  if (condition.stock) {
    const stockQuery = {};
    if (condition.stock.min !== undefined) {
      stockQuery.$gte = condition.stock.min;
    }
    if (condition.stock.max !== undefined) {
      stockQuery.$lte = condition.stock.max;
    }
    if (Object.keys(stockQuery).length > 0) {
      query.stock = stockQuery;
    }
  }
  
  return query;
};

const db = {
  categories: {
    // New paginated method
    getAll: async ({ first = 10, offset = 0, orderBy = 'CREATED_DESC', condition } = {}) => {
      try {
        const columnMapping = {
          ID: '_id',
          NAME: 'name',
          CREATED: 'createdAt'
        };
        
        const query = buildQueryConditions(condition);
        const sortOptions = buildSortOptions(orderBy, columnMapping);
        
        console.log('Categories query:', query);
        console.log('Categories sort:', sortOptions);
        
        // Get total count
        const totalCount = await Category.countDocuments(query);
        
        // Ensure offset doesn't exceed total count
        const safeOffset = Math.min(offset, Math.max(0, totalCount - 1));
        
        // Get paginated items
        const items = await Category.find(query)
          .sort(sortOptions)
          .skip(safeOffset)
          .limit(first);
        
        return {
          items,
          totalCount
        };
      } catch (error) {
        console.error('Error in categories.getAll:', error);
        throw error;
      }
    },
    
    // Simple method for backward compatibility
    getAllSimple: async () => {
      return await Category.find({ isActive: true }).sort({ createdAt: -1 });
    },
    
    findById: async (id) => {
      return await Category.findById(id);
    },
    
    create: async (input) => {
      const category = new Category(input);
      return await category.save();
    },
    
    updateById: async (id, input) => {
      return await Category.findByIdAndUpdate(id, input, { new: true });
    },
    
    deleteById: async (id) => {
      const result = await Category.findByIdAndDelete(id);
      return result ? id : null;
    },
  },

  brands: {
    // New paginated method
    getAll: async ({ first = 10, offset = 0, orderBy = 'CREATED_DESC', condition } = {}) => {
      try {
        const columnMapping = {
          ID: '_id',
          NAME: 'name',
          FOUNDED: 'foundedYear',
          CREATED: 'createdAt'
        };
        
        const query = buildQueryConditions(condition);
        const sortOptions = buildSortOptions(orderBy, columnMapping);
        
        console.log('Brands query:', query);
        console.log('Brands sort:', sortOptions);
        
        // Get total count
        const totalCount = await Brand.countDocuments(query);
        
        // Ensure offset doesn't exceed total count
        const safeOffset = Math.min(offset, Math.max(0, totalCount - 1));
        
        // Get paginated items with population
        const items = await Brand.find(query)
          .populate('categories')
          .sort(sortOptions)
          .skip(safeOffset)
          .limit(first);
        
        return {
          items,
          totalCount
        };
      } catch (error) {
        console.error('Error in brands.getAll:', error);
        throw error;
      }
    },
    
    // Simple method for backward compatibility
    getAllSimple: async () => {
      return await Brand.find({ isActive: true })
        .populate('categories')
        .sort({ createdAt: -1 });
    },
    
    findById: async (id) => {
      return await Brand.findById(id).populate('categories');
    },
    
    findBySlug: async (slug) => {
      return await Brand.findOne({ slug }).populate('categories');
    },
    
    findByName: async (name) => {
      return await Brand.findOne({ name });
    },
    
    create: async (input) => {
      const brand = new Brand(input);
      const savedBrand = await brand.save();
      return await Brand.findById(savedBrand._id).populate('categories');
    },
    
    updateById: async (id, input) => {
      const updatedBrand = await Brand.findByIdAndUpdate(id, input, { new: true });
      return await Brand.findById(updatedBrand._id).populate('categories');
    },
    
    deleteById: async (id) => {
      const result = await Brand.findByIdAndDelete(id);
      return result ? id : null;
    },

    // Get featured brands
    getFeatured: async () => {
      return await Brand.find({ isFeatured: true, isActive: true })
        .populate('categories')
        .sort({ createdAt: -1 });
    },

    // Get brands by category
    getByCategory: async (categoryId) => {
      return await Brand.find({ categories: categoryId, isActive: true })
        .populate('categories')
        .sort({ name: 1 });
    },
  },

  products: {
    // New paginated method with filtering
    getAll: async ({ first = 10, offset = 0, orderBy = 'CREATED_DESC', condition } = {}) => {
      try {
        const columnMapping = {
          ID: '_id',
          NAME: 'name',
          PRICE: 'price',
          STOCK: 'stock',
          CREATED: 'createdAt'
        };
        
        const query = buildQueryConditions(condition);
        const sortOptions = buildSortOptions(orderBy, columnMapping);
        
        console.log('Products query:', query);
        console.log('Products sort:', sortOptions);
        
        // Get total count
        const totalCount = await Product.countDocuments(query);
        
        // Ensure offset doesn't exceed total count
        const safeOffset = Math.min(offset, Math.max(0, totalCount - 1));
        
        // Get paginated items with population
        const items = await Product.find(query)
          .populate('category')
          .populate('brand')
          .sort(sortOptions)
          .skip(safeOffset)
          .limit(first);
        
        return {
          items,
          totalCount
        };
      } catch (error) {
        console.error('Error in products.getAll:', error);
        throw error;
      }
    },
    
    // Search method
    search: async ({ query: searchQuery, first = 10, offset = 0, orderBy = 'CREATED_DESC' } = {}) => {
      try {
        const columnMapping = {
          ID: '_id',
          NAME: 'name',
          PRICE: 'price',
          STOCK: 'stock',
          CREATED: 'createdAt'
        };
        
        // Build search query
        const searchTerms = searchQuery.trim().split(/\s+/);
        const searchConditions = searchTerms.map(term => ({
          $or: [
            { name: { $regex: term, $options: 'i' } },
            { description: { $regex: term, $options: 'i' } },
            { sku: { $regex: term, $options: 'i' } }
          ]
        }));
        
        const query = {
          $and: searchConditions,
          isActive: true // Only search active products
        };
        
        const sortOptions = buildSortOptions(orderBy, columnMapping);
        
        console.log('Search query:', JSON.stringify(query, null, 2));
        
        // Get total count
        const totalCount = await Product.countDocuments(query);
        
        // Ensure offset doesn't exceed total count
        const safeOffset = Math.min(offset, Math.max(0, totalCount - 1));
        
        // Get paginated items with population
        const items = await Product.find(query)
          .populate('category')
          .populate('brand')
          .sort(sortOptions)
          .skip(safeOffset)
          .limit(first);
        
        return {
          items,
          totalCount
        };
      } catch (error) {
        console.error('Error in products.search:', error);
        throw error;
      }
    },
    
    // Simple method for backward compatibility
    getAllSimple: async () => {
      return await Product.find({ isActive: true })
        .populate('category')
        .populate('brand')
        .sort({ createdAt: -1 });
    },
    
    findById: async (id) => {
      return await Product.findById(id).populate('category').populate('brand');
    },
    
    create: async (input) => {
      const product = new Product(input);
      const savedProduct = await product.save();
      return await Product.findById(savedProduct._id).populate('category').populate('brand');
    },
    
    updateById: async (id, input) => {
      const updatedProduct = await Product.findByIdAndUpdate(id, input, { new: true });
      return await Product.findById(updatedProduct._id).populate('category').populate('brand');
    },
    
    deleteById: async (id) => {
      const result = await Product.findByIdAndDelete(id);
      return result ? id : null;
    },

    // Get featured products
    getFeatured: async () => {
      return await Product.find({ isFeatured: true, isActive: true })
        .populate('category')
        .populate('brand')
        .sort({ createdAt: -1 });
    },

    // Get products by category
    getByCategory: async (categoryId) => {
      return await Product.find({ category: categoryId, isActive: true })
        .populate('category')
        .populate('brand')
        .sort({ createdAt: -1 });
    },

    // Get products by brand
    getByBrand: async (brandId) => {
      return await Product.find({ brand: brandId, isActive: true })
        .populate('category')
        .populate('brand')
        .sort({ createdAt: -1 });
    },

    // Get products by brand and category
    getByBrandAndCategory: async (brandId, categoryId) => {
      return await Product.find({ 
        brand: brandId, 
        category: categoryId, 
        isActive: true 
      })
        .populate('category')
        .populate('brand')
        .sort({ createdAt: -1 });
    },

    // Add image to product
    addImage: async (productId, filename) => {
      const product = await Product.findById(productId);
      if (!product) throw new Error('Product not found');
      
      const currentImages = product.images || [];
      const updatedImages = [...currentImages, filename];
      
      return await Product.findByIdAndUpdate(
        productId, 
        { images: updatedImages }, 
        { new: true }
      ).populate('category').populate('brand');
    },

    // Remove image from product
    removeImage: async (productId, filename) => {
      const product = await Product.findById(productId);
      if (!product) throw new Error('Product not found');
      
      const currentImages = product.images || [];
      const updatedImages = currentImages.filter(img => img !== filename);
      
      return await Product.findByIdAndUpdate(
        productId, 
        { images: updatedImages }, 
        { new: true }
      ).populate('category').populate('brand');
    }
  },

  users: {
    findOne: async (username) => {
      return await User.findOne({ username }).lean();
    },
    
    findById: async (id) => {
      return await User.findById(id).lean();
    },
    
    findByEmail: async (email) => {
      return await User.findOne({ email }).lean();
    },
    
    create: async (input) => {
      const user = new User(input);
      return await user.save();
    },
  },

  carts: {
    // Lấy tất cả items trong cart của user
    getByUserId: async (userId) => {
      try {
        const cartItems = await Cart.find({ userId })
          .populate('productId')
          .sort({ addedAt: -1 });
        
        return cartItems;
      } catch (error) {
        console.error('Error in carts.getByUserId:', error);
        throw error;
      }
    },

    // Tìm cart item của user cho 1 product cụ thể
    findByUserAndProduct: async (userId, productId) => {
      try {
        return await Cart.findOne({ userId, productId });
      } catch (error) {
        console.error('Error in carts.findByUserAndProduct:', error);
        throw error;
      }
    },

    // Tạo cart item mới
    create: async (cartData) => {
      try {
        const cartItem = new Cart(cartData);
        const savedItem = await cartItem.save();
        
        // Populate product info trước khi return
        return await Cart.findById(savedItem._id).populate('productId');
      } catch (error) {
        console.error('Error in carts.create:', error);
        if (error.code === 11000) {
          throw new Error('Item already exists in cart');
        }
        throw error;
      }
    },

    // Cập nhật quantity của cart item
    updateQuantity: async (userId, productId, quantity) => {
      try {
        const updatedItem = await Cart.findOneAndUpdate(
          { userId, productId },
          { quantity },
          { new: true }
        ).populate('productId');

        if (!updatedItem) {
          throw new Error('Cart item not found');
        }

        return updatedItem;
      } catch (error) {
        console.error('Error in carts.updateQuantity:', error);
        throw error;
      }
    },

    // Xóa 1 item khỏi cart
    removeItem: async (userId, productId) => {
      try {
        const result = await Cart.findOneAndDelete({ userId, productId });
        return result !== null;
      } catch (error) {
        console.error('Error in carts.removeItem:', error);
        throw error;
      }
    },

    // Xóa toàn bộ cart của user
    clearByUserId: async (userId) => {
      try {
        const result = await Cart.deleteMany({ userId });
        return result.deletedCount > 0;
      } catch (error) {
        console.error('Error in carts.clearByUserId:', error);
        throw error;
      }
    },

    // Lấy tổng số items trong cart (để hiển thị badge)
    getItemCount: async (userId) => {
      try {
        const cartItems = await Cart.find({ userId });
        return cartItems.reduce((sum, item) => sum + item.quantity, 0);
      } catch (error) {
        console.error('Error in carts.getItemCount:', error);
        throw error;
      }
    },

    // Kiểm tra và validate cart trước khi checkout
    validateCart: async (userId) => {
      try {
        const cartItems = await Cart.find({ userId }).populate('productId');
        
        const validationErrors = [];
        const validItems = [];

        for (const item of cartItems) {
          if (!item.productId) {
            validationErrors.push(`Product ${item.productName} no longer exists`);
            continue;
          }

          if (!item.productId.isActive) {
            validationErrors.push(`Product ${item.productName} is no longer available`);
            continue;
          }

          if (item.productId.stock < item.quantity) {
            validationErrors.push(`${item.productName}: Only ${item.productId.stock} items available (you have ${item.quantity} in cart)`);
            continue;
          }

          // Kiểm tra giá có thay đổi không
          if (item.unitPrice !== item.productId.price) {
            validationErrors.push(`${item.productName}: Price changed from ${item.unitPrice} to ${item.productId.price}`);
          }

          validItems.push(item);
        }

        return {
          isValid: validationErrors.length === 0,
          errors: validationErrors,
          validItems
        };
      } catch (error) {
        console.error('Error in carts.validateCart:', error);
        throw error;
      }
    }
  },
  orders: {
    // Generate unique order number
    generateOrderNumber: async () => {
      const today = new Date();
      const dateStr = today.toISOString().slice(0, 10).replace(/-/g, ''); // YYYYMMDD
      
      // Find the last order of today
      const lastOrder = await Order.findOne({
        orderNumber: { $regex: `^DH${dateStr}` }
      }).sort({ orderNumber: -1 });
      
      let sequence = 1;
      if (lastOrder) {
        const lastSequence = parseInt(lastOrder.orderNumber.slice(-3));
        sequence = lastSequence + 1;
      }
      
      return `DH${dateStr}${sequence.toString().padStart(3, '0')}`;
    },

    // Create order from cart
    createFromCart: async (userId, orderInput) => {
      const session = await mongoose.startSession();
      
      try {
        await session.startTransaction();
        
        // 1. Validate cart
        const cartValidation = await db.carts.validateCart(userId);
        if (!cartValidation.isValid) {
          throw new Error(`Cart validation failed: ${cartValidation.errors.join(', ')}`);
        }
        
        const cartItems = cartValidation.validItems;
        if (cartItems.length === 0) {
          throw new Error('No valid items in cart');
        }
        
        // 2. Calculate totals
        const subtotal = cartItems.reduce((sum, item) => sum + (item.quantity * item.unitPrice), 0);
        const totalAmount = subtotal; // No shipping fee for now
        
        // 3. Generate order number
        const orderNumber = await db.orders.generateOrderNumber();
        
        // 4. Create order
        const orderData = {
          orderNumber,
          userId,
          customerInfo: orderInput.customerInfo,
          paymentMethod: orderInput.paymentMethod,
          subtotal,
          totalAmount,
          customerNotes: orderInput.customerNotes || '',
          status: 'pending',
          paymentStatus: 'pending'
        };
        
        const order = new Order(orderData);
        const savedOrder = await order.save({ session });
        
        // 5. Create order items and update stock
        const orderItems = [];
        for (const cartItem of cartItems) {
          const product = cartItem.productId;
          
          // Create order item with snapshot data
          const orderItemData = {
            orderId: savedOrder._id,
            productId: product._id,
            productName: product.name,
            productSku: product.sku,
            quantity: cartItem.quantity,
            unitPrice: cartItem.unitPrice,
            totalPrice: cartItem.quantity * cartItem.unitPrice,
            productSnapshot: {
              description: product.description,
              images: product.images || [],
              brand: product.brand?.name || '',
              category: product.category?.name || ''
            }
          };
          
          const orderItem = new OrderItem(orderItemData);
          const savedOrderItem = await orderItem.save({ session });
          orderItems.push(savedOrderItem);
          
          // Update stock
          await Product.findByIdAndUpdate(
            product._id,
            { $inc: { stock: -cartItem.quantity } },
            { session }
          );
        }
        
        // 6. Clear cart
        await Cart.deleteMany({ userId }, { session });
        
        await session.commitTransaction();
        
        // 7. Return populated order
        return await db.orders.getByOrderNumber(orderNumber);
        
      } catch (error) {
        await session.abortTransaction();
        console.error('Error creating order from cart:', error);
        throw error;
      } finally {
        session.endSession();
      }
    },

    // Get paginated orders for admin
    getAll: async ({ first = 10, offset = 0, orderBy = 'DATE_DESC', condition } = {}) => {
      try {
        const columnMapping = {
          DATE: 'orderDate',
          STATUS: 'status',
          TOTAL: 'totalAmount'
        };
        
        const query = {};
        
        if (condition) {
          if (condition.status) query.status = condition.status;
          if (condition.paymentStatus) query.paymentStatus = condition.paymentStatus;
          if (condition.paymentMethod) query.paymentMethod = condition.paymentMethod;
          if (condition.userId) query.userId = condition.userId;
          
          if (condition.dateFrom || condition.dateTo) {
            query.orderDate = {};
            if (condition.dateFrom) query.orderDate.$gte = new Date(condition.dateFrom);
            if (condition.dateTo) query.orderDate.$lte = new Date(condition.dateTo);
          }
        }
        
        const sortOptions = buildSortOptions(orderBy, columnMapping);
        
        console.log('Orders query:', query);
        console.log('Orders sort:', sortOptions);
        
        const totalCount = await Order.countDocuments(query);
        const safeOffset = Math.min(offset, Math.max(0, totalCount - 1));
        
        const items = await Order.find(query)
          .populate('userId', 'username email firstName lastName')
          .sort(sortOptions)
          .skip(safeOffset)
          .limit(first);
        
        return { items, totalCount };
      } catch (error) {
        console.error('Error in orders.getAll:', error);
        throw error;
      }
    },

    // Get orders by user ID
    getByUserId: async (userId, { first = 10, offset = 0, orderBy = 'DATE_DESC' } = {}) => {
      try {
        const columnMapping = {
          DATE: 'orderDate',
          STATUS: 'status',
          TOTAL: 'totalAmount'
        };
        
        const query = { userId };
        const sortOptions = buildSortOptions(orderBy, columnMapping);
        
        const totalCount = await Order.countDocuments(query);
        const safeOffset = Math.min(offset, Math.max(0, totalCount - 1));
        
        const items = await Order.find(query)
          .sort(sortOptions)
          .skip(safeOffset)
          .limit(first);
        
        return { items, totalCount };
      } catch (error) {
        console.error('Error in orders.getByUserId:', error);
        throw error;
      }
    },

    // Get order by order number
    getByOrderNumber: async (orderNumber) => {
      try {
        return await Order.findOne({ orderNumber })
          .populate('userId', 'username email firstName lastName');
      } catch (error) {
        console.error('Error in orders.getByOrderNumber:', error);
        throw error;
      }
    },

    // Update order status
    updateStatus: async (orderNumber, status, adminNotes) => {
      try {
        const updateData = { 
          status,
          ...(adminNotes && { adminNotes })
        };
        
        // Set timestamp fields based on status
        const now = new Date();
        switch (status) {
          case 'confirmed':
            updateData.confirmedAt = now;
            break;
          case 'processing':
            updateData.processedAt = now;
            break;
          case 'shipping':
            updateData.shippedAt = now;
            break;
          case 'delivered':
            updateData.deliveredAt = now;
            updateData.paymentStatus = 'paid'; // Auto-mark as paid when delivered
            break;
          case 'cancelled':
            updateData.cancelledAt = now;
            // Restore stock when cancelled
            await db.orders.restoreStockForOrder(orderNumber);
            break;
        }
        
        return await Order.findOneAndUpdate(
          { orderNumber },
          updateData,
          { new: true }
        ).populate('userId', 'username email firstName lastName');
      } catch (error) {
        console.error('Error in orders.updateStatus:', error);
        throw error;
      }
    },

    // Update payment status
    updatePaymentStatus: async (orderNumber, paymentStatus) => {
      try {
        return await Order.findOneAndUpdate(
          { orderNumber },
          { paymentStatus },
          { new: true }
        ).populate('userId', 'username email firstName lastName');
      } catch (error) {
        console.error('Error in orders.updatePaymentStatus:', error);
        throw error;
      }
    },

    // Cancel order and restore stock
    cancelOrder: async (orderNumber, reason) => {
      try {
        const updateData = {
          status: 'cancelled',
          cancelledAt: new Date(),
          ...(reason && { adminNotes: reason })
        };
        
        // Restore stock
        await db.orders.restoreStockForOrder(orderNumber);
        
        return await Order.findOneAndUpdate(
          { orderNumber },
          updateData,
          { new: true }
        ).populate('userId', 'username email firstName lastName');
      } catch (error) {
        console.error('Error in orders.cancelOrder:', error);
        throw error;
      }
    },

    // Restore stock when order is cancelled
    restoreStockForOrder: async (orderNumber) => {
      try {
        const order = await Order.findOne({ orderNumber });
        if (!order) throw new Error('Order not found');
        
        const orderItems = await OrderItem.find({ orderId: order._id });
        
        for (const item of orderItems) {
          await Product.findByIdAndUpdate(
            item.productId,
            { $inc: { stock: item.quantity } }
          );
        }
        
        console.log(`Stock restored for order ${orderNumber}`);
      } catch (error) {
        console.error('Error restoring stock:', error);
        throw error;
      }
    },

    // Get order statistics
    getStats: async () => {
      try {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const [
          totalOrders,
          pendingOrders,
          confirmedOrders,
          shippingOrders,
          deliveredOrders,
          cancelledOrders,
          todayOrders,
          revenueResult
        ] = await Promise.all([
          Order.countDocuments(),
          Order.countDocuments({ status: 'pending' }),
          Order.countDocuments({ status: 'confirmed' }),
          Order.countDocuments({ status: 'shipping' }),
          Order.countDocuments({ status: 'delivered' }),
          Order.countDocuments({ status: 'cancelled' }),
          Order.countDocuments({ orderDate: { $gte: today } }),
          Order.aggregate([
            { $match: { status: 'delivered' } },
            { $group: { _id: null, total: { $sum: '$totalAmount' } } }
          ])
        ]);
        
        const totalRevenue = revenueResult[0]?.total || 0;
        
        return {
          totalOrders,
          pendingOrders,
          confirmedOrders,
          shippingOrders,
          deliveredOrders,
          cancelledOrders,
          totalRevenue,
          todayOrders
        };
      } catch (error) {
        console.error('Error in orders.getStats:', error);
        throw error;
      }
    }
  },

  orderItems: {
    // Get order items by order ID
    getByOrderId: async (orderId) => {
      try {
        return await OrderItem.find({ orderId })
          .populate('productId')
          .sort({ createdAt: 1 });
      } catch (error) {
        console.error('Error in orderItems.getByOrderId:', error);
        throw error;
      }
    },

    // Get order items by product ID (for analytics)
    getByProductId: async (productId) => {
      try {
        return await OrderItem.find({ productId })
          .populate('orderId')
          .sort({ createdAt: -1 });
      } catch (error) {
        console.error('Error in orderItems.getByProductId:', error);
        throw error;
      }
    }
  },

};

export { db };
====================================================================================================
END OF FILE: server/data/mongoRepo.js
====================================================================================================


====================================================================================================
FILE: server/data/init.js
====================================================================================================

import mongoose from "mongoose";

export async function initDatabase() {
  const DATABASE_URL = process.env.DATABASE_URL;
  await mongoose.connect(DATABASE_URL);
  console.log(`SmartShop Database is up and running at: ${DATABASE_URL}`);
}
====================================================================================================
END OF FILE: server/data/init.js
====================================================================================================


====================================================================================================
FILE: webfrontend/package.json
====================================================================================================

{
  "name": "smartshop-ecommerce",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@apollo/client": "^3.13.8",
    "@heroicons/react": "^2.2.0",
    "apollo-upload-client": "^18.0.1",
    "clsx": "^2.1.1",
    "cors": "^2.8.5",
    "extract-files": "^13.0.0",
    "graphql": "^16.11.0",
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hot-toast": "^2.5.2",
    "react-router-dom": "^6.22.3",
    "tailwind-merge": "^3.3.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "vite": "^5.4.2"
  }
}

====================================================================================================
END OF FILE: webfrontend/package.json
====================================================================================================


====================================================================================================
FILE: webfrontend/vite.config.js
====================================================================================================

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
}); 
====================================================================================================
END OF FILE: webfrontend/vite.config.js
====================================================================================================


====================================================================================================
FILE: webfrontend/tailwind.config.js
====================================================================================================

/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};

====================================================================================================
END OF FILE: webfrontend/tailwind.config.js
====================================================================================================


====================================================================================================
FILE: webfrontend/src/main.jsx
====================================================================================================

// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { RouterProvider } from 'react-router-dom';
import { ApolloProvider } from '@apollo/client';
import { Toaster } from 'react-hot-toast';

import { router } from './router';
import { client } from './lib/apollo';
import { AuthProvider } from './contexts/AuthContext';

import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ApolloProvider client={client}>
      <AuthProvider>
        <RouterProvider router={router} />
        <Toaster position="top-right" />
      </AuthProvider>
    </ApolloProvider>
  </React.StrictMode>
);
====================================================================================================
END OF FILE: webfrontend/src/main.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/App.jsx
====================================================================================================

// src/App.jsx - Updated routing for standalone admin pages
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import { useAuth } from './contexts/AuthContext';

// Pages
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import HomePage from './pages/HomePage';
import ProductsPage from './pages/ProductsPage';
import ProductDetailPage from './pages/ProductDetailPage';
import NotFoundPage from './pages/NotFoundPage';

// Admin Components
import AdminLayout from './components/admin/AdminLayout';
import DashboardPage from './pages/admin/DashboardPage';
import AdminProductsPage from './pages/admin/AdminProductsPage'; // Standalone layout
import CreateProductPage from './pages/admin/CreateProductPage';
import EditProductPage from './pages/admin/EditProductPage';

// Protected Routes
import ProtectedRoute, { AdminRoute, ManagerRoute } from './components/auth/ProtectedRoute';

function App() {
  const { loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Đang khởi tạo SmartShop...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="App">
      <Routes>
        {/* Public Routes */}
        <Route path="/login" element={<LoginPage />} />
        <Route path="/register" element={<RegisterPage />} />
        
        {/* Protected Routes - Customer */}
        <Route 
          path="/" 
          element={
            <ProtectedRoute>
              <HomePage />
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/products" 
          element={
            <ProtectedRoute>
              <ProductsPage />
            </ProtectedRoute>
          } 
        />
        
        {/* Placeholder customer pages */}

        <Route 
          path="/products/:id" 
          element={
            <ProtectedRoute>
              <ProductDetailPage />
            </ProtectedRoute>
          } 
        />
        <Route 
          path="/categories" 
          element={
            <ProtectedRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <div className="max-w-7xl mx-auto">
                  <h1 className="text-3xl font-bold text-gray-900 mb-6">Danh mục sản phẩm</h1>
                  <div className="bg-white rounded-lg shadow p-6">
                    <p className="text-gray-600">Trang danh mục sẽ được phát triển ở phần tiếp theo! 📂</p>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/brands" 
          element={
            <ProtectedRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <div className="max-w-7xl mx-auto">
                  <h1 className="text-3xl font-bold text-gray-900 mb-6">Thương hiệu</h1>
                  <div className="bg-white rounded-lg shadow p-6">
                    <p className="text-gray-600">Trang thương hiệu sẽ được phát triển ở phần tiếp theo! 🏪</p>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/cart" 
          element={
            <ProtectedRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <div className="max-w-7xl mx-auto">
                  <h1 className="text-3xl font-bold text-gray-900 mb-6">Giỏ hàng</h1>
                  <div className="bg-white rounded-lg shadow p-6">
                    <p className="text-gray-600">Tính năng giỏ hàng sẽ được phát triển ở phần tiếp theo! 🛒</p>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          } 
        />

        {/* Admin Routes */}
        
        {/* Standalone Admin Products Page */}
        <Route 
          path="/admin/products" 
          element={
            <AdminRoute>
              <AdminProductsPage />
            </AdminRoute>
          } 
        />

        {/* Admin Product Management with shared layout */}
        <Route 
          path="/admin/products/create" 
          element={
            <AdminRoute>
              <AdminLayout>
                <CreateProductPage />
              </AdminLayout>
            </AdminRoute>
          } 
        />

        <Route 
          path="/admin/products/edit/:id" 
          element={
            <AdminRoute>
              <AdminLayout>
                <EditProductPage />
              </AdminLayout>
            </AdminRoute>
          } 
        />

        {/* Other Admin Routes with shared layout */}
        <Route 
          path="/admin/*" 
          element={
            <AdminRoute>
              <Routes>
                <Route path="/" element={<AdminLayout />}>
                  <Route index element={<DashboardPage />} />
                  <Route path="orders" element={
                    <div className="p-6">
                      <h1 className="text-2xl font-bold mb-4">Order Management</h1>
                      <div className="bg-white rounded-lg shadow p-6">
                        <p className="text-gray-600">Order management will be implemented soon! 📦</p>
                      </div>
                    </div>
                  } />
                  <Route path="categories" element={
                    <div className="p-6">
                      <h1 className="text-2xl font-bold mb-4">Category Management</h1>
                      <div className="bg-white rounded-lg shadow p-6">
                        <p className="text-gray-600">Category management will be implemented soon! 📂</p>
                      </div>
                    </div>
                  } />
                  <Route path="brands" element={
                    <div className="p-6">
                      <h1 className="text-2xl font-bold mb-4">Brand Management</h1>
                      <div className="bg-white rounded-lg shadow p-6">
                        <p className="text-gray-600">Brand management will be implemented soon! 🏪</p>
                      </div>
                    </div>
                  } />
                  <Route path="users" element={
                    <div className="p-6">
                      <h1 className="text-2xl font-bold mb-4">User Management</h1>
                      <div className="bg-white rounded-lg shadow p-6">
                        <p className="text-gray-600">User management will be implemented soon! 👥</p>
                      </div>
                    </div>
                  } />
                  <Route path="analytics" element={
                    <div className="p-6">
                      <h1 className="text-2xl font-bold mb-4">Analytics</h1>
                      <div className="bg-white rounded-lg shadow p-6">
                        <p className="text-gray-600">Analytics dashboard will be implemented soon! 📊</p>
                      </div>
                    </div>
                  } />
                  <Route path="settings" element={
                    <div className="p-6">
                      <h1 className="text-2xl font-bold mb-4">Settings</h1>
                      <div className="bg-white rounded-lg shadow p-6">
                        <p className="text-gray-600">Settings panel will be implemented soon! ⚙️</p>
                      </div>
                    </div>
                  } />
                </Route>
              </Routes>
            </AdminRoute>
          } 
        />
          
        {/* Manager Routes */}
        <Route 
          path="/manager/*" 
          element={
            <ManagerRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <h1 className="text-3xl font-bold text-gray-900 mb-6">
                  Manager Dashboard
                </h1>
                <div className="bg-white rounded-lg shadow p-6">
                  <p className="text-gray-600">
                    Welcome to SmartShop Manager Panel! 📊
                  </p>
                  <p className="text-sm text-gray-500 mt-2">
                    Manager features will be implemented here.
                  </p>
                </div>
              </div>
            </ManagerRoute>
          } 
        />
        
        {/* 404 Page */}
        <Route path="*" element={<NotFoundPage />} />
      </Routes>
    </div>
  );
}

export default App;
====================================================================================================
END OF FILE: webfrontend/src/App.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/router.jsx
====================================================================================================

import { createBrowserRouter, createRoutesFromElements, Route } from 'react-router-dom';

// Pages
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import HomePage from './pages/HomePage';
import ProductsPage from './pages/ProductsPage';
import NotFoundPage from './pages/NotFoundPage';
import AdminLayout from './components/admin/AdminLayout';
import DashboardPage from './pages/admin/DashboardPage';
import AdminProductsPage from './pages/admin/AdminProductsPage';
import CreateProductPage from './pages/admin/CreateProductPage';
import EditProductPage from './pages/admin/EditProductPage';
import ProductDetailPage from './pages/ProductDetailPage';

// Protected Routes
import ProtectedRoute, { AdminRoute, ManagerRoute } from './components/auth/ProtectedRoute';

// Router configuration with future flags
const routerConfig = {
  future: {
    v7_startTransition: true,
    v7_relativeSplatPath: true
  }
};

// Create routes
const routes = createRoutesFromElements(
  <Route>
    {/* Public Routes */}
    <Route path="/login" element={<LoginPage />} />
    <Route path="/register" element={<RegisterPage />} />
    
    {/* Protected Routes */}
    <Route path="/" element={<ProtectedRoute><HomePage /></ProtectedRoute>} />
    <Route path="/products" element={<ProtectedRoute><ProductsPage /></ProtectedRoute>} />
    <Route path="/products/:id" element={<ProtectedRoute><ProductDetailPage /></ProtectedRoute>} />
    
    {/* Admin Routes */}
    <Route path="/admin/*" element={<AdminRoute><AdminLayout /></AdminRoute>}>
      <Route index element={<DashboardPage />} />
      <Route path="products" element={<AdminProductsPage />} />
      <Route path="products/create" element={<CreateProductPage />} />
      <Route path="products/edit/:id" element={<EditProductPage />} />
    </Route>
    
    {/* Manager Routes */}
    <Route path="/manager/*" element={<ManagerRoute>
      <div className="min-h-screen bg-gray-100 p-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-6">
          Manager Dashboard
        </h1>
        <div className="bg-white rounded-lg shadow p-6">
          <p className="text-gray-600">
            Welcome to SmartShop Manager Panel! 📊
          </p>
          <p className="text-sm text-gray-500 mt-2">
            Manager features will be implemented here.
          </p>
        </div>
      </div>
    </ManagerRoute>} />
    
    {/* 404 Page */}
    <Route path="*" element={<NotFoundPage />} />
  </Route>
);

// Create router with configuration
export const router = createBrowserRouter(routes, routerConfig); 
====================================================================================================
END OF FILE: webfrontend/src/router.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/contexts/AuthContext.jsx
====================================================================================================

// src/contexts/AuthContext.jsx
import React, { createContext, useContext, useReducer, useEffect } from 'react';

// Auth utilities functions
const getToken = () => {
  return localStorage.getItem('smartshop_token');
};

const getUser = () => {
  const userStr = localStorage.getItem('smartshop_user');
  try {
    return userStr ? JSON.parse(userStr) : null;
  } catch {
    return null;
  }
};

const setAuth = (token, user) => {
  localStorage.setItem('smartshop_token', token);
  localStorage.setItem('smartshop_user', JSON.stringify(user));
};

const clearAuth = () => {
  localStorage.removeItem('smartshop_token');
  localStorage.removeItem('smartshop_user');
};

// Create Auth Context
const AuthContext = createContext();

// Auth reducer
const authReducer = (state, action) => {
  switch (action.type) {
    case 'LOGIN':
      return {
        ...state,
        isAuthenticated: true,
        user: action.payload.user,
        token: action.payload.token,
        loading: false,
      };
    case 'LOGOUT':
      return {
        ...state,
        isAuthenticated: false,
        user: null,
        token: null,
        loading: false,
      };
    case 'SET_LOADING':
      return {
        ...state,
        loading: action.payload,
      };
    case 'INIT':
      return {
        ...state,
        isAuthenticated: !!action.payload.token,
        user: action.payload.user,
        token: action.payload.token,
        loading: false,
      };
    default:
      return state;
  }
};

// Initial state
const initialState = {
  isAuthenticated: false,
  user: null,
  token: null,
  loading: true,
};

// Auth Provider Component
export const AuthProvider = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState);

  // Initialize auth state từ localStorage
  useEffect(() => {
    const token = getToken();
    const user = getUser();
    
    dispatch({
      type: 'INIT',
      payload: { token, user }
    });
  }, []);

  // Login function
  const login = (token, user) => {
    setAuth(token, user);
    dispatch({
      type: 'LOGIN',
      payload: { token, user }
    });
  };

  // Logout function
  const logout = () => {
    clearAuth();
    dispatch({ type: 'LOGOUT' });
  };

  // Set loading function
  const setLoading = (loading) => {
    dispatch({ type: 'SET_LOADING', payload: loading });
  };

  // Context value
  const value = {
    ...state,
    login,
    logout,
    setLoading,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// Custom hook to use Auth context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};
====================================================================================================
END OF FILE: webfrontend/src/contexts/AuthContext.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/hooks/useAuth.js
====================================================================================================

// src/hooks/useAuth.js
import { useMutation, useQuery } from '@apollo/client';
import { useNavigate } from 'react-router-dom';
import toast from 'react-hot-toast';
import { LOGIN_MUTATION, REGISTER_MUTATION, ME_QUERY } from '../graphql/auth';
import { useAuth as useAuthContext } from '../contexts/AuthContext';

export const useLogin = () => {
  const navigate = useNavigate();
  const { login } = useAuthContext();
  
  const [loginMutation, { loading, error }] = useMutation(LOGIN_MUTATION, {
    onCompleted: (data) => {
      if (data.login.success) {
        const { jwt, user } = data.login.data;
        login(jwt, user);
        toast.success(`Chào mừng ${user.firstName || user.username}!`);
        
        // Redirect based on role
        if (user.role === 'admin' || user.role === 'manager') {
          navigate('/admin');
        } else {
          navigate('/');
        }
      } else {
        toast.error(data.login.message);
      }
    },
    onError: (error) => {
      console.error('Login error:', error);
      toast.error('Đăng nhập thất bại. Vui lòng thử lại!');
    }
  });

  const handleLogin = async (formData) => {
    try {
      await loginMutation({
        variables: {
          input: {
            username: formData.username,
            password: formData.password
          }
        }
      });
    } catch (err) {
      console.error('Login submission error:', err);
    }
  };

  return {
    login: handleLogin,
    loading,
    error
  };
};

export const useRegister = () => {
  const navigate = useNavigate();
  
  const [registerMutation, { loading, error }] = useMutation(REGISTER_MUTATION, {
    onCompleted: (data) => {
      if (data.register.success) {
        toast.success('Đăng ký thành công! Vui lòng đăng nhập.');
        navigate('/login');
      } else {
        toast.error(data.register.message);
      }
    },
    onError: (error) => {
      console.error('Register error:', error);
      toast.error('Đăng ký thất bại. Vui lòng thử lại!');
    }
  });

  const handleRegister = async (formData) => {
    try {
      await registerMutation({
        variables: {
          input: {
            username: formData.username,
            email: formData.email,
            password: formData.password,
            firstName: formData.firstName,
            lastName: formData.lastName,
            phone: formData.phone || ''
          }
        }
      });
    } catch (err) {
      console.error('Register submission error:', err);
    }
  };

  return {
    register: handleRegister,
    loading,
    error
  };
};

export const useCurrentUser = () => {
  const { isAuthenticated } = useAuthContext();
  
  const { data, loading, error, refetch } = useQuery(ME_QUERY, {
    skip: !isAuthenticated,
    errorPolicy: 'all'
  });

  return {
    user: data?.me,
    loading,
    error,
    refetch
  };
};
====================================================================================================
END OF FILE: webfrontend/src/hooks/useAuth.js
====================================================================================================


====================================================================================================
FILE: webfrontend/src/hooks/useProducts.js
====================================================================================================

// src/hooks/useProducts.js - Key fixes for product creation
import { useQuery, useLazyQuery, useMutation } from '@apollo/client';
import { useState } from 'react';
import toast from 'react-hot-toast';

// Import GraphQL operations
import {
  GET_PRODUCTS,
  GET_PRODUCT,
  SEARCH_PRODUCTS,
  GET_FEATURED_PRODUCTS,
  GET_PRODUCTS_BY_CATEGORY,
  GET_PRODUCTS_BY_BRAND,
  GET_ALL_PRODUCTS,
  CREATE_PRODUCT,
  UPDATE_PRODUCT,
  DELETE_PRODUCT,
  UPDATE_PRODUCT_IMAGES,
  SET_MAIN_PRODUCT_IMAGE,
  DELETE_PRODUCT_IMAGE
} from '../graphql/products';

import {
  GET_ALL_CATEGORIES
} from '../graphql/categories';

import {
  GET_ALL_BRANDS
} from '../graphql/brands';

// Import upload hooks
import { useUploadProductImages } from './useUpload';

// Default values for null/undefined data
const DEFAULT_BRAND = { _id: '', name: 'Unknown Brand', description: '' };
const DEFAULT_CATEGORY = { _id: '', name: 'Unknown Category', description: '' };

// Safe product data processor
const processProductData = (product) => {
  if (!product) return null;
  
  return {
    ...product,
    brand: (product.brand && typeof product.brand === 'object') ? product.brand : DEFAULT_BRAND,
    category: (product.category && typeof product.category === 'object') ? product.category : DEFAULT_CATEGORY,
    images: Array.isArray(product.images) ? product.images : [],
    stock: typeof product.stock === 'number' ? product.stock : 0,
    price: typeof product.price === 'number' ? product.price : 0
  };
};

// =================
// PUBLIC HOOKS (Customer facing)
// =================

export const useProducts = (options = {}) => {
  const {
    first = 12,
    offset = 0,
    orderBy = 'CREATED_DESC',
    condition = null,
    skip = false
  } = options;

  // Build filter condition
  const buildCondition = () => {
    if (!condition) return null;

    const filterCondition = {};

    // Price range
    if (condition.price?.min || condition.price?.max) {
      filterCondition.price = {};
      if (condition.price.min) filterCondition.price.min = parseFloat(condition.price.min);
      if (condition.price.max) filterCondition.price.max = parseFloat(condition.price.max);
    }

    // Category
    if (condition.category) {
      filterCondition.category = condition.category;
    }

    // Brand
    if (condition.brand) {
      filterCondition.brand = condition.brand;
    }

    // Stock
    if (condition.stock?.min || condition.stock?.max) {
      filterCondition.stock = {};
      if (condition.stock.min) filterCondition.stock.min = parseInt(condition.stock.min);
      if (condition.stock.max) filterCondition.stock.max = parseInt(condition.stock.max);
    }

    // Featured
    if (condition.isFeatured) {
      filterCondition.isFeatured = true;
    }

    console.log('useProducts - Final filter condition:', filterCondition);
    return Object.keys(filterCondition).length > 0 ? filterCondition : null;
  };

  const { data, loading, error, fetchMore, refetch } = useQuery(GET_PRODUCTS, {
    variables: {
      first,
      offset,
      orderBy,
      condition: buildCondition()
    },
    skip,
    errorPolicy: 'all',
    notifyOnNetworkStatusChange: true,
    fetchPolicy: 'network-only' // Force fetch from network
  });

  const loadMore = () => {
    if (data?.products?.hasNextPage) {
      return fetchMore({
        variables: {
          offset: data.products.nodes.length
        }
      });
    }
  };

  const products = (data?.products?.nodes || [])
    .map(processProductData)
    .filter(Boolean);

  return {
    products,
    totalCount: data?.products?.totalCount || 0,
    hasNextPage: data?.products?.hasNextPage || false,
    hasPreviousPage: data?.products?.hasPreviousPage || false,
    loading,
    error,
    loadMore,
    refetch
  };
};

export const useSearchProducts = () => {
  const [searchResults, setSearchResults] = useState([]);
  const [isSearching, setIsSearching] = useState(false);

  const [searchProducts] = useLazyQuery(SEARCH_PRODUCTS, {
    onCompleted: (data) => {
      const results = (data?.searchProducts?.nodes || [])
        .map(processProductData)
        .filter(Boolean);
      
      setSearchResults(results);
      setIsSearching(false);
    },
    onError: (error) => {
      console.error('Search error:', error);
      toast.error('Lỗi khi tìm kiếm sản phẩm');
      setIsSearching(false);
      setSearchResults([]);
    },
    errorPolicy: 'all'
  });

  const search = async (query, options = {}) => {
    if (!query.trim()) {
      setSearchResults([]);
      return;
    }

    setIsSearching(true);
    try {
      await searchProducts({
        variables: {
          query: query.trim(),
          first: options.first || 20,
          offset: options.offset || 0,
          orderBy: options.orderBy || 'CREATED_DESC'
        }
      });
    } catch (error) {
      console.error('Search execution error:', error);
      setIsSearching(false);
      setSearchResults([]);
    }
  };

  const clearSearch = () => {
    setSearchResults([]);
    setIsSearching(false);
  };

  return {
    searchResults,
    isSearching,
    search,
    clearSearch
  };
};

export const useProduct = (productId) => {
  const { data, loading, error } = useQuery(GET_PRODUCT, {
    variables: { id: productId },
    skip: !productId,
    errorPolicy: 'all'
  });

  const product = data?.product ? processProductData(data.product) : null;

  return {
    product,
    loading,
    error
  };
};

export const useFeaturedProducts = () => {
  const { data, loading, error } = useQuery(GET_FEATURED_PRODUCTS, {
    errorPolicy: 'all'
  });

  const featuredProducts = (data?.featuredProducts || [])
    .map(processProductData)
    .filter(Boolean);

  return {
    featuredProducts,
    loading,
    error
  };
};

export const useProductsByCategory = (categoryId) => {
  const { data, loading, error } = useQuery(GET_PRODUCTS_BY_CATEGORY, {
    variables: { categoryId },
    skip: !categoryId,
    errorPolicy: 'all'
  });

  const products = (data?.productsByCategory || [])
    .map(processProductData)
    .filter(Boolean);

  return {
    products,
    loading,
    error
  };
};

export const useProductsByBrand = (brandId) => {
  const { data, loading, error } = useQuery(GET_PRODUCTS_BY_BRAND, {
    variables: { brandId },
    skip: !brandId,
    errorPolicy: 'all'
  });

  const products = (data?.productsByBrand || [])
    .map(processProductData)
    .filter(Boolean);

  return {
    products,
    loading,
    error
  };
};

export const useCategories = () => {
  const { data, loading, error } = useQuery(GET_ALL_CATEGORIES, {
    errorPolicy: 'all'
  });

  return {
    categories: data?.allCategories || [],
    loading,
    error
  };
};

export const useBrands = () => {
  const { data, loading, error } = useQuery(GET_ALL_BRANDS, {
    errorPolicy: 'all'
  });

  return {
    brands: data?.allBrands || [],
    loading,
    error
  };
};

// =================
// ADMIN HOOKS
// =================

export const useCreateProduct = () => {
  const [createProductMutation, { loading, error }] = useMutation(CREATE_PRODUCT, {
    refetchQueries: [
      { query: GET_PRODUCTS },
      { query: GET_ALL_PRODUCTS }
    ],
    onCompleted: (data) => {
      console.log('✅ Create product mutation completed:', data);
    },
    onError: (error) => {
      console.error('❌ Create product mutation error:', error);
    }
  });

  const createProduct = async (productData) => {
    try {
      console.log('🚀 Creating product with data:', productData);
      
      const result = await createProductMutation({
        variables: {
          input: productData
        }
      });
      
      console.log('📦 Create product result:', result);
      
      if (!result?.data?.createProduct) {
        throw new Error('No product returned from create mutation');
      }
      
      return result.data.createProduct;
      
    } catch (err) {
      console.error('❌ Create product error:', err);
      throw err;
    }
  };

  return {
    createProduct,
    loading,
    error
  };
};

export const useUpdateProduct = () => {
  const [updateProductMutation, { loading, error }] = useMutation(UPDATE_PRODUCT, {
    refetchQueries: [
      { query: GET_PRODUCTS },
      { query: GET_ALL_PRODUCTS }
    ],
    onCompleted: (data) => {
      console.log('✅ Update product completed:', data);
    },
    onError: (error) => {
      console.error('❌ Update product error:', error);
    }
  });

  const updateProduct = async (productId, productData) => {
    try {
      console.log('🔄 Updating product:', productId, 'with data:', productData);
      
      const result = await updateProductMutation({
        variables: {
          id: productId,
          input: productData
        }
      });
      
      console.log('📦 Update result:', result);
      
      if (!result?.data?.updateProduct) {
        throw new Error('No product returned from update mutation');
      }
      
      return result.data.updateProduct;
      
    } catch (err) {
      console.error('❌ Update product error:', err);
      throw err;
    }
  };

  return {
    updateProduct,
    loading,
    error
  };
};

// Combined hook for creating product with images
export const useCreateProductWithImages = () => {
  const { createProduct, loading: createLoading, error: createError } = useCreateProduct();
  const { uploadImages, loading: uploadLoading } = useUploadProductImages();
  
  const [loading, setLoading] = useState(false);

  const createProductWithImages = async (productData, imageFiles) => {
    setLoading(true);
    
    try {
      console.log('🚀 Step 1: Creating product...');
      const createdProduct = await createProduct(productData);
      
      console.log('✅ Product created:', createdProduct);
      
      if (!createdProduct?._id) {
        throw new Error('Failed to create product - no product ID returned');
      }

      // Step 2: Upload images if provided
      if (imageFiles && imageFiles.length > 0) {
        console.log('🖼️ Step 2: Uploading images...');
        try {
          const uploadResult = await uploadImages(createdProduct._id, imageFiles);
          
          if (!uploadResult?.success) {
            console.warn('⚠️ Image upload failed:', uploadResult?.message);
            toast.warn(`Sản phẩm đã tạo thành công nhưng upload ảnh thất bại: ${uploadResult?.message || 'Unknown error'}`);
          } else {
            console.log('✅ Images uploaded successfully');
          }
        } catch (uploadError) {
          console.error('❌ Image upload error:', uploadError);
          toast.warn(`Sản phẩm đã tạo thành công nhưng upload ảnh thất bại: ${uploadError.message}`);
        }
      }

      setLoading(false);
      return createdProduct;
      
    } catch (error) {
      setLoading(false);
      console.error('❌ Create product with images error:', error);
      throw error;
    }
  };

  return {
    createProductWithImages,
    loading: loading || createLoading || uploadLoading,
    error: createError
  };
};

export const useUpdateProductWithImages = () => {
  const { updateProduct, loading: updateLoading, error: updateError } = useUpdateProduct();
  const { uploadImages, loading: uploadLoading } = useUploadProductImages();
  
  const [loading, setLoading] = useState(false);

  const updateProductWithImages = async (productId, productData, imageFiles) => {
    setLoading(true);
    
    try {
      console.log('🔄 Step 1: Updating product...');
      const updatedProduct = await updateProduct(productId, productData);
      
      // Step 2: Upload new images if provided
      if (imageFiles && imageFiles.length > 0) {
        console.log('🖼️ Step 2: Uploading new images...');
        try {
          const uploadResult = await uploadImages(productId, imageFiles);
          
          if (!uploadResult?.success) {
            toast.warn(`Cập nhật sản phẩm thành công nhưng upload ảnh thất bại: ${uploadResult?.message || 'Unknown error'}`);
          }
        } catch (uploadError) {
          console.error('❌ Image upload error:', uploadError);
          toast.warn(`Cập nhật sản phẩm thành công nhưng upload ảnh thất bại: ${uploadError.message}`);
        }
      }

      setLoading(false);
      return updatedProduct;
      
    } catch (error) {
      setLoading(false);
      console.error('❌ Update product with images error:', error);
      throw error;
    }
  };

  return {
    updateProductWithImages,
    loading: loading || updateLoading || uploadLoading,
    error: updateError
  };
};

export const useDeleteProduct = () => {
  const [deleteProductMutation, { loading, error }] = useMutation(DELETE_PRODUCT, {
    refetchQueries: [
      { query: GET_PRODUCTS },
      { query: GET_ALL_PRODUCTS }
    ],
    onCompleted: (data) => {
      console.log('✅ Delete product completed:', data);
      toast.success('Xóa sản phẩm thành công!');
    },
    onError: (error) => {
      console.error('❌ Delete product error:', error);
      toast.error(`Lỗi xóa sản phẩm: ${error.message}`);
    }
  });

  const deleteProduct = async (productId) => {
    try {
      await deleteProductMutation({
        variables: {
          id: productId
        }
      });
      return true;
    } catch (err) {
      console.error('❌ Delete product error:', err);
      throw err;
    }
  };

  return {
    deleteProduct,
    loading,
    error
  };
};

export const useProductFormData = () => {
  const { data: categoriesData, loading: categoriesLoading } = useQuery(GET_ALL_CATEGORIES, {
    errorPolicy: 'all'
  });
  const { data: brandsData, loading: brandsLoading } = useQuery(GET_ALL_BRANDS, {
    errorPolicy: 'all'
  });

  return {
    categories: categoriesData?.allCategories || [],
    brands: brandsData?.allBrands || [],
    loading: categoriesLoading || brandsLoading
  };
};

export const useUpdateProductImages = () => {
  const [updateImages, { loading }] = useMutation(UPDATE_PRODUCT_IMAGES, {
    refetchQueries: [{ query: GET_PRODUCTS }]
  });

  return {
    updateProductImages: updateImages,
    loading
  };
};

export const useSetMainProductImage = () => {
  const [setMain, { loading }] = useMutation(SET_MAIN_PRODUCT_IMAGE, {
    refetchQueries: [{ query: GET_PRODUCTS }]
  });

  return {
    setMainProductImage: setMain,
    loading
  };
};

export const useDeleteProductImage = () => {
  const [deleteImage, { loading }] = useMutation(DELETE_PRODUCT_IMAGE, {
    refetchQueries: [{ query: GET_PRODUCTS }]
  });

  return {
    deleteProductImage: deleteImage,
    loading
  };
};
====================================================================================================
END OF FILE: webfrontend/src/hooks/useProducts.js
====================================================================================================


====================================================================================================
FILE: webfrontend/src/hooks/useUpload.js
====================================================================================================

// src/hooks/useUpload.js
import { useMutation } from '@apollo/client';
import toast from 'react-hot-toast';

import { 
  UPLOAD_FILE,
  UPLOAD_PRODUCT_IMAGE, 
  UPLOAD_PRODUCT_IMAGES, 
  REMOVE_PRODUCT_IMAGE 
} from '../graphql/upload';

// Hook for basic file upload
export const useUpload = () => {
  const [uploadMutation, { loading, error }] = useMutation(UPLOAD_FILE, {
    onCompleted: (data) => {
      if (data.upload) {
        toast.success('Upload file thành công!');
      }
    },
    onError: (error) => {
      console.error('Upload error:', error);
      toast.error('Lỗi upload file');
    }
  });

  const upload = async (file) => {
    try {
      const result = await uploadMutation({
        variables: { file }
      });
      return result.data.upload; // Returns filename
    } catch (err) {
      throw err;
    }
  };

  return { upload, loading, error };
};

// Hook for uploading single product image
export const useUploadProductImage = () => {
  const [uploadMutation, { loading, error }] = useMutation(UPLOAD_PRODUCT_IMAGE, {
    onCompleted: (data) => {
      if (data.uploadProductImage.success) {
        toast.success('Upload ảnh thành công!');
      } else {
        toast.error(data.uploadProductImage.message);
      }
    },
    onError: (error) => {
      console.error('Upload image error:', error);
      toast.error('Lỗi upload ảnh');
    }
  });

  const uploadImage = async (productId, file) => {
    try {
      const result = await uploadMutation({
        variables: { productId, file }
      });
      return result.data.uploadProductImage;
    } catch (err) {
      throw err;
    }
  };

  return { uploadImage, loading, error };
};

// Hook for uploading multiple product images
export const useUploadProductImages = () => {
  const [uploadMutation, { loading, error }] = useMutation(UPLOAD_PRODUCT_IMAGES, {
    onCompleted: (data) => {
      if (data.uploadProductImages.success) {
        toast.success(`Upload ${data.uploadProductImages.filename.split(', ').length} ảnh thành công!`);
      } else {
        toast.error(data.uploadProductImages.message);
      }
    },
    onError: (error) => {
      console.error('Upload images error:', error);
      toast.error('Lỗi upload ảnh');
    }
  });

  const uploadImages = async (productId, files) => {
    try {
      console.log('🖼️ Uploading images:', { productId, filesCount: files.length });
      
      const result = await uploadMutation({
        variables: { productId, files }
      });
      
      console.log('📦 Upload result:', result.data);
      return result.data.uploadProductImages;
    } catch (err) {
      console.error('❌ Upload images error:', err);
      throw err;
    }
  };

  return { uploadImages, loading, error };
};

// Hook for removing product image
export const useRemoveProductImage = () => {
  const [removeMutation, { loading, error }] = useMutation(REMOVE_PRODUCT_IMAGE, {
    onCompleted: () => {
      toast.success('Xóa ảnh thành công!');
    },
    onError: (error) => {
      console.error('Remove image error:', error);
      toast.error('Lỗi xóa ảnh');
    }
  });

  const removeImage = async (productId, filename) => {
    try {
      await removeMutation({
        variables: { productId, filename }
      });
      return true;
    } catch (err) {
      throw err;
    }
  };

  return { removeImage, loading, error };
};
====================================================================================================
END OF FILE: webfrontend/src/hooks/useUpload.js
====================================================================================================


====================================================================================================
FILE: webfrontend/src/lib/apollo.js
====================================================================================================

// src/lib/apollo.js
import { ApolloClient, InMemoryCache, from } from '@apollo/client';
import { setContext } from '@apollo/client/link/context';
import { onError } from '@apollo/client/link/error';
import createUploadLink from 'apollo-upload-client/createUploadLink.mjs';

// Upload link cho file uploads
const uploadLink = createUploadLink({
  uri: import.meta.env.VITE_GRAPHQL_URL || 'http://localhost:4000/',
});

// Auth link để thêm JWT token vào headers
const authLink = setContext((_, { headers }) => {
  const token = localStorage.getItem('smartshop_token');
  
  return {
    headers: {
      ...headers,
      authorization: token ? `Bearer ${token}` : "",
    }
  };
});

// Error link để handle errors
const errorLink = onError(({ graphQLErrors, networkError, operation, forward }) => {
  if (graphQLErrors) {
    graphQLErrors.forEach(({ message, locations, path }) => {
      console.error(`GraphQL error: Message: ${message}, Location: ${locations}, Path: ${path}`);
      
      // Nếu token expired, redirect to login
      if (message.includes('Authentication required') || message.includes('jwt')) {
        localStorage.removeItem('smartshop_token');
        localStorage.removeItem('smartshop_user');
        window.location.href = '/login';
      }
    });
  }

  if (networkError) {
    console.error(`Network error: ${networkError}`);
  }
});

// Apollo Client instance với upload support
export const client = new ApolloClient({
  link: from([errorLink, authLink, uploadLink]),
  cache: new InMemoryCache({
    typePolicies: {
      Query: {
        fields: {
          products: {
            keyArgs: ['condition', 'orderBy'],
            merge(existing = { nodes: [], totalCount: 0 }, incoming, { args }) {
              // If offset is 0 or not provided, replace the entire list
              if (!args?.offset || args.offset === 0) {
                return incoming;
              }
              
              // Otherwise, append new items
              return {
                ...incoming,
                nodes: [...(existing.nodes || []), ...incoming.nodes],
              };
            },
          },
        },
      },
    },
  }),
  defaultOptions: {
    watchQuery: {
      errorPolicy: 'all',
    },
    query: {
      errorPolicy: 'all',
    },
  },
});
====================================================================================================
END OF FILE: webfrontend/src/lib/apollo.js
====================================================================================================


====================================================================================================
FILE: webfrontend/src/graphql/auth.js
====================================================================================================

// src/graphql/auth.js
import { gql } from '@apollo/client';

// Login mutation
export const LOGIN_MUTATION = gql`
  mutation Login($input: LoginInput!) {
    login(input: $input) {
      success
      message
      data {
        jwt
        user {
          _id
          username
          email
          firstName
          lastName
          role
        }
      }
    }
  }
`;

// Register mutation
export const REGISTER_MUTATION = gql`
  mutation Register($input: RegisterInput!) {
    register(input: $input) {
      success
      message
      data {
        _id
        username
        email
        firstName
        lastName
        role
      }
    }
  }
`;

// Get current user query
export const ME_QUERY = gql`
  query Me {
    me {
      _id
      username
      email
      firstName
      lastName
      role
    }
  }
`;
====================================================================================================
END OF FILE: webfrontend/src/graphql/auth.js
====================================================================================================


====================================================================================================
FILE: webfrontend/src/graphql/products.js
====================================================================================================

// src/graphql/products.js
import { gql } from '@apollo/client';

// Fragment cho Product data
export const PRODUCT_FRAGMENT = gql`
  fragment ProductData on Product {
    _id
    name
    description
    price
    originalPrice
    sku
    images
    stock
    isActive
    isFeatured
    createdAt
    updatedAt
    category {
      _id
      name
      description
      image
      isActive
    }
    brand {
      _id
      name
      description
      logo
      banner
      website
      country
      foundedYear
      isActive
      isFeatured
    }
  }
`;

// Query để lấy danh sách products với pagination và filter
export const GET_PRODUCTS = gql`
  query GetProducts(
    $first: Int = 12,
    $offset: Int = 0,
    $orderBy: ProductsOrderBy = CREATED_DESC,
    $condition: ProductConditionInput
  ) {
    products(
      first: $first,
      offset: $offset,
      orderBy: $orderBy,
      condition: $condition
    ) {
      nodes {
        ...ProductData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query để lấy chi tiết 1 product
export const GET_PRODUCT = gql`
  query GetProduct($id: ID!) {
    product(id: $id) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query để search products
export const SEARCH_PRODUCTS = gql`
  query SearchProducts(
    $query: String!,
    $first: Int = 12,
    $offset: Int = 0,
    $orderBy: ProductsOrderBy = CREATED_DESC
  ) {
    searchProducts(
      query: $query,
      first: $first,
      offset: $offset,
      orderBy: $orderBy
    ) {
      nodes {
        ...ProductData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query để lấy featured products
export const GET_FEATURED_PRODUCTS = gql`
  query GetFeaturedProducts {
    featuredProducts {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query để lấy products theo category
export const GET_PRODUCTS_BY_CATEGORY = gql`
  query GetProductsByCategory($categoryId: ID!) {
    productsByCategory(categoryId: $categoryId) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query để lấy products theo brand
export const GET_PRODUCTS_BY_BRAND = gql`
  query GetProductsByBrand($brandId: ID!) {
    productsByBrand(brandId: $brandId) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query để lấy tất cả products (simple)
export const GET_ALL_PRODUCTS = gql`
  query GetAllProducts {
    allProducts {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Mutations cho Admin
export const CREATE_PRODUCT = gql`
  mutation CreateProduct($input: ProductInput!) {
    createProduct(input: $input) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

export const UPDATE_PRODUCT = gql`
  mutation UpdateProduct($id: ID!, $input: ProductInput!) {
    updateProduct(id: $id, input: $input) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

export const DELETE_PRODUCT = gql`
  mutation DeleteProduct($id: ID!) {
    deleteProduct(id: $id)
  }
`;

// Thêm input type cho filter condition
export const PRODUCT_CONDITION_INPUT = gql`
  input ProductConditionInput {
    # Text search
    name: String
    
    # Price range
    price: PriceRangeInput
    
    # Category & Brand
    category: ID
    brand: ID
    
    # Stock filter
    stock: StockRangeInput
    
    # Featured filter
    isFeatured: Boolean
  }

  input PriceRangeInput {
    min: Float
    max: Float
  }

  input StockRangeInput {
    min: Int
    max: Int
  }
`;

export const UPDATE_PRODUCT_IMAGES = gql`
  mutation UpdateProductImages($id: ID!, $images: [String!]!) {
    updateProductImages(id: $id, images: $images) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

export const SET_MAIN_PRODUCT_IMAGE = gql`
  mutation SetMainProductImage($id: ID!, $imageIndex: Int!) {
    setMainProductImage(id: $id, imageIndex: $imageIndex) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

export const DELETE_PRODUCT_IMAGE = gql`
  mutation DeleteProductImage($id: ID!, $imageIndex: Int!) {
    deleteProductImage(id: $id, imageIndex: $imageIndex) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;
====================================================================================================
END OF FILE: webfrontend/src/graphql/products.js
====================================================================================================


====================================================================================================
FILE: webfrontend/src/graphql/categories.js
====================================================================================================

// src/graphql/categories.js
import { gql } from '@apollo/client';

// Fragment cho Category data
export const CATEGORY_FRAGMENT = gql`
  fragment CategoryData on Category {
    _id
    name
    description
    image
    isActive
    createdAt
    updatedAt
  }
`;

// Query để lấy danh sách categories với pagination
export const GET_CATEGORIES = gql`
  query GetCategories(
    $first: Int = 20,
    $offset: Int = 0,
    $orderBy: CategoriesOrderBy = NAME_ASC,
    $condition: CategoryConditionInput
  ) {
    categories(
      first: $first,
      offset: $offset,
      orderBy: $orderBy,
      condition: $condition
    ) {
      nodes {
        ...CategoryData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${CATEGORY_FRAGMENT}
`;

// Query để lấy tất cả categories (simple)
export const GET_ALL_CATEGORIES = gql`
  query GetAllCategories {
    allCategories {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

// Query để lấy chi tiết 1 category
export const GET_CATEGORY = gql`
  query GetCategory($id: ID!) {
    category(id: $id) {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

// Mutations
export const CREATE_CATEGORY = gql`
  mutation CreateCategory($input: CategoryInput!) {
    createCategory(input: $input) {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

export const UPDATE_CATEGORY = gql`
  mutation UpdateCategory($id: ID!, $input: CategoryInput!) {
    updateCategory(id: $id, input: $input) {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

export const DELETE_CATEGORY = gql`
  mutation DeleteCategory($id: ID!) {
    deleteCategory(id: $id)
  }
`;
====================================================================================================
END OF FILE: webfrontend/src/graphql/categories.js
====================================================================================================


====================================================================================================
FILE: webfrontend/src/graphql/brands.js
====================================================================================================

// src/graphql/brands.js
import { gql } from '@apollo/client';

// Fragment cho Brand data
export const BRAND_FRAGMENT = gql`
  fragment BrandData on Brand {
    _id
    name
    slug
    description
    logo
    banner
    website
    country
    foundedYear
    isActive
    isFeatured
    createdAt
    updatedAt
    categories {
      _id
      name
    }
  }
`;

// Query để lấy danh sách brands với pagination
export const GET_BRANDS = gql`
  query GetBrands(
    $first: Int = 20,
    $offset: Int = 0,
    $orderBy: BrandsOrderBy = NAME_ASC,
    $condition: BrandConditionInput
  ) {
    brands(
      first: $first,
      offset: $offset,
      orderBy: $orderBy,
      condition: $condition
    ) {
      nodes {
        ...BrandData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query để lấy tất cả brands (simple)
export const GET_ALL_BRANDS = gql`
  query GetAllBrands {
    allBrands {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query để lấy featured brands
export const GET_FEATURED_BRANDS = gql`
  query GetFeaturedBrands {
    featuredBrands {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query để lấy chi tiết 1 brand
export const GET_BRAND = gql`
  query GetBrand($id: ID, $slug: String) {
    brand(id: $id, slug: $slug) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query để lấy brands theo category
export const GET_BRANDS_BY_CATEGORY = gql`
  query GetBrandsByCategory($categoryId: ID!) {
    brandsByCategory(categoryId: $categoryId) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Mutations
export const CREATE_BRAND = gql`
  mutation CreateBrand($input: BrandInput!) {
    createBrand(input: $input) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

export const UPDATE_BRAND = gql`
  mutation UpdateBrand($id: ID!, $input: BrandInput!) {
    updateBrand(id: $id, input: $input) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

export const DELETE_BRAND = gql`
  mutation DeleteBrand($id: ID!) {
    deleteBrand(id: $id)
  }
`;
====================================================================================================
END OF FILE: webfrontend/src/graphql/brands.js
====================================================================================================


====================================================================================================
FILE: webfrontend/src/graphql/upload.js
====================================================================================================

// src/graphql/upload.js
import { gql } from '@apollo/client';

// Upload single file mutation 
export const UPLOAD_FILE = gql`
  mutation Upload($file: File!) {
    upload(file: $file)
  }
`;

// Upload single image for product
export const UPLOAD_PRODUCT_IMAGE = gql`
  mutation UploadProductImage($productId: ID!, $file: File!) {
    uploadProductImage(productId: $productId, file: $file) {
      success
      message
      filename
      url
    }
  }
`;

// Upload multiple images for product
export const UPLOAD_PRODUCT_IMAGES = gql`
  mutation UploadProductImages($productId: ID!, $files: [File!]!) {
    uploadProductImages(productId: $productId, files: $files) {
      success
      message
      filename
      url
    }
  }
`;

// Remove image from product
export const REMOVE_PRODUCT_IMAGE = gql`
  mutation RemoveProductImage($productId: ID!, $filename: String!) {
    removeProductImage(productId: $productId, filename: $filename)
  }
`;
====================================================================================================
END OF FILE: webfrontend/src/graphql/upload.js
====================================================================================================


====================================================================================================
FILE: webfrontend/src/graphql/admin.js
====================================================================================================

// src/graphql/admin.js
import { gql } from '@apollo/client';

// Queries cho form data - lấy tất cả categories và brands
export const GET_ALL_CATEGORIES = gql`
  query GetAllCategoriesForAdmin {
    allCategories {
      _id
      name
      description
      isActive
    }
  }
`;

export const GET_ALL_BRANDS = gql`
  query GetAllBrandsForAdmin {
    allBrands {
      _id
      name
      description
      isActive
    }
  }
`;

// Query để lấy products với đầy đủ thông tin cho admin
export const GET_ADMIN_PRODUCTS = gql`
  query GetAdminProducts(
    $first: Int = 10,
    $offset: Int = 0,
    $orderBy: ProductsOrderBy = CREATED_DESC,
    $condition: ProductConditionInput
  ) {
    products(
      first: $first,
      offset: $offset,
      orderBy: $orderBy,
      condition: $condition
    ) {
      nodes {
        _id
        name
        description
        price
        originalPrice
        sku
        images
        stock
        isActive
        isFeatured
        createdAt
        updatedAt
        category {
          _id
          name
          description
        }
        brand {
          _id
          name
          description
        }
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
`;

// Query để lấy chi tiết 1 product cho admin
export const GET_ADMIN_PRODUCT = gql`
  query GetAdminProduct($id: ID!) {
    product(id: $id) {
      _id
      name
      description
      price
      originalPrice
      sku
      images
      stock
      isActive
      isFeatured
      createdAt
      updatedAt
      category {
        _id
        name
        description
      }
      brand {
        _id
        name
        description
      }
    }
  }
`;

// Mutations cho admin
export const ADMIN_CREATE_PRODUCT = gql`
  mutation AdminCreateProduct($input: ProductInput!) {
    createProduct(input: $input) {
      _id
      name
      description
      price
      originalPrice
      sku
      images
      stock
      isActive
      isFeatured
      category {
        _id
        name
      }
      brand {
        _id
        name
      }
      createdAt
      updatedAt
    }
  }
`;

export const ADMIN_UPDATE_PRODUCT = gql`
  mutation AdminUpdateProduct($id: ID!, $input: ProductInput!) {
    updateProduct(id: $id, input: $input) {
      _id
      name
      description
      price
      originalPrice
      sku
      images
      stock
      isActive
      isFeatured
      category {
        _id
        name
      }
      brand {
        _id
        name
      }
      createdAt
      updatedAt
    }
  }
`;

export const ADMIN_DELETE_PRODUCT = gql`
  mutation AdminDeleteProduct($id: ID!) {
    deleteProduct(id: $id)
  }
`;
====================================================================================================
END OF FILE: webfrontend/src/graphql/admin.js
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/common/Layout.jsx
====================================================================================================

// src/components/common/Layout.jsx
import React from 'react';
import Header from './Header';
import Footer from './Footer';

const Layout = ({ 
  children, 
  showHeader = true, 
  showFooter = true, 
  containerClass = "min-h-screen bg-gray-50",
  contentClass = "flex-1" 
}) => {
  return (
    <div className={containerClass}>
      {showHeader && <Header />}
      
      <main className={contentClass}>
        {children}
      </main>
      
      {showFooter && <Footer />}
    </div>
  );
};

// Specialized Layout variants
export const AuthLayout = ({ children }) => (
  <Layout 
    showHeader={false} 
    showFooter={false}
    containerClass="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50"
    contentClass="flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8"
  >
    {children}
  </Layout>
);

export const AdminLayout = ({ children }) => (
  <Layout 
    showFooter={false}
    containerClass="min-h-screen bg-gray-100"
    contentClass="flex-1"
  >
    {children}
  </Layout>
);

export const ShopLayout = ({ children }) => (
  <Layout 
    containerClass="min-h-screen bg-white"
    contentClass="flex-1"
  >
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {children}
    </div>
  </Layout>
);

export const CheckoutLayout = ({ children }) => (
  <Layout 
    showFooter={false}
    containerClass="min-h-screen bg-gray-50"
    contentClass="flex-1"
  >
    {children}
  </Layout>
);

export default Layout;
====================================================================================================
END OF FILE: webfrontend/src/components/common/Layout.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/common/Header.jsx
====================================================================================================

// src/components/common/Header.jsx
import React, { useState } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import {
  MagnifyingGlassIcon,
  ShoppingCartIcon,
  UserIcon,
  BellIcon,
  Bars3Icon,
  XMarkIcon,
  HeartIcon,
  Cog6ToothIcon,
  ArrowRightOnRectangleIcon,
  ChartBarIcon
} from '@heroicons/react/24/outline';

const Header = () => {
  const { user, logout, isAuthenticated } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const [showUserMenu, setShowUserMenu] = useState(false);
  const [showMobileMenu, setShowMobileMenu] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  const handleLogout = () => {
    if (window.confirm('Bạn có chắc muốn đăng xuất?')) {
      logout();
      setShowUserMenu(false);
    }
  };

  const handleSearch = (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      navigate(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
      setSearchQuery('');
    }
  };

  const getRoleColor = (role) => {
    switch (role) {
      case 'admin': return 'bg-red-100 text-red-800';
      case 'manager': return 'bg-blue-100 text-blue-800';
      case 'customer': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getRoleIcon = (role) => {
    switch (role) {
      case 'admin': return '👑';
      case 'manager': return '👨‍💼';
      case 'customer': return '👤';
      default: return '👤';
    }
  };

  const navigation = [
    { name: 'Trang chủ', href: '/', current: location.pathname === '/' },
    { name: 'Sản phẩm', href: '/products', current: location.pathname === '/products' },
    { name: 'Danh mục', href: '/categories', current: location.pathname === '/categories' },
    { name: 'Thương hiệu', href: '/brands', current: location.pathname === '/brands' },
  ];

  return (
    <header className="bg-white/95 backdrop-blur-md shadow-sm border-b border-gray-200/50 sticky top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo & Brand */}
          <div className="flex items-center">
            <Link to="/" className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">S</span>
              </div>
              <div className="hidden sm:block">
                <h1 className="text-xl font-bold text-gradient">SmartShop</h1>
              </div>
            </Link>
          </div>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex space-x-8">
            {navigation.map((item) => (
              <Link
                key={item.name}
                to={item.href}
                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                  item.current
                    ? 'bg-blue-100 text-blue-700'
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                }`}
              >
                {item.name}
              </Link>
            ))}
          </nav>

          {/* Search Bar */}
          <div className="hidden lg:flex flex-1 max-w-lg mx-8">
            <form onSubmit={handleSearch} className="w-full">
              <div className="relative">
                <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Tìm kiếm sản phẩm..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50/80 text-sm"
                />
              </div>
            </form>
          </div>

          {/* Right Section */}
          <div className="flex items-center space-x-4">
            {isAuthenticated ? (
              <>
                {/* Cart Icon */}
                <Link
                  to="/cart"
                  className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <ShoppingCartIcon className="h-5 w-5" />
                  <span className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                    3
                  </span>
                </Link>

                {/* Wishlist Icon */}
                <Link
                  to="/wishlist"
                  className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <HeartIcon className="h-5 w-5" />
                  <span className="absolute -top-1 -right-1 h-4 w-4 bg-pink-500 text-white text-xs rounded-full flex items-center justify-center">
                    5
                  </span>
                </Link>

                {/* Notifications */}
                <button className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors">
                  <BellIcon className="h-5 w-5" />
                  <span className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                    2
                  </span>
                </button>

                {/* User Menu */}
                <div className="relative">
                  <button
                    onClick={() => setShowUserMenu(!showUserMenu)}
                    className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 transition-colors"
                  >
                    <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
                      {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}
                    </div>
                    <div className="hidden md:block text-left">
                      <p className="text-sm font-medium text-gray-900">
                        {user?.firstName} {user?.lastName}
                      </p>
                    </div>
                  </button>

                  {/* User Dropdown */}
                  {showUserMenu && (
                    <div className="absolute right-0 mt-2 w-64 bg-white rounded-xl shadow-lg border border-gray-200 py-2 z-50">
                      {/* User Info */}
                      <div className="px-4 py-3 border-b border-gray-100">
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white font-semibold">
                            {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}
                          </div>
                          <div className="flex-1">
                            <p className="font-medium text-gray-900 text-sm">
                              {user?.firstName} {user?.lastName}
                            </p>
                            <p className="text-xs text-gray-500">{user?.email}</p>
                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${getRoleColor(user?.role)}`}>
                              {getRoleIcon(user?.role)} {user?.role}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* Menu Items */}
                      <div className="py-1">
                        <Link
                          to="/profile"
                          className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                          onClick={() => setShowUserMenu(false)}
                        >
                          <UserIcon className="h-4 w-4 mr-3" />
                          Thông tin cá nhân
                        </Link>
                        <Link
                          to="/orders"
                          className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                          onClick={() => setShowUserMenu(false)}
                        >
                          <span className="w-4 h-4 mr-3 text-center">📦</span>
                          Đơn hàng của tôi
                        </Link>
                        <Link
                          to="/settings"
                          className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                          onClick={() => setShowUserMenu(false)}
                        >
                          <Cog6ToothIcon className="h-4 w-4 mr-3" />
                          Cài đặt
                        </Link>
                        {(user?.role === 'admin' || user?.role === 'manager') && (
                          <Link
                            to="/admin"
                            className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                            onClick={() => setShowUserMenu(false)}
                          >
                            <ChartBarIcon className="h-4 w-4 mr-3" />
                            Quản trị
                          </Link>
                        )}
                      </div>

                      {/* Logout */}
                      <div className="border-t border-gray-100 py-1">
                        <button
                          onClick={handleLogout}
                          className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                        >
                          <ArrowRightOnRectangleIcon className="h-4 w-4 mr-3" />
                          Đăng xuất
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </>
            ) : (
              /* Auth Links */
              <div className="flex items-center space-x-4">
                <Link
                  to="/login"
                  className="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
                >
                  Đăng nhập
                </Link>
                <Link
                  to="/register"
                  className="btn btn-primary"
                >
                  Đăng ký
                </Link>
              </div>
            )}

            {/* Mobile menu button */}
            <button
              onClick={() => setShowMobileMenu(!showMobileMenu)}
              className="md:hidden p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg"
            >
              {showMobileMenu ? (
                <XMarkIcon className="h-5 w-5" />
              ) : (
                <Bars3Icon className="h-5 w-5" />
              )}
            </button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {showMobileMenu && (
          <div className="md:hidden border-t border-gray-200 py-4">
            {/* Mobile Search */}
            <div className="mb-4">
              <form onSubmit={handleSearch}>
                <div className="relative">
                  <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <input
                    type="text"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="Tìm kiếm..."
                    className="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50"
                  />
                </div>
              </form>
            </div>

            {/* Mobile Menu Items */}
            <div className="space-y-2">
              {navigation.map((item) => (
                <Link
                  key={item.name}
                  to={item.href}
                  className={`block px-3 py-2 rounded-md text-base font-medium ${
                    item.current
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                  }`}
                  onClick={() => setShowMobileMenu(false)}
                >
                  {item.name}
                </Link>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Click outside to close menus */}
      {(showUserMenu || showMobileMenu) && (
        <div 
          className="fixed inset-0 z-40" 
          onClick={() => {
            setShowUserMenu(false);
            setShowMobileMenu(false);
          }}
        />
      )}
    </header>
  );
};

export default Header;
====================================================================================================
END OF FILE: webfrontend/src/components/common/Header.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/common/Sidebar.jsx
====================================================================================================

// src/components/common/Sidebar.jsx - Complete updated version
import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import {
  HomeIcon,
  CubeIcon,
  TagIcon,
  BuildingStorefrontIcon,
  ShoppingCartIcon,
  UserGroupIcon,
  ChartBarIcon,
  Cog6ToothIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  ChevronDownIcon,
  ChevronUpIcon
} from '@heroicons/react/24/outline';

const Sidebar = ({ 
  isOpen = true, 
  onToggle, 
  type = 'admin'
}) => {
  const location = useLocation();
  const { user } = useAuth();
  const [expandedMenus, setExpandedMenus] = useState({});

  const toggleSubmenu = (menuKey) => {
    setExpandedMenus(prev => ({
      ...prev,
      [menuKey]: !prev[menuKey]
    }));
  };

  // Admin Navigation - Updated
  const adminNavigation = [
    {
      name: 'Dashboard',
      href: '/admin',
      icon: HomeIcon,
      current: location.pathname === '/admin'
    },
    {
      name: 'Sản phẩm',
      icon: CubeIcon,
      children: [
        { name: 'Quản lý sản phẩm', href: '/admin/products' },
        { name: 'Thêm sản phẩm', href: '/admin/products/create' },
        { name: 'Quản lý kho', href: '/admin/inventory' },
        { name: 'Import/Export', href: '/admin/products/import' },
      ]
    },
    {
      name: 'Danh mục',
      icon: TagIcon,
      children: [
        { name: 'Tất cả danh mục', href: '/admin/categories' },
        { name: 'Thêm danh mục', href: '/admin/categories/create' },
      ]
    },
    {
      name: 'Thương hiệu',
      icon: BuildingStorefrontIcon,
      children: [
        { name: 'Tất cả thương hiệu', href: '/admin/brands' },
        { name: 'Thêm thương hiệu', href: '/admin/brands/create' },
      ]
    },
    {
      name: 'Đơn hàng',
      href: '/admin/orders',
      icon: ShoppingCartIcon,
      current: location.pathname.startsWith('/admin/orders')
    },
    {
      name: 'Người dùng',
      href: '/admin/users',
      icon: UserGroupIcon,
      current: location.pathname.startsWith('/admin/users')
    },
    {
      name: 'Báo cáo',
      icon: ChartBarIcon,
      children: [
        { name: 'Doanh thu', href: '/admin/reports/revenue' },
        { name: 'Sản phẩm bán chạy', href: '/admin/reports/bestsellers' },
        { name: 'Khách hàng', href: '/admin/reports/customers' },
        { name: 'Tồn kho', href: '/admin/reports/inventory' },
      ]
    },
    {
      name: 'Cài đặt',
      href: '/admin/settings',
      icon: Cog6ToothIcon,
      current: location.pathname.startsWith('/admin/settings')
    },
  ];

  // Filter Sidebar (cho trang products)
  const FilterSidebar = () => (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
      <h3 className="font-semibold text-gray-900 mb-4">Bộ lọc</h3>
      
      {/* Price Range */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-700 mb-3">Khoảng giá</h4>
        <div className="space-y-2">
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Dưới 1 triệu</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">1 - 5 triệu</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">5 - 10 triệu</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Trên 10 triệu</span>
          </label>
        </div>
      </div>

      {/* Categories */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-700 mb-3">Danh mục</h4>
        <div className="space-y-2">
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Điện thoại</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Laptop</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Tablet</span>
          </label>
        </div>
      </div>

      {/* Brands */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-700 mb-3">Thương hiệu</h4>
        <div className="space-y-2">
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Apple</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Samsung</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Xiaomi</span>
          </label>
        </div>
      </div>

      {/* Rating */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-700 mb-3">Đánh giá</h4>
        <div className="space-y-2">
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">⭐⭐⭐⭐⭐ 5 sao</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">⭐⭐⭐⭐ 4 sao trở lên</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">⭐⭐⭐ 3 sao trở lên</span>
          </label>
        </div>
      </div>

      <button className="w-full btn btn-primary">
        Áp dụng bộ lọc
      </button>
    </div>
  );

  // Admin Sidebar
  const AdminSidebar = () => (
    <div className={`${isOpen ? 'w-64' : 'w-16'} bg-white border-r border-gray-200 transition-all duration-300 flex flex-col`}>
      {/* Header */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          {isOpen && (
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">S</span>
              </div>
              <div>
                <h2 className="font-semibold text-gray-900">Admin Panel</h2>
                <p className="text-xs text-gray-500">SmartShop</p>
              </div>
            </div>
          )}
          
          {onToggle && (
            <button
              onClick={onToggle}
              className="p-1 rounded-lg hover:bg-gray-100 transition-colors"
            >
              {isOpen ? (
                <ChevronLeftIcon className="h-4 w-4 text-gray-500" />
              ) : (
                <ChevronRightIcon className="h-4 w-4 text-gray-500" />
              )}
            </button>
          )}
        </div>
      </div>

      {/* User Info */}
      {isOpen && (
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
              {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}
            </div>
            <div className="flex-1 min-w-0">
              <p className="font-medium text-gray-900 text-sm truncate">
                {user?.firstName} {user?.lastName}
              </p>
              <p className="text-xs text-gray-500 truncate">{user?.email}</p>
              <span className="inline-block px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full mt-1">
                {user?.role}
              </span>
            </div>
          </div>
        </div>
      )}

      {/* Navigation */}
      <nav className="flex-1 overflow-y-auto py-4">
        <div className="space-y-1 px-2">
          {adminNavigation.map((item) => {
            if (item.children) {
              const isExpanded = expandedMenus[item.name];
              return (
                <div key={item.name}>
                  <button
                    onClick={() => toggleSubmenu(item.name)}
                    className={`w-full flex items-center justify-between px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                      isExpanded 
                        ? 'bg-gray-100 text-gray-900' 
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                    }`}
                  >
                    <div className="flex items-center">
                      <item.icon className="h-5 w-5 mr-3" />
                      {isOpen && <span>{item.name}</span>}
                    </div>
                    {isOpen && (
                      isExpanded ? (
                        <ChevronUpIcon className="h-4 w-4" />
                      ) : (
                        <ChevronDownIcon className="h-4 w-4" />
                      )
                    )}
                  </button>
                  
                  {isOpen && isExpanded && (
                    <div className="mt-1 space-y-1">
                      {item.children.map((child) => (
                        <Link
                          key={child.name}
                          to={child.href}
                          className={`block px-6 py-2 text-sm rounded-lg transition-colors ${
                            location.pathname === child.href
                              ? 'bg-blue-100 text-blue-700'
                              : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                          }`}
                        >
                          {child.name}
                        </Link>
                      ))}
                    </div>
                  )}
                </div>
              );
            }

            return (
              <Link
                key={item.name}
                to={item.href}
                className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                  item.current
                    ? 'bg-blue-100 text-blue-700'
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                }`}
              >
                <item.icon className="h-5 w-5 mr-3" />
                {isOpen && <span>{item.name}</span>}
              </Link>
            );
          })}
        </div>
      </nav>

      {/* Footer */}
      {isOpen && (
        <div className="p-4 border-t border-gray-200">
          <div className="text-xs text-gray-500 text-center">
            SmartShop Admin v1.0.0
          </div>
        </div>
      )}
    </div>
  );

  // Render based on type
  switch (type) {
    case 'filter':
      return <FilterSidebar />;
    case 'admin':
      return <AdminSidebar />;
    default:
      return <AdminSidebar />;
  }
};

export default Sidebar;
====================================================================================================
END OF FILE: webfrontend/src/components/common/Sidebar.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/common/Footer.jsx
====================================================================================================

// src/components/common/Footer.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const Footer = () => {
  const currentYear = new Date().getFullYear();

  const footerSections = [
    {
      title: 'Sản phẩm',
      links: [
        { name: 'Tất cả sản phẩm', href: '/products' },
        { name: 'Sản phẩm mới', href: '/products?sort=newest' },
        { name: 'Sản phẩm bán chạy', href: '/products?sort=bestseller' },
        { name: 'Sản phẩm giảm giá', href: '/products?discount=true' },
      ]
    },
    {
      title: 'Danh mục',
      links: [
        { name: 'Điện thoại', href: '/categories/phones' },
        { name: 'Laptop', href: '/categories/laptops' },
        { name: 'Tablet', href: '/categories/tablets' },
        { name: 'Phụ kiện', href: '/categories/accessories' },
      ]
    },
    {
      title: 'Hỗ trợ',
      links: [
        { name: 'Liên hệ', href: '/contact' },
        { name: 'Hướng dẫn mua hàng', href: '/help/shopping' },
        { name: 'Chính sách đổi trả', href: '/policies/return' },
        { name: 'Bảo hành', href: '/policies/warranty' },
      ]
    },
    {
      title: 'Công ty',
      links: [
        { name: 'Về chúng tôi', href: '/about' },
        { name: 'Tuyển dụng', href: '/careers' },
        { name: 'Tin tức', href: '/news' },
        { name: 'Đối tác', href: '/partners' },
      ]
    }
  ];

  const socialLinks = [
    { name: 'Facebook', href: '#', icon: '📘' },
    { name: 'Instagram', href: '#', icon: '📷' },
    { name: 'Twitter', href: '#', icon: '🐦' },
    { name: 'YouTube', href: '#', icon: '📺' },
  ];

  return (
    <footer className="bg-gray-900 text-white">
      {/* Main Footer */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8">
          {/* Brand Section */}
          <div className="lg:col-span-1">
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl flex items-center justify-center">
                <span className="text-white font-bold text-lg">S</span>
              </div>
              <div>
                <h3 className="text-xl font-bold">SmartShop</h3>
                <p className="text-gray-400 text-sm">E-commerce Platform</p>
              </div>
            </div>
            <p className="text-gray-400 text-sm mb-6">
              Nền tảng thương mại điện tử hàng đầu Việt Nam, mang đến trải nghiệm mua sắm tuyệt vời với hàng triệu sản phẩm chất lượng.
            </p>
            
            {/* Social Links */}
            <div className="flex space-x-4">
              {socialLinks.map((social) => (
                <a
                  key={social.name}
                  href={social.href}
                  className="w-10 h-10 bg-gray-800 rounded-lg flex items-center justify-center hover:bg-gray-700 transition-colors"
                  title={social.name}
                >
                  <span className="text-lg">{social.icon}</span>
                </a>
              ))}
            </div>
          </div>

          {/* Footer Sections */}
          {footerSections.map((section) => (
            <div key={section.title}>
              <h4 className="font-semibold text-white mb-4">{section.title}</h4>
              <ul className="space-y-3">
                {section.links.map((link) => (
                  <li key={link.name}>
                    <Link
                      to={link.href}
                      className="text-gray-400 hover:text-white transition-colors text-sm"
                    >
                      {link.name}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>

        {/* Newsletter */}
        <div className="border-t border-gray-800 mt-12 pt-8">
          <div className="lg:flex lg:items-center lg:justify-between">
            <div className="lg:w-1/2">
              <h4 className="text-lg font-semibold text-white mb-2">
                Đăng ký nhận tin khuyến mãi
              </h4>
              <p className="text-gray-400 text-sm">
                Nhận thông tin về sản phẩm mới và ưu đãi đặc biệt qua email
              </p>
            </div>
            <div className="mt-4 lg:mt-0 lg:w-1/2 lg:ml-8">
              <form className="sm:flex">
                <input
                  type="email"
                  placeholder="Nhập email của bạn"
                  className="w-full px-4 py-3 rounded-lg bg-gray-800 border border-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <button
                  type="submit"
                  className="mt-3 sm:mt-0 sm:ml-3 w-full sm:w-auto btn btn-primary"
                >
                  Đăng ký
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>

      {/* Bottom Footer */}
      <div className="border-t border-gray-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="md:flex md:items-center md:justify-between">
            <div className="flex flex-col md:flex-row md:items-center space-y-2 md:space-y-0 md:space-x-6">
              <p className="text-gray-400 text-sm">
                © {currentYear} SmartShop. Tất cả quyền được bảo lưu.
              </p>
              <div className="flex space-x-6">
                <Link to="/policies/privacy" className="text-gray-400 hover:text-white text-sm transition-colors">
                  Chính sách bảo mật
                </Link>
                <Link to="/policies/terms" className="text-gray-400 hover:text-white text-sm transition-colors">
                  Điều khoản sử dụng
                </Link>
                <Link to="/policies/cookie" className="text-gray-400 hover:text-white text-sm transition-colors">
                  Chính sách Cookie
                </Link>
              </div>
            </div>
            
            <div className="mt-4 md:mt-0">
              <div className="flex items-center space-x-4">
                <span className="text-gray-400 text-sm">Phương thức thanh toán:</span>
                <div className="flex space-x-2">
                  <div className="w-8 h-6 bg-gradient-to-r from-blue-600 to-blue-800 rounded flex items-center justify-center">
                    <span className="text-white text-xs font-bold">V</span>
                  </div>
                  <div className="w-8 h-6 bg-gradient-to-r from-red-600 to-orange-600 rounded flex items-center justify-center">
                    <span className="text-white text-xs font-bold">MC</span>
                  </div>
                  <div className="w-8 h-6 bg-gradient-to-r from-purple-600 to-pink-600 rounded flex items-center justify-center">
                    <span className="text-white text-xs font-bold">PP</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
====================================================================================================
END OF FILE: webfrontend/src/components/common/Footer.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/auth/LoginForm.jsx
====================================================================================================

// src/components/auth/LoginForm.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { EyeIcon, EyeSlashIcon, UserIcon, LockClosedIcon } from '@heroicons/react/24/outline';
import { useLogin } from '../../hooks/useAuth';

const LoginForm = () => {
  const [formData, setFormData] = useState({
    username: '',
    password: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState({});

  const { login, loading } = useLogin();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.username.trim()) {
      newErrors.username = 'Tên đăng nhập là bắt buộc';
    }

    if (!formData.password) {
      newErrors.password = 'Mật khẩu là bắt buộc';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Mật khẩu phải có ít nhất 6 ký tự';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    await login(formData);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        {/* Header */}
        <div className="text-center">
          <div className="flex justify-center mb-6">
            <div className="w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl flex items-center justify-center">
              <span className="text-white font-bold text-2xl">S</span>
            </div>
          </div>
          <h2 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Chào mừng trở lại!
          </h2>
          <p className="mt-2 text-gray-600">
            Đăng nhập vào tài khoản SmartShop của bạn
          </p>
        </div>

        {/* Form */}
        <div className="bg-white rounded-2xl shadow-xl p-8 border border-gray-100">
          <form className="space-y-6" onSubmit={handleSubmit}>
            {/* Username Field */}
            <div className="space-y-2">
              <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                Tên đăng nhập
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <UserIcon className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="username"
                  name="username"
                  type="text"
                  autoComplete="username"
                  required
                  className={`appearance-none relative block w-full pl-10 pr-3 py-3 border ${
                    errors.username ? 'border-red-300' : 'border-gray-300'
                  } rounded-xl placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors`}
                  placeholder="Nhập tên đăng nhập"
                  value={formData.username}
                  onChange={handleChange}
                />
              </div>
              {errors.username && (
                <p className="text-red-500 text-sm flex items-center">
                  <span className="mr-1">⚠️</span>
                  {errors.username}
                </p>
              )}
            </div>

            {/* Password Field */}
            <div className="space-y-2">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Mật khẩu
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <LockClosedIcon className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="password"
                  name="password"
                  type={showPassword ? 'text' : 'password'}
                  autoComplete="current-password"
                  required
                  className={`appearance-none relative block w-full pl-10 pr-12 py-3 border ${
                    errors.password ? 'border-red-300' : 'border-gray-300'
                  } rounded-xl placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors`}
                  placeholder="Nhập mật khẩu"
                  value={formData.password}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeSlashIcon className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                  ) : (
                    <EyeIcon className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                  )}
                </button>
              </div>
              {errors.password && (
                <p className="text-red-500 text-sm flex items-center">
                  <span className="mr-1">⚠️</span>
                  {errors.password}
                </p>
              )}
            </div>

            {/* Remember & Forgot */}
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-700">
                  Ghi nhớ đăng nhập
                </label>
              </div>

              <div className="text-sm">
                <a href="#" className="font-medium text-blue-600 hover:text-blue-500 transition-colors">
                  Quên mật khẩu?
                </a>
              </div>
            </div>

            {/* Submit Button */}
            <div>
              <button
                type="submit"
                disabled={loading}
                className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-xl text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-[1.02]"
              >
                {loading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Đang đăng nhập...
                  </>
                ) : (
                  'Đăng nhập'
                )}
              </button>
            </div>

            {/* Register Link */}
            <div className="text-center">
              <p className="text-sm text-gray-600">
                Chưa có tài khoản?{' '}
                <Link
                  to="/register"
                  className="font-medium text-blue-600 hover:text-blue-500 transition-colors"
                >
                  Tạo tài khoản mới
                </Link>
              </p>
            </div>
          </form>
        </div>

        {/* Demo Accounts */}
        <div className="bg-blue-50 rounded-xl p-4 border border-blue-200">
          <h3 className="text-sm font-medium text-blue-900 mb-2">🎯 Tài khoản demo:</h3>
          <div className="text-xs text-blue-700 space-y-1">
            <p><strong>Admin:</strong> admin / 1234</p>
            <p><strong>Manager:</strong> john / 1234</p>
            <p><strong>Customer:</strong> alice / 1234</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginForm;
====================================================================================================
END OF FILE: webfrontend/src/components/auth/LoginForm.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/auth/RegisterForm.jsx
====================================================================================================

// src/components/auth/RegisterForm.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline';
import { useRegister } from '../../hooks/useAuth';

const RegisterForm = () => {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
    firstName: '',
    lastName: '',
    phone: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [errors, setErrors] = useState({});

  const { register, loading } = useRegister();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    // Username validation
    if (!formData.username.trim()) {
      newErrors.username = 'Tên đăng nhập là bắt buộc';
    } else if (formData.username.length < 3) {
      newErrors.username = 'Tên đăng nhập phải có ít nhất 3 ký tự';
    }

    // Email validation
    if (!formData.email.trim()) {
      newErrors.email = 'Email là bắt buộc';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email không hợp lệ';
    }

    // Password validation
    if (!formData.password) {
      newErrors.password = 'Mật khẩu là bắt buộc';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Mật khẩu phải có ít nhất 6 ký tự';
    }

    // Confirm password validation
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'Xác nhận mật khẩu là bắt buộc';
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Mật khẩu xác nhận không khớp';
    }

    // First name validation
    if (!formData.firstName.trim()) {
      newErrors.firstName = 'Họ là bắt buộc';
    }

    // Last name validation
    if (!formData.lastName.trim()) {
      newErrors.lastName = 'Tên là bắt buộc';
    }

    // Phone validation (optional)
    if (formData.phone && !/^[0-9]{10,11}$/.test(formData.phone)) {
      newErrors.phone = 'Số điện thoại không hợp lệ';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    // Remove confirmPassword before sending
    const { confirmPassword, ...registerData } = formData;
    await register(registerData);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Tạo tài khoản SmartShop
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Hoặc{' '}
            <Link
              to="/login"
              className="font-medium text-blue-600 hover:text-blue-500"
            >
              đăng nhập tài khoản có sẵn
            </Link>
          </p>
        </div>

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            {/* Username Field */}
            <div className="form-group">
              <label htmlFor="username" className="form-label">
                Tên đăng nhập *
              </label>
              <input
                id="username"
                name="username"
                type="text"
                autoComplete="username"
                required
                className={`input ${errors.username ? 'input-error' : ''}`}
                placeholder="Nhập tên đăng nhập"
                value={formData.username}
                onChange={handleChange}
              />
              {errors.username && (
                <p className="form-error">{errors.username}</p>
              )}
            </div>

            {/* Email Field */}
            <div className="form-group">
              <label htmlFor="email" className="form-label">
                Email *
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                className={`input ${errors.email ? 'input-error' : ''}`}
                placeholder="Nhập email"
                value={formData.email}
                onChange={handleChange}
              />
              {errors.email && (
                <p className="form-error">{errors.email}</p>
              )}
            </div>

            {/* First Name & Last Name */}
            <div className="grid grid-cols-2 gap-4">
              <div className="form-group">
                <label htmlFor="firstName" className="form-label">
                  Họ *
                </label>
                <input
                  id="firstName"
                  name="firstName"
                  type="text"
                  autoComplete="given-name"
                  required
                  className={`input ${errors.firstName ? 'input-error' : ''}`}
                  placeholder="Họ"
                  value={formData.firstName}
                  onChange={handleChange}
                />
                {errors.firstName && (
                  <p className="form-error">{errors.firstName}</p>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="lastName" className="form-label">
                  Tên *
                </label>
                <input
                  id="lastName"
                  name="lastName"
                  type="text"
                  autoComplete="family-name"
                  required
                  className={`input ${errors.lastName ? 'input-error' : ''}`}
                  placeholder="Tên"
                  value={formData.lastName}
                  onChange={handleChange}
                />
                {errors.lastName && (
                  <p className="form-error">{errors.lastName}</p>
                )}
              </div>
            </div>

            {/* Phone Field */}
            <div className="form-group">
              <label htmlFor="phone" className="form-label">
                Số điện thoại
              </label>
              <input
                id="phone"
                name="phone"
                type="tel"
                autoComplete="tel"
                className={`input ${errors.phone ? 'input-error' : ''}`}
                placeholder="Nhập số điện thoại (tùy chọn)"
                value={formData.phone}
                onChange={handleChange}
              />
              {errors.phone && (
                <p className="form-error">{errors.phone}</p>
              )}
            </div>

            {/* Password Field */}
            <div className="form-group">
              <label htmlFor="password" className="form-label">
                Mật khẩu *
              </label>
              <div className="relative">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? 'text' : 'password'}
                  autoComplete="new-password"
                  required
                  className={`input pr-10 ${errors.password ? 'input-error' : ''}`}
                  placeholder="Nhập mật khẩu"
                  value={formData.password}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeSlashIcon className="h-5 w-5 text-gray-400" />
                  ) : (
                    <EyeIcon className="h-5 w-5 text-gray-400" />
                  )}
                </button>
              </div>
              {errors.password && (
                <p className="form-error">{errors.password}</p>
              )}
            </div>

            {/* Confirm Password Field */}
            <div className="form-group">
              <label htmlFor="confirmPassword" className="form-label">
                Xác nhận mật khẩu *
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? 'text' : 'password'}
                  autoComplete="new-password"
                  required
                  className={`input pr-10 ${errors.confirmPassword ? 'input-error' : ''}`}
                  placeholder="Nhập lại mật khẩu"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                >
                  {showConfirmPassword ? (
                    <EyeSlashIcon className="h-5 w-5 text-gray-400" />
                  ) : (
                    <EyeIcon className="h-5 w-5 text-gray-400" />
                  )}
                </button>
              </div>
              {errors.confirmPassword && (
                <p className="form-error">{errors.confirmPassword}</p>
              )}
            </div>
          </div>

          {/* Terms Agreement */}
          <div className="flex items-center">
            <input
              id="agree-terms"
              name="agree-terms"
              type="checkbox"
              required
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="agree-terms" className="ml-2 block text-sm text-gray-900">
              Tôi đồng ý với{' '}
              <a href="#" className="text-blue-600 hover:text-blue-500">
                Điều khoản dịch vụ
              </a>{' '}
              và{' '}
              <a href="#" className="text-blue-600 hover:text-blue-500">
                Chính sách bảo mật
              </a>
            </label>
          </div>

          {/* Submit Button */}
          <div>
            <button
              type="submit"
              disabled={loading}
              className="btn btn-primary w-full flex justify-center items-center"
            >
              {loading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Đang tạo tài khoản...
                </>
              ) : (
                'Tạo tài khoản'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default RegisterForm;
====================================================================================================
END OF FILE: webfrontend/src/components/auth/RegisterForm.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/auth/ProtectedRoute.jsx
====================================================================================================

// src/components/auth/ProtectedRoute.jsx
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const ProtectedRoute = ({ 
  children, 
  requireAuth = true, 
  requiredRole = null,
  fallback = null 
}) => {
  const { isAuthenticated, user, loading } = useAuth();
  const location = useLocation();

  // Show loading while checking auth
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  // If authentication is required but user is not authenticated
  if (requireAuth && !isAuthenticated) {
    // Redirect to login with return url
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // If user is authenticated but shouldn't be (e.g., login page)
  if (!requireAuth && isAuthenticated) {
    // Redirect based on user role
    const redirectPath = user?.role === 'admin' || user?.role === 'manager' 
      ? '/admin' 
      : '/';
    return <Navigate to={redirectPath} replace />;
  }

  // Check role-based access
  if (requireAuth && requiredRole) {
    if (Array.isArray(requiredRole)) {
      // Multiple roles allowed
      if (!requiredRole.includes(user?.role)) {
        return fallback || (
          <div className="min-h-screen flex items-center justify-center">
            <div className="text-center">
              <h1 className="text-2xl font-bold text-gray-900 mb-4">
                Không có quyền truy cập
              </h1>
              <p className="text-gray-600 mb-6">
                Bạn không có quyền truy cập vào trang này.
              </p>
              <button
                onClick={() => window.history.back()}
                className="btn btn-primary"
              >
                Quay lại
              </button>
            </div>
          </div>
        );
      }
    } else {
      // Single role required
      if (user?.role !== requiredRole) {
        return fallback || (
          <div className="min-h-screen flex items-center justify-center">
            <div className="text-center">
              <h1 className="text-2xl font-bold text-gray-900 mb-4">
                Không có quyền truy cập
              </h1>
              <p className="text-gray-600 mb-6">
                Trang này yêu cầu quyền {requiredRole}.
              </p>
              <button
                onClick={() => window.history.back()}
                className="btn btn-primary"
              >
                Quay lại
              </button>
            </div>
          </div>
        );
      }
    }
  }

  // All checks passed, render children
  return children;
};

// Convenience components for different access levels
export const AdminRoute = ({ children, ...props }) => (
  <ProtectedRoute requiredRole="admin" {...props}>
    {children}
  </ProtectedRoute>
);

export const ManagerRoute = ({ children, ...props }) => (
  <ProtectedRoute requiredRole={['admin', 'manager']} {...props}>
    {children}
  </ProtectedRoute>
);

export const CustomerRoute = ({ children, ...props }) => (
  <ProtectedRoute requiredRole="customer" {...props}>
    {children}
  </ProtectedRoute>
);

export const GuestRoute = ({ children, ...props }) => (
  <ProtectedRoute requireAuth={false} {...props}>
    {children}
  </ProtectedRoute>
);

export default ProtectedRoute;
====================================================================================================
END OF FILE: webfrontend/src/components/auth/ProtectedRoute.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/products/ProductCard.jsx
====================================================================================================

// src/components/products/ProductCard.jsx - Modern & Beautiful Design
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { 
  HeartIcon, 
  ShoppingCartIcon, 
  EyeIcon,
  StarIcon,
  SparklesIcon,
  TagIcon,
  TruckIcon
} from '@heroicons/react/24/outline';
import { 
  HeartIcon as HeartSolidIcon,
  StarIcon as StarSolidIcon 
} from '@heroicons/react/24/solid';
import { formatPrice, getImageUrl, calculateDiscountPercentage } from '../../lib/utils';

const ProductCard = ({ 
  product, 
  viewMode = 'grid',
  showQuickActions = true,
  className = '' 
}) => {
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [imageError, setImageError] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  if (!product) return null;

  const {
    _id,
    name,
    description,
    price,
    originalPrice,
    images = [],
    stock = 0,
    category,
    brand,
    isFeatured
  } = product;

  // Safe fallbacks for missing data
  const categoryName = category?.name || 'Chưa phân loại';
  const brandName = brand?.name || 'Không xác định';
  const productStock = typeof stock === 'number' ? stock : 0;
  const productPrice = typeof price === 'number' ? price : 0;

  const discount = originalPrice && originalPrice > productPrice 
    ? calculateDiscountPercentage(originalPrice, productPrice) 
    : 0;

  const mainImage = images.length > 0 ? getImageUrl(images[0]) : '/placeholder-product.jpg';
  const hoverImage = images.length > 1 ? getImageUrl(images[1]) : mainImage;

  // Fixed 5-star rating
  const rating = 5;
  const reviewCount = 999;

  const handleAddToWishlist = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsWishlisted(!isWishlisted);
  };

  const handleAddToCart = (e) => {
    e.preventDefault();
    e.stopPropagation();
    console.log('Add to cart:', product);
  };

  const handleQuickView = (e) => {
    e.preventDefault();
    e.stopPropagation();
    console.log('Quick view:', product);
  };

  // Get stock status
  const getStockStatus = () => {
    if (productStock === 0) return { text: 'Hết hàng', color: 'bg-red-100 text-red-700', icon: '❌' };
    if (productStock <= 5) return { text: `Chỉ còn ${productStock}`, color: 'bg-orange-100 text-orange-700', icon: '⚠️' };
    if (productStock <= 20) return { text: 'Còn ít', color: 'bg-yellow-100 text-yellow-700', icon: '⏰' };
    return { text: 'Còn hàng', color: 'bg-green-100 text-green-700', icon: '✅' };
  };

  const stockStatus = getStockStatus();

  // Grid view layout
  if (viewMode === 'grid') {
    return (
      <div className={`group bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden hover:shadow-xl hover:-translate-y-1 transition-all duration-300 ${className}`}>
        {/* Image Container */}
        <Link 
          to={`/products/${_id}`} 
          className="block relative overflow-hidden bg-gray-50"
          onMouseEnter={() => setIsHovered(true)}
          onMouseLeave={() => setIsHovered(false)}
        >
          <div className="aspect-square relative">
            {/* Main Image */}
            <img
              src={imageError ? '/placeholder-product.jpg' : mainImage}
              alt={name}
              className={`absolute inset-0 w-full h-full object-cover transition-all duration-500 ${
                isHovered && images.length > 1 ? 'opacity-0 scale-105' : 'opacity-100 scale-100'
              }`}
              onError={() => setImageError(true)}
              loading="lazy"
            />
            
            {/* Hover Image */}
            {images.length > 1 && (
              <img
                src={hoverImage}
                alt={`${name} - view 2`}
                className={`absolute inset-0 w-full h-full object-cover transition-all duration-500 ${
                  isHovered ? 'opacity-100 scale-105' : 'opacity-0 scale-100'
                }`}
                loading="lazy"
              />
            )}

            {/* Gradient Overlay */}
            <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />

            {/* Top Badges */}
            <div className="absolute top-3 left-3 flex flex-col gap-2">
              {isFeatured && (
                <span className="inline-flex items-center px-2 py-1 bg-gradient-to-r from-yellow-400 to-orange-400 text-white text-xs font-bold rounded-lg shadow-lg">
                  <SparklesIcon className="w-3 h-3 mr-1" />
                  HOT
                </span>
              )}
              {discount > 0 && (
                <span className="inline-flex items-center px-2 py-1 bg-gradient-to-r from-red-500 to-pink-500 text-white text-xs font-bold rounded-lg shadow-lg">
                  <TagIcon className="w-3 h-3 mr-1" />
                  -{discount}%
                </span>
              )}
              {productStock === 0 && (
                <span className="px-2 py-1 bg-gray-900/80 text-white text-xs font-semibold rounded-lg backdrop-blur-sm">
                  Hết hàng
                </span>
              )}
            </div>

            {/* Quick Actions */}
            {showQuickActions && (
              <div className="absolute top-3 right-3 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-x-2 group-hover:translate-x-0">
                <button
                  onClick={handleAddToWishlist}
                  className={`w-10 h-10 rounded-full flex items-center justify-center shadow-lg transition-all duration-200 hover:scale-110 ${
                    isWishlisted 
                      ? 'bg-red-500 text-white' 
                      : 'bg-white/90 backdrop-blur-sm text-gray-600 hover:bg-red-50 hover:text-red-500'
                  }`}
                  title={isWishlisted ? 'Bỏ yêu thích' : 'Thêm vào yêu thích'}
                >
                  {isWishlisted ? (
                    <HeartSolidIcon className="w-5 h-5" />
                  ) : (
                    <HeartIcon className="w-5 h-5" />
                  )}
                </button>
                <button
                  onClick={handleQuickView}
                  className="w-10 h-10 bg-white/90 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg hover:bg-blue-50 hover:text-blue-500 transition-all duration-200 hover:scale-110"
                  title="Xem nhanh"
                >
                  <EyeIcon className="w-5 h-5 text-gray-600" />
                </button>
              </div>
            )}

            {/* Free Shipping Badge */}
            {productPrice >= 500000 && (
              <div className="absolute bottom-3 left-3">
                <span className="inline-flex items-center px-2 py-1 bg-green-500 text-white text-xs font-semibold rounded-lg shadow-lg">
                  <TruckIcon className="w-3 h-3 mr-1" />
                  Miễn phí vận chuyển
                </span>
              </div>
            )}

            {/* Quick Add to Cart (Bottom overlay) */}
            {showQuickActions && productStock > 0 && (
              <div className="absolute bottom-0 left-0 right-0 p-3 bg-gradient-to-t from-black/80 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-2 group-hover:translate-y-0">
                <button
                  onClick={handleAddToCart}
                  className="w-full bg-white text-gray-900 font-semibold py-2 px-4 rounded-lg hover:bg-gray-100 transition-colors shadow-lg flex items-center justify-center"
                >
                  <ShoppingCartIcon className="w-4 h-4 mr-2" />
                  Thêm vào giỏ
                </button>
              </div>
            )}
          </div>
        </Link>

        {/* Product Info */}
        <div className="p-4">
          {/* Category & Brand */}
          <div className="flex items-center gap-2 mb-2">
            <Link 
              to={`/categories/${category?._id}`}
              className="text-xs text-gray-600 hover:text-blue-600 transition-colors"
            >
              {categoryName}
            </Link>
            <span className="text-gray-400">•</span>
            <Link 
              to={`/brands/${brand?._id}`}
              className="text-xs text-gray-600 hover:text-blue-600 transition-colors"
            >
              {brandName}
            </Link>
          </div>

          {/* Product Name */}
          <Link to={`/products/${_id}`}>
            <h3 className="text-sm font-semibold text-gray-800 hover:text-blue-600 transition-colors line-clamp-2 mb-2">
              {name}
            </h3>
          </Link>

          {/* Rating */}
          <div className="flex items-center gap-1 mb-3">
            <div className="flex items-center">
              {[...Array(5)].map((_, index) => (
                <StarSolidIcon
                  key={index}
                  className="w-4 h-4 text-yellow-400"
                />
              ))}
            </div>
            <span className="text-sm text-gray-600 ml-1">
              ({reviewCount})
            </span>
          </div>

          {/* Price */}
          <div className="flex items-end gap-2 mb-3">
            <span className="text-lg font-bold text-gray-900">
              {formatPrice(productPrice)}
            </span>
            {originalPrice && originalPrice > productPrice && (
              <span className="text-sm text-gray-500 line-through">
                {formatPrice(originalPrice)}
              </span>
            )}
          </div>

          {/* Stock Status */}
          <div className={`inline-flex items-center px-2 py-1 rounded-lg text-xs font-medium ${stockStatus.color}`}>
            <span className="mr-1">{stockStatus.icon}</span>
            {stockStatus.text}
          </div>
        </div>
      </div>
    );
  }

  // List view layout
  return (
    <div className={`group bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden hover:shadow-lg transition-all duration-300 ${className}`}>
      <div className="flex">
        {/* Image */}
        <Link 
          to={`/products/${_id}`}
          className="relative w-48 bg-gray-50"
          onMouseEnter={() => setIsHovered(true)}
          onMouseLeave={() => setIsHovered(false)}
        >
          <div className="aspect-square relative">
            <img
              src={imageError ? '/placeholder-product.jpg' : mainImage}
              alt={name}
              className="absolute inset-0 w-full h-full object-cover"
              onError={() => setImageError(true)}
            />
            
            {/* Badges */}
            <div className="absolute top-2 left-2 flex flex-col gap-1">
              {isFeatured && (
                <span className="inline-flex items-center px-2 py-1 bg-yellow-400 text-white text-xs font-bold rounded-lg">
                  HOT
                </span>
              )}
              {discount > 0 && (
                <span className="inline-flex items-center px-2 py-1 bg-red-500 text-white text-xs font-bold rounded-lg">
                  -{discount}%
                </span>
              )}
            </div>
          </div>
        </Link>

        {/* Info */}
        <div className="flex-1 p-4">
          <div className="flex justify-between items-start">
            <div>
              {/* Category & Brand */}
              <div className="flex items-center gap-2 mb-1">
                <Link 
                  to={`/categories/${category?._id}`}
                  className="text-xs text-gray-600 hover:text-blue-600"
                >
                  {categoryName}
                </Link>
                <span className="text-gray-400">•</span>
                <Link 
                  to={`/brands/${brand?._id}`}
                  className="text-xs text-gray-600 hover:text-blue-600"
                >
                  {brandName}
                </Link>
              </div>

              {/* Name */}
              <Link to={`/products/${_id}`}>
                <h3 className="text-lg font-semibold text-gray-800 hover:text-blue-600 mb-2">
                  {name}
                </h3>
              </Link>

              {/* Rating */}
              <div className="flex items-center gap-1 mb-2">
                <div className="flex items-center">
                  {[...Array(5)].map((_, index) => (
                    <StarSolidIcon
                      key={index}
                      className="w-4 h-4 text-yellow-400"
                    />
                  ))}
                </div>
                <span className="text-sm text-gray-600">
                  ({reviewCount})
                </span>
              </div>

              {/* Description */}
              {description && (
                <p className="text-sm text-gray-600 line-clamp-2 mb-4">
                  {description}
                </p>
              )}
            </div>

            {/* Actions */}
            {showQuickActions && (
              <div className="flex items-center gap-2">
                <button
                  onClick={handleAddToWishlist}
                  className={`w-10 h-10 rounded-full flex items-center justify-center transition-colors ${
                    isWishlisted 
                      ? 'bg-red-500 text-white' 
                      : 'bg-gray-100 text-gray-600 hover:bg-red-50 hover:text-red-500'
                  }`}
                >
                  {isWishlisted ? (
                    <HeartSolidIcon className="w-5 h-5" />
                  ) : (
                    <HeartIcon className="w-5 h-5" />
                  )}
                </button>
              </div>
            )}
          </div>

          {/* Bottom Section */}
          <div className="flex items-center justify-between mt-4">
            <div>
              {/* Price */}
              <div className="flex items-baseline gap-2">
                <span className="text-xl font-bold text-gray-900">
                  {formatPrice(productPrice)}
                </span>
                {originalPrice && originalPrice > productPrice && (
                  <span className="text-sm text-gray-500 line-through">
                    {formatPrice(originalPrice)}
                  </span>
                )}
              </div>

              {/* Stock Status */}
              <div className={`inline-flex items-center px-2 py-1 rounded-lg text-xs font-medium mt-2 ${stockStatus.color}`}>
                <span className="mr-1">{stockStatus.icon}</span>
                {stockStatus.text}
              </div>
            </div>

            {/* Add to Cart */}
            {showQuickActions && productStock > 0 && (
              <button
                onClick={handleAddToCart}
                className="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
              >
                <ShoppingCartIcon className="w-5 h-5" />
                Thêm vào giỏ
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductCard;
====================================================================================================
END OF FILE: webfrontend/src/components/products/ProductCard.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/products/ProductList.jsx
====================================================================================================

// src/components/products/ProductList.jsx
import React from 'react';
import ProductCard from './ProductCard';

const ProductList = ({ 
  products = [], 
  loading = false, 
  viewMode = 'grid',
  showLoadMore = false,
  onLoadMore,
  hasNextPage = false,
  loadingMore = false 
}) => {
  
  // Filter out null/undefined products and validate data
  const validProducts = products.filter(product => {
    return product && 
           product._id && 
           product.name && 
           typeof product.price === 'number';
  });

  if (loading && validProducts.length === 0) {
    return (
      <div className={`grid gap-6 ${
        viewMode === 'grid' 
          ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
          : 'grid-cols-1'
      }`}>
        {[...Array(6)].map((_, index) => (
          <ProductCardSkeleton key={index} viewMode={viewMode} />
        ))}
      </div>
    );
  }

  if (validProducts.length === 0 && !loading) {
    return (
      <div className="text-center py-12">
        <div className="w-24 h-24 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
          <span className="text-4xl">📦</span>
        </div>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          Không tìm thấy sản phẩm
        </h3>
        <p className="text-gray-600 mb-6">
          {products.length > validProducts.length 
            ? `Có ${products.length - validProducts.length} sản phẩm bị lỗi dữ liệu. Thử thay đổi bộ lọc hoặc tìm kiếm với từ khóa khác.`
            : 'Thử thay đổi bộ lọc hoặc tìm kiếm với từ khóa khác'
          }
        </p>
        <button 
          onClick={() => window.location.reload()}
          className="btn btn-primary"
        >
          Làm mới trang
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Data Quality Warning */}
      {products.length > validProducts.length && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
          <div className="flex items-center">
            <div className="text-yellow-600 mr-3">⚠️</div>
            <div>
              <h3 className="text-sm font-medium text-yellow-800">
                Cảnh báo dữ liệu
              </h3>
              <p className="text-sm text-yellow-700 mt-1">
                {products.length - validProducts.length} sản phẩm có dữ liệu không hợp lệ và đã được ẩn.
                Có thể do thiếu thông tin brand hoặc category.
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Products Grid/List */}
      <div className={`grid gap-6 ${
        viewMode === 'grid' 
          ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
          : 'grid-cols-1'
      }`}>
        {validProducts.map((product) => (
          <ProductCard 
            key={product._id} 
            product={product} 
            viewMode={viewMode}
          />
        ))}
      </div>

      {/* Load More Button */}
      {showLoadMore && hasNextPage && (
        <div className="text-center py-8">
          <button
            onClick={onLoadMore}
            disabled={loadingMore}
            className="btn btn-secondary px-8 py-3"
          >
            {loadingMore ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600 mr-2"></div>
                Đang tải...
              </>
            ) : (
              'Xem thêm sản phẩm'
            )}
          </button>
        </div>
      )}

      {/* Loading More Indicator */}
      {loadingMore && (
        <div className={`grid gap-6 ${
          viewMode === 'grid' 
            ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
            : 'grid-cols-1'
        }`}>
          {[...Array(3)].map((_, index) => (
            <ProductCardSkeleton key={`loading-${index}`} viewMode={viewMode} />
          ))}
        </div>
      )}
    </div>
  );
};

// Skeleton Loading Component
const ProductCardSkeleton = ({ viewMode }) => {
  if (viewMode === 'grid') {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden animate-pulse">
        {/* Image Skeleton */}
        <div className="aspect-square bg-gray-200"></div>
        
        {/* Content Skeleton */}
        <div className="p-4 space-y-3">
          {/* Category & Brand */}
          <div className="flex justify-between">
            <div className="h-3 bg-gray-200 rounded w-16"></div>
            <div className="h-3 bg-gray-200 rounded w-12"></div>
          </div>
          
          {/* Title */}
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded w-full"></div>
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
          </div>
          
          {/* Rating */}
          <div className="flex items-center space-x-1">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="w-4 h-4 bg-gray-200 rounded"></div>
            ))}
            <div className="h-3 bg-gray-200 rounded w-8 ml-2"></div>
          </div>
          
          {/* Price */}
          <div className="flex items-center space-x-2">
            <div className="h-5 bg-gray-200 rounded w-20"></div>
            <div className="h-4 bg-gray-200 rounded w-16"></div>
          </div>
          
          {/* Stock */}
          <div className="h-6 bg-gray-200 rounded w-16"></div>
        </div>
      </div>
    );
  }

  // List view skeleton
  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden animate-pulse">
      <div className="flex">
        {/* Image Skeleton */}
        <div className="w-48 aspect-square bg-gray-200 flex-shrink-0"></div>
        
        {/* Content Skeleton */}
        <div className="flex-1 p-6 space-y-4">
          {/* Category & Brand */}
          <div className="flex items-center space-x-4">
            <div className="h-3 bg-gray-200 rounded w-16"></div>
            <div className="h-3 bg-gray-200 rounded w-12"></div>
          </div>
          
          {/* Title */}
          <div className="space-y-2">
            <div className="h-6 bg-gray-200 rounded w-3/4"></div>
            <div className="h-6 bg-gray-200 rounded w-1/2"></div>
          </div>
          
          {/* Description */}
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded w-full"></div>
            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
          </div>
          
          {/* Rating */}
          <div className="flex items-center space-x-1">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="w-4 h-4 bg-gray-200 rounded"></div>
            ))}
            <div className="h-3 bg-gray-200 rounded w-20 ml-2"></div>
          </div>
          
          {/* Bottom section */}
          <div className="flex items-center justify-between pt-4">
            <div className="flex items-center space-x-3">
              <div className="h-7 bg-gray-200 rounded w-24"></div>
              <div className="h-6 bg-gray-200 rounded w-20"></div>
            </div>
            <div className="flex items-center space-x-3">
              <div className="h-6 bg-gray-200 rounded w-16"></div>
              <div className="h-9 bg-gray-200 rounded w-24"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductList;
====================================================================================================
END OF FILE: webfrontend/src/components/products/ProductList.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/products/ProductFilter.jsx
====================================================================================================

import React, { useState, useEffect } from 'react';
import { useQuery } from '@apollo/client';
import { gql } from '@apollo/client';
import { 
  AdjustmentsHorizontalIcon,
  FunnelIcon,
  XMarkIcon,
  ChevronDownIcon,
  ChevronUpIcon
} from '@heroicons/react/24/outline';

// GraphQL Queries
const GET_ALL_CATEGORIES = gql`
  query GetAllCategories {
    allCategories {
      _id
      name
      description
      isActive
    }
  }
`;

const GET_ALL_BRANDS = gql`
  query GetAllBrands {
    allBrands {
      _id
      name
      description
      isActive
    }
  }
`;

const ProductFilter = ({ onFilterChange, initialFilters, className = '' }) => {
  // States for filter values
  const [filters, setFilters] = useState({
    price: { min: '', max: '' },
    category: '',
    brand: '',
    stock: 'all', // 'all', 'inStock', 'outOfStock'
    isFeatured: false,
    hasDiscount: false,
    sections: {
      price: true,
      category: true,
      brand: true,
      stock: true,
      features: true
    }
  });

  // Fetch categories & brands
  const { data: categoriesData, loading: loadingCategories } = useQuery(GET_ALL_CATEGORIES);
  const { data: brandsData, loading: loadingBrands } = useQuery(GET_ALL_BRANDS);

  // Sync with initial filters
  useEffect(() => {
    if (initialFilters) {
      setFilters(prev => ({
        ...prev,
        ...initialFilters
      }));
    }
  }, [initialFilters]);

  // Handle filter changes
  const handleFilterChange = (key, value) => {
    let newFilters;
    
    if (key === 'price') {
      newFilters = {
        ...filters,
        price: {
          ...filters.price,
          ...value
        }
      };
    } else if (key === 'sections') {
      newFilters = {
        ...filters,
        sections: {
          ...filters.sections,
          [value]: !filters.sections[value]
        }
      };
    } else {
      newFilters = {
        ...filters,
        [key]: value
      };
    }

    setFilters(newFilters);
    onFilterChange(newFilters);
  };

  // Format price for display
  const formatPrice = (price) => {
    if (!price) return '';
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  // Toggle section visibility
  const toggleSection = (section) => {
    handleFilterChange('sections', section);
  };

  // Clear all filters
  const clearFilters = () => {
    const clearedFilters = {
      price: { min: '', max: '' },
      category: '',
      brand: '',
      stock: 'all',
      isFeatured: false,
      hasDiscount: false,
      sections: filters.sections
    };
    setFilters(clearedFilters);
    onFilterChange(clearedFilters);
  };

  // Check if any filters are active
  const hasActiveFilters = () => {
    return (
      filters.price.min ||
      filters.price.max ||
      filters.category ||
      filters.brand ||
      filters.stock !== 'all' ||
      filters.isFeatured ||
      filters.hasDiscount
    );
  };

  // Predefined price ranges
  const priceRanges = [
    { label: 'Dưới 1 triệu', min: 0, max: 1000000 },
    { label: '1 - 5 triệu', min: 1000000, max: 5000000 },
    { label: '5 - 10 triệu', min: 5000000, max: 10000000 },
    { label: '10 - 20 triệu', min: 10000000, max: 20000000 },
    { label: 'Trên 20 triệu', min: 20000000, max: '' }
  ];

  return (
    <div className={`bg-white rounded-xl shadow-sm ${className}`}>
      {/* Header */}
      <div className="p-4 border-b border-gray-100">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-semibold text-gray-900 flex items-center">
            <AdjustmentsHorizontalIcon className="h-5 w-5 mr-2 text-blue-500" />
            Bộ lọc sản phẩm
          </h2>
          {hasActiveFilters() && (
            <button
              onClick={clearFilters}
              className="text-sm text-red-600 hover:text-red-800 font-medium"
            >
              Xóa bộ lọc
            </button>
          )}
        </div>
      </div>

      <div className="p-4 space-y-6">
        {/* Price Range Section */}
        <div className="space-y-4">
          <button
            onClick={() => toggleSection('price')}
            className="flex items-center justify-between w-full"
          >
            <span className="text-sm font-medium text-gray-900">💰 Khoảng giá</span>
            {filters.sections.price ? (
              <ChevronUpIcon className="h-4 w-4 text-gray-500" />
            ) : (
              <ChevronDownIcon className="h-4 w-4 text-gray-500" />
            )}
          </button>

          {filters.sections.price && (
            <>
              {/* Predefined ranges */}
              <div className="space-y-2">
                {priceRanges.map((range, index) => (
                  <button
                    key={index}
                    onClick={() => handleFilterChange('price', { min: range.min, max: range.max })}
                    className={`w-full text-left px-3 py-2 rounded-lg text-sm transition-colors ${
                      filters.price.min === range.min && filters.price.max === range.max
                        ? 'bg-blue-50 text-blue-700 font-medium'
                        : 'text-gray-700 hover:bg-gray-50'
                    }`}
                  >
                    {range.label}
                  </button>
                ))}
              </div>

              {/* Custom range inputs */}
              <div className="mt-4">
                <p className="text-sm font-medium text-gray-700 mb-2">Hoặc nhập khoảng giá</p>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-xs text-gray-500 mb-1">Từ</label>
                    <input
                      type="number"
                      value={filters.price.min}
                      onChange={(e) => handleFilterChange('price', { min: e.target.value })}
                      placeholder="0"
                      min="0"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-500 mb-1">Đến</label>
                    <input
                      type="number"
                      value={filters.price.max}
                      onChange={(e) => handleFilterChange('price', { max: e.target.value })}
                      placeholder="0"
                      min="0"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
                {filters.price.min && filters.price.max && (
                  <div className="mt-2 text-xs text-gray-500">
                    Khoảng giá: {formatPrice(filters.price.min)} - {formatPrice(filters.price.max)}
                  </div>
                )}
              </div>
            </>
          )}
        </div>

        {/* Category Section */}
        <div className="space-y-4">
          <button
            onClick={() => toggleSection('category')}
            className="flex items-center justify-between w-full"
          >
            <span className="text-sm font-medium text-gray-900">📁 Danh mục</span>
            {filters.sections.category ? (
              <ChevronUpIcon className="h-4 w-4 text-gray-500" />
            ) : (
              <ChevronDownIcon className="h-4 w-4 text-gray-500" />
            )}
          </button>

          {filters.sections.category && (
            <div className="space-y-2">
              <select
                value={filters.category}
                onChange={(e) => handleFilterChange('category', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Tất cả danh mục</option>
                {categoriesData?.allCategories.map((category) => (
                  <option key={category._id} value={category._id}>
                    {category.name}
                  </option>
                ))}
              </select>
            </div>
          )}
        </div>

        {/* Brand Section */}
        <div className="space-y-4">
          <button
            onClick={() => toggleSection('brand')}
            className="flex items-center justify-between w-full"
          >
            <span className="text-sm font-medium text-gray-900">🏢 Thương hiệu</span>
            {filters.sections.brand ? (
              <ChevronUpIcon className="h-4 w-4 text-gray-500" />
            ) : (
              <ChevronDownIcon className="h-4 w-4 text-gray-500" />
            )}
          </button>

          {filters.sections.brand && (
            <div className="space-y-2">
              <select
                value={filters.brand}
                onChange={(e) => handleFilterChange('brand', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Tất cả thương hiệu</option>
                {brandsData?.allBrands.map((brand) => (
                  <option key={brand._id} value={brand._id}>
                    {brand.name}
                  </option>
                ))}
              </select>
            </div>
          )}
        </div>

        {/* Stock Section */}
        <div className="space-y-4">
          <button
            onClick={() => toggleSection('stock')}
            className="flex items-center justify-between w-full"
          >
            <span className="text-sm font-medium text-gray-900">📦 Tình trạng kho</span>
            {filters.sections.stock ? (
              <ChevronUpIcon className="h-4 w-4 text-gray-500" />
            ) : (
              <ChevronDownIcon className="h-4 w-4 text-gray-500" />
            )}
          </button>

          {filters.sections.stock && (
            <div className="space-y-2">
              <select
                value={filters.stock}
                onChange={(e) => handleFilterChange('stock', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="all">Tất cả</option>
                <option value="inStock">Còn hàng</option>
                <option value="outOfStock">Hết hàng</option>
                <option value="lowStock">Sắp hết hàng</option>
              </select>
            </div>
          )}
        </div>

        {/* Features Section */}
        <div className="space-y-4">
          <button
            onClick={() => toggleSection('features')}
            className="flex items-center justify-between w-full"
          >
            <span className="text-sm font-medium text-gray-900">⭐ Tính năng</span>
            {filters.sections.features ? (
              <ChevronUpIcon className="h-4 w-4 text-gray-500" />
            ) : (
              <ChevronDownIcon className="h-4 w-4 text-gray-500" />
            )}
          </button>

          {filters.sections.features && (
            <div className="space-y-3">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={filters.isFeatured}
                  onChange={(e) => handleFilterChange('isFeatured', e.target.checked)}
                  className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="ml-2 text-sm text-gray-700">Sản phẩm nổi bật</span>
              </label>

              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={filters.hasDiscount}
                  onChange={(e) => handleFilterChange('hasDiscount', e.target.checked)}
                  className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="ml-2 text-sm text-gray-700">Đang giảm giá</span>
              </label>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProductFilter; 
====================================================================================================
END OF FILE: webfrontend/src/components/products/ProductFilter.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/products/ProductSearch.jsx
====================================================================================================

// src/components/products/ProductSearch.jsx - Modern & Beautiful Design
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  MagnifyingGlassIcon, 
  XMarkIcon,
  ClockIcon,
  FireIcon,
  SparklesIcon,
  ArrowTrendingUpIcon
} from '@heroicons/react/24/outline';
import { useSearchProducts } from '../../hooks/useProducts';
import { formatPrice, getImageUrl } from '../../lib/utils';

const ProductSearch = ({ 
  placeholder = "Tìm kiếm sản phẩm...",
  className = "",
  showSuggestions = true,
  onSearchSubmit
}) => {
  const navigate = useNavigate();
  const { searchResults, isSearching, search, clearSearch } = useSearchProducts();
  
  const [query, setQuery] = useState('');
  const [showResults, setShowResults] = useState(false);
  const [recentSearches, setRecentSearches] = useState([]);
  const [trendingSearches] = useState([
    { term: 'iPhone 15', trend: '+25%', icon: '📱' },
    { term: 'MacBook Pro', trend: '+18%', icon: '💻' },
    { term: 'Samsung Galaxy', trend: '+15%', icon: '📱' },
    { term: 'AirPods Pro', trend: '+30%', icon: '🎧' },
    { term: 'iPad Air', trend: '+12%', icon: '📱' }
  ]);

  const searchRef = useRef(null);
  const resultsRef = useRef(null);

  // Load recent searches from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('smartshop_recent_searches');
    if (saved) {
      try {
        setRecentSearches(JSON.parse(saved));
      } catch (error) {
        console.error('Error loading recent searches:', error);
      }
    }
  }, []);

  // Save recent searches to localStorage
  const saveRecentSearch = (searchQuery) => {
    if (!searchQuery.trim()) return;
    
    const updated = [
      searchQuery,
      ...recentSearches.filter(item => item !== searchQuery)
    ].slice(0, 5); // Keep only 5 recent searches
    
    setRecentSearches(updated);
    localStorage.setItem('smartshop_recent_searches', JSON.stringify(updated));
  };

  // Handle search input change
  const handleInputChange = (e) => {
    const value = e.target.value;
    setQuery(value);
    
    if (value.trim().length > 2) {
      search(value, { first: 5 }); // Search with limit for suggestions
      setShowResults(true);
    } else {
      clearSearch();
      setShowResults(value.length > 0);
    }
  };

  // Handle search submission
  const handleSubmit = (e) => {
    e.preventDefault();
    performSearch(query);
  };

  const performSearch = (searchQuery) => {
    if (!searchQuery.trim()) return;
    
    saveRecentSearch(searchQuery.trim());
    setShowResults(false);
    setQuery(searchQuery);
    
    if (onSearchSubmit) {
      onSearchSubmit(searchQuery);
    } else {
      navigate(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
    }
  };

  // Handle click outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        searchRef.current && 
        !searchRef.current.contains(event.target) &&
        resultsRef.current &&
        !resultsRef.current.contains(event.target)
      ) {
        setShowResults(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Clear search
  const handleClear = () => {
    setQuery('');
    clearSearch();
    setShowResults(false);
  };

  // Remove recent search item
  const removeRecentSearch = (item) => {
    const updated = recentSearches.filter(search => search !== item);
    setRecentSearches(updated);
    localStorage.setItem('smartshop_recent_searches', JSON.stringify(updated));
  };

  return (
    <div className={`relative ${className}`}>
      {/* Search Input */}
      <form onSubmit={handleSubmit} className="relative">
        <div className="relative group">
          <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
            <MagnifyingGlassIcon className="h-5 w-5 text-gray-400 group-focus-within:text-blue-500 transition-colors" />
          </div>
          
          <input
            ref={searchRef}
            type="text"
            value={query}
            onChange={handleInputChange}
            onFocus={() => setShowResults(true)}
            placeholder={placeholder}
            className="w-full pl-12 pr-12 py-4 bg-white border-2 border-gray-200 rounded-2xl focus:outline-none focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 text-gray-900 placeholder-gray-500 text-lg transition-all duration-200 shadow-sm hover:shadow-md focus:shadow-lg"
            autoComplete="off"
          />
          
          {/* Clear button */}
          {query && (
            <button
              type="button"
              onClick={handleClear}
              className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-600 transition-colors"
            >
              <XMarkIcon className="h-5 w-5" />
            </button>
          )}

          {/* Search button overlay */}
          <button
            type="submit"
            className="absolute inset-y-0 right-0 pr-4 flex items-center text-blue-500 hover:text-blue-600 transition-colors"
            style={{ display: query && !isSearching ? 'flex' : 'none' }}
          >
            <div className="bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 transition-colors">
              <MagnifyingGlassIcon className="h-4 w-4" />
            </div>
          </button>
        </div>
      </form>

      {/* Search Results Dropdown */}
      {showSuggestions && showResults && (
        <div
          ref={resultsRef}
          className="absolute top-full left-0 right-0 mt-2 bg-white rounded-2xl shadow-2xl border border-gray-100 z-50 max-h-96 overflow-hidden"
        >
          {/* Loading */}
          {isSearching && query.length > 2 && (
            <div className="p-6 text-center">
              <div className="inline-flex items-center justify-center w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin mb-3"></div>
              <p className="text-sm text-gray-500">Đang tìm kiếm...</p>
            </div>
          )}

          {/* Search Results */}
          {searchResults.length > 0 && query.length > 2 && (
            <div>
              <div className="px-6 py-3 bg-gray-50 border-b border-gray-100">
                <h3 className="text-sm font-semibold text-gray-900 flex items-center">
                  <SparklesIcon className="h-4 w-4 mr-2 text-blue-500" />
                  Sản phẩm tìm thấy
                </h3>
              </div>
              <div className="max-h-64 overflow-y-auto">
                {searchResults.map((product) => (
                  <button
                    key={product._id}
                    onClick={() => navigate(`/products/${product._id}`)}
                    className="w-full px-6 py-4 flex items-center space-x-4 hover:bg-gray-50 transition-colors text-left border-b border-gray-50 last:border-b-0"
                  >
                    <div className="relative">
                      <img
                        src={getImageUrl(product.images?.[0])}
                        alt={product.name}
                        className="w-12 h-12 object-cover rounded-xl bg-gray-100 shadow-sm"
                        onError={(e) => {
                          e.target.src = '/placeholder-product.jpg';
                        }}
                      />
                      {product.isFeatured && (
                        <div className="absolute -top-1 -right-1 w-4 h-4 bg-yellow-400 rounded-full flex items-center justify-center">
                          <SparklesIcon className="w-2 h-2 text-white" />
                        </div>
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-semibold text-gray-900 truncate mb-1">
                        {product.name}
                      </p>
                      <div className="flex items-center justify-between">
                        <p className="text-xs text-gray-500 truncate">
                          {product.brand?.name} • {product.category?.name}
                        </p>
                        <p className="text-sm font-bold text-red-600 ml-2">
                          {formatPrice(product.price)}
                        </p>
                      </div>
                    </div>
                  </button>
                ))}
              </div>
              
              {/* View all results */}
              <div className="border-t border-gray-100 bg-gray-50">
                <button
                  onClick={() => performSearch(query)}
                  className="w-full px-6 py-4 text-sm font-semibold text-blue-600 hover:bg-blue-50 transition-colors"
                >
                  Xem tất cả {searchResults.length}+ kết quả cho "{query}"
                </button>
              </div>
            </div>
          )}

          {/* No Results */}
          {searchResults.length === 0 && query.length > 2 && !isSearching && (
            <div className="p-8 text-center">
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <MagnifyingGlassIcon className="h-8 w-8 text-gray-400" />
              </div>
              <p className="text-sm text-gray-500 mb-2">
                Không tìm thấy sản phẩm nào cho "<span className="font-medium">{query}</span>"
              </p>
              <p className="text-xs text-gray-400">
                Thử tìm kiếm với từ khóa khác hoặc kiểm tra chính tả
              </p>
            </div>
          )}

          {/* Recent Searches */}
          {(!query || query.length <= 2) && recentSearches.length > 0 && (
            <div>
              <div className="px-6 py-3 bg-gray-50 border-b border-gray-100">
                <h3 className="text-sm font-semibold text-gray-900 flex items-center">
                  <ClockIcon className="h-4 w-4 mr-2 text-gray-500" />
                  Tìm kiếm gần đây
                </h3>
              </div>
              <div className="max-h-48 overflow-y-auto">
                {recentSearches.map((item, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between px-6 py-3 hover:bg-gray-50 group"
                  >
                    <button
                      onClick={() => {
                        setQuery(item);
                        performSearch(item);
                      }}
                      className="flex-1 text-left text-sm text-gray-700 hover:text-gray-900 flex items-center"
                    >
                      <ClockIcon className="h-3 w-3 mr-3 text-gray-400" />
                      {item}
                    </button>
                    <button
                      onClick={() => removeRecentSearch(item)}
                      className="p-1 text-gray-400 hover:text-gray-600 opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      <XMarkIcon className="h-3 w-3" />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Trending Searches */}
          {(!query || query.length <= 2) && trendingSearches.length > 0 && (
            <div>
              <div className="px-6 py-3 bg-gradient-to-r from-orange-50 to-red-50 border-b border-gray-100">
                <h3 className="text-sm font-semibold text-gray-900 flex items-center">
                  <FireIcon className="h-4 w-4 mr-2 text-orange-500" />
                  Xu hướng tìm kiếm
                </h3>
              </div>
              <div className="max-h-48 overflow-y-auto">
                {trendingSearches.map((item, index) => (
                  <button
                    key={index}
                    onClick={() => {
                      setQuery(item.term);
                      performSearch(item.term);
                    }}
                    className="w-full flex items-center justify-between px-6 py-3 text-sm text-gray-700 hover:bg-gray-50 hover:text-gray-900 group"
                  >
                    <div className="flex items-center">
                      <span className="text-lg mr-3">{item.icon}</span>
                      <span>{item.term}</span>
                    </div>
                    <div className="flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
                      <span className="text-xs font-medium text-green-600 bg-green-100 px-2 py-1 rounded-full">
                        {item.trend}
                      </span>
                      <ArrowTrendingUpIcon className="h-3 w-3 text-green-500" />
                    </div>
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Empty state */}
          {(!query || query.length <= 2) && recentSearches.length === 0 && (
            <div className="p-8 text-center">
              <div className="w-16 h-16 bg-gradient-to-br from-blue-100 to-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <MagnifyingGlassIcon className="h-8 w-8 text-blue-500" />
              </div>
              <h3 className="text-sm font-semibold text-gray-900 mb-2">
                Bắt đầu tìm kiếm
              </h3>
              <p className="text-xs text-gray-500 mb-4">
                Nhập từ khóa để tìm kiếm hàng nghìn sản phẩm
              </p>
              
              {/* Quick search suggestions */}
              <div className="flex flex-wrap gap-2 justify-center">
                {['iPhone', 'Samsung', 'Laptop', 'Tai nghe'].map((suggestion) => (
                  <button
                    key={suggestion}
                    onClick={() => {
                      setQuery(suggestion);
                      performSearch(suggestion);
                    }}
                    className="px-3 py-1 bg-gray-100 text-gray-600 text-xs rounded-full hover:bg-blue-100 hover:text-blue-600 transition-colors"
                  >
                    {suggestion}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ProductSearch;
====================================================================================================
END OF FILE: webfrontend/src/components/products/ProductSearch.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/components/admin/AdminLayout.jsx
====================================================================================================

// src/components/admin/AdminLayout.jsx
import React, { useState } from 'react';
import { Outlet } from 'react-router-dom';
import Sidebar from '../common/Sidebar';
import { useAuth } from '../../contexts/AuthContext';
import {
  Bars3Icon,
  XMarkIcon,
  BellIcon,
  UserCircleIcon
} from '@heroicons/react/24/outline';

const AdminLayout = () => {
  const { user, logout } = useAuth();
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [showUserMenu, setShowUserMenu] = useState(false);

  const handleLogout = () => {
    if (window.confirm('Bạn có chắc muốn đăng xuất?')) {
      logout();
    }
  };

  const getRoleColor = (role) => {
    switch (role) {
      case 'admin': return 'bg-red-100 text-red-800';
      case 'manager': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <Sidebar 
        isOpen={sidebarOpen} 
        onToggle={() => setSidebarOpen(!sidebarOpen)}
        type="admin"
      />

      {/* Main Content Area */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Top Header */}
        <header className="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
          <div className="flex items-center justify-between">
            {/* Left: Mobile menu button + Page title */}
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className="p-2 rounded-lg hover:bg-gray-100 transition-colors lg:hidden"
              >
                {sidebarOpen ? (
                  <XMarkIcon className="h-5 w-5 text-gray-600" />
                ) : (
                  <Bars3Icon className="h-5 w-5 text-gray-600" />
                )}
              </button>

              <div>
                <h1 className="text-xl font-semibold text-gray-900">
                  SmartShop Admin
                </h1>
                <p className="text-sm text-gray-500">
                  Quản lý hệ thống thương mại điện tử
                </p>
              </div>
            </div>

            {/* Right: User info + Actions */}
            <div className="flex items-center space-x-4">
              {/* Notifications */}
              <button className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors">
                <BellIcon className="h-5 w-5" />
                <span className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                  3
                </span>
              </button>

              {/* User Menu */}
              <div className="relative">
                <button
                  onClick={() => setShowUserMenu(!showUserMenu)}
                  className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 transition-colors"
                >
                  <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
                    {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}
                  </div>
                  <div className="hidden md:block text-left">
                    <p className="text-sm font-medium text-gray-900">
                      {user?.firstName} {user?.lastName}
                    </p>
                    <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${getRoleColor(user?.role)}`}>
                      {user?.role}
                    </span>
                  </div>
                </button>

                {/* User Dropdown */}
                {showUserMenu && (
                  <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
                    <div className="px-4 py-3 border-b border-gray-100">
                      <p className="text-sm font-medium text-gray-900">
                        {user?.firstName} {user?.lastName}
                      </p>
                      <p className="text-xs text-gray-500">{user?.email}</p>
                    </div>
                    
                    <div className="py-1">
                      <button
                        onClick={() => {
                          setShowUserMenu(false);
                          // Navigate to profile
                        }}
                        className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                      >
                        <UserCircleIcon className="h-4 w-4 mr-3" />
                        Thông tin cá nhân
                      </button>
                      
                      <button
                        onClick={() => {
                          setShowUserMenu(false);
                          handleLogout();
                        }}
                        className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                      >
                        <span className="w-4 h-4 mr-3 text-center">🚪</span>
                        Đăng xuất
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="flex-1 overflow-y-auto bg-gray-50">
          <div className="p-6">
            {/* Breadcrumb */}
            <nav className="flex mb-6" aria-label="Breadcrumb">
              <ol className="inline-flex items-center space-x-1 md:space-x-3">
                <li className="inline-flex items-center">
                  <span className="text-sm font-medium text-gray-500">Admin</span>
                </li>
                <li>
                  <div className="flex items-center">
                    <span className="text-gray-400">/</span>
                    <span className="ml-1 text-sm font-medium text-gray-900">
                      Dashboard
                    </span>
                  </div>
                </li>
              </ol>
            </nav>

            {/* Page Content */}
            <div className="space-y-6">
              <Outlet />
            </div>
          </div>
        </main>
      </div>

      {/* Overlay for mobile */}
      {sidebarOpen && (
        <div 
          className="fixed inset-0 z-40 lg:hidden" 
          onClick={() => setSidebarOpen(false)}
        />
      )}

      {/* Click outside to close user menu */}
      {showUserMenu && (
        <div 
          className="fixed inset-0 z-40" 
          onClick={() => setShowUserMenu(false)}
        />
      )}
    </div>
  );
};

export default AdminLayout;
====================================================================================================
END OF FILE: webfrontend/src/components/admin/AdminLayout.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/HomePage.jsx
====================================================================================================

// src/pages/HomePage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import Layout from '../components/common/Layout';
import { 
  CubeIcon, 
  ShoppingCartIcon, 
  ChartBarIcon,
  TagIcon,
  BuildingStorefrontIcon,
  HeartIcon,
  TruckIcon,
  ShieldCheckIcon
} from '@heroicons/react/24/outline';

const HomePage = () => {
  const { user } = useAuth();

  const features = [
    {
      name: 'Sản phẩm',
      description: 'Khám phá hàng nghìn sản phẩm chất lượng cao',
      icon: CubeIcon,
      href: '/products',
      color: 'blue'
    },
    {
      name: 'Danh mục',
      description: 'Duyệt theo các danh mục sản phẩm',
      icon: TagIcon,
      href: '/categories',
      color: 'purple'
    },
    {
      name: 'Thương hiệu',
      description: 'Các thương hiệu uy tín hàng đầu',
      icon: BuildingStorefrontIcon,
      href: '/brands',
      color: 'green'
    },
    {
      name: 'Giỏ hàng',
      description: 'Quản lý giỏ hàng của bạn',
      icon: ShoppingCartIcon,
      href: '/cart',
      color: 'yellow'
    },
    {
      name: 'Yêu thích',
      description: 'Sản phẩm bạn đã lưu',
      icon: HeartIcon,
      href: '/wishlist',
      color: 'pink'
    },
    {
      name: 'Đơn hàng',
      description: 'Theo dõi trạng thái đơn hàng',
      icon: TruckIcon,
      href: '/orders',
      color: 'indigo'
    }
  ];

  const benefits = [
    {
      title: 'Miễn phí vận chuyển',
      description: 'Cho đơn hàng trên 500,000đ',
      icon: '🚚'
    },
    {
      title: 'Bảo hành chính hãng',
      description: 'Cam kết 100% hàng chính hãng',
      icon: '🛡️'
    },
    {
      title: 'Đổi trả dễ dàng',
      description: 'Trong vòng 30 ngày',
      icon: '🔄'
    },
    {
      title: 'Hỗ trợ 24/7',
      description: 'Tư vấn mọi lúc mọi nơi',
      icon: '💬'
    }
  ];

  const getColorClasses = (color) => {
    const colors = {
      blue: 'bg-blue-100 text-blue-600 hover:bg-blue-200',
      purple: 'bg-purple-100 text-purple-600 hover:bg-purple-200',
      green: 'bg-green-100 text-green-600 hover:bg-green-200',
      yellow: 'bg-yellow-100 text-yellow-600 hover:bg-yellow-200',
      pink: 'bg-pink-100 text-pink-600 hover:bg-pink-200',
      indigo: 'bg-indigo-100 text-indigo-600 hover:bg-indigo-200'
    };
    return colors[color] || colors.blue;
  };

  return (
    <Layout>
      {/* Hero Section */}
      <section className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <div className="text-center">
            <h1 className="text-4xl md:text-6xl font-bold mb-6">
              Chào mừng đến với <span className="text-yellow-300">SmartShop</span>
            </h1>
            <p className="text-xl md:text-2xl mb-8 text-blue-100">
              Nền tảng thương mại điện tử hiện đại với hàng triệu sản phẩm chất lượng
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link
                to="/products"
                className="px-8 py-4 bg-white text-blue-600 rounded-xl font-semibold hover:bg-blue-50 transition-colors"
              >
                Khám phá sản phẩm
              </Link>
              <Link
                to="/register"
                className="px-8 py-4 bg-transparent border-2 border-white text-white rounded-xl font-semibold hover:bg-white hover:text-blue-600 transition-colors"
              >
                Tạo tài khoản miễn phí
              </Link>
            </div>
          </div>
        </div>
      </section>

      {/* User Welcome */}
      {user && (
        <section className="bg-white border-b border-gray-200">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold text-gray-900 mb-2">
                    Xin chào, {user.firstName}! 👋
                  </h2>
                  <p className="text-gray-600">
                    Sẵn sàng khám phá những sản phẩm mới hôm nay?
                  </p>
                </div>
                {(user.role === 'admin' || user.role === 'manager') && (
                  <Link
                    to="/admin"
                    className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-purple-700 transition-all"
                  >
                    🚀 Admin Panel
                  </Link>
                )}
              </div>
            </div>
          </div>
        </section>
      )}

      {/* Features Grid */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              Tính năng nổi bật
            </h2>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Khám phá đầy đủ các tính năng của SmartShop để có trải nghiệm mua sắm tuyệt vời nhất
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature) => (
              <Link
                key={feature.name}
                to={feature.href}
                className="group bg-white rounded-xl p-6 shadow-sm border border-gray-200 hover:shadow-md transition-all duration-200 hover:scale-105"
              >
                <div className={`w-12 h-12 rounded-lg flex items-center justify-center mb-4 transition-colors ${getColorClasses(feature.color)}`}>
                  <feature.icon className="h-6 w-6" />
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                  {feature.name}
                </h3>
                <p className="text-gray-600 text-sm">
                  {feature.description}
                </p>
                <div className="mt-4 flex items-center text-blue-600 text-sm font-medium">
                  Xem ngay
                  <span className="ml-1 group-hover:translate-x-1 transition-transform">→</span>
                </div>
              </Link>
            ))}
          </div>
        </div>
      </section>

      {/* Benefits */}
      <section className="py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              Tại sao chọn SmartShop?
            </h2>
            <p className="text-gray-600">
              Chúng tôi cam kết mang đến trải nghiệm mua sắm tốt nhất
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {benefits.map((benefit, index) => (
              <div key={index} className="text-center">
                <div className="w-16 h-16 bg-gradient-to-r from-blue-100 to-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">{benefit.icon}</span>
                </div>
                <h3 className="font-semibold text-gray-900 mb-2">
                  {benefit.title}
                </h3>
                <p className="text-gray-600 text-sm">
                  {benefit.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-gradient-to-r from-gray-900 to-gray-800 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl font-bold mb-4">
            Bắt đầu mua sắm ngay hôm nay!
          </h2>
          <p className="text-gray-300 mb-8 max-w-2xl mx-auto">
            Tham gia cùng hàng triệu khách hàng đã tin tưởng SmartShop. 
            Đăng ký ngay để nhận ưu đãi đặc biệt cho thành viên mới.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link
              to="/products"
              className="px-8 py-4 bg-blue-600 text-white rounded-xl font-semibold hover:bg-blue-700 transition-colors"
            >
              Mua sắm ngay
            </Link>
            {!user && (
              <Link
                to="/register"
                className="px-8 py-4 bg-transparent border-2 border-white text-white rounded-xl font-semibold hover:bg-white hover:text-gray-900 transition-colors"
              >
                Đăng ký miễn phí
              </Link>
            )}
          </div>
        </div>
      </section>
    </Layout>
  );
};

export default HomePage;
====================================================================================================
END OF FILE: webfrontend/src/pages/HomePage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/LoginPage.jsx
====================================================================================================

import React from 'react';
import LoginForm from '../components/auth/LoginForm';
import { GuestRoute } from '../components/auth/ProtectedRoute';
import { AuthLayout } from '../components/common/Layout';

const LoginPage = () => {
  return (
    <GuestRoute>
      <AuthLayout>
        <LoginForm />
      </AuthLayout>
    </GuestRoute>
  );
};

export default LoginPage;

====================================================================================================
END OF FILE: webfrontend/src/pages/LoginPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/RegisterPage.jsx
====================================================================================================

// src/pages/RegisterPage.jsx
import React from 'react';
import RegisterForm from '../components/auth/RegisterForm';
import { AuthLayout } from '../components/common/Layout';
import { GuestRoute } from '../components/auth/ProtectedRoute';

const RegisterPage = () => {
  return (
    <GuestRoute>
      <AuthLayout>
        <RegisterForm />
      </AuthLayout>
    </GuestRoute>
  );
};

export default RegisterPage;
====================================================================================================
END OF FILE: webfrontend/src/pages/RegisterPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/ProductsPage.jsx
====================================================================================================

// src/pages/ProductsPage.jsx
import React, { useState, useEffect, useMemo } from 'react';
import { useSearchParams } from 'react-router-dom';
import Layout from '../components/common/Layout';
import ProductList from '../components/products/ProductList';
import ProductFilter from '../components/products/ProductFilter';
import ProductSearch from '../components/products/ProductSearch';
import ProtectedRoute from '../components/auth/ProtectedRoute';
import { useProducts, useSearchProducts } from '../hooks/useProducts';

import { 
  FunnelIcon, 
  Squares2X2Icon, 
  ListBulletIcon,
  XMarkIcon,
  ChevronDownIcon
} from '@heroicons/react/24/outline';

const ProductsPage = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  
  // State management
  const [viewMode, setViewMode] = useState('grid');
  const [sortBy, setSortBy] = useState(searchParams.get('sort') || 'CREATED_DESC');
  const [showFilters, setShowFilters] = useState(false);
  const [showMobileSearch, setShowMobileSearch] = useState(false);
  
  // Get initial filters from URL
  const getInitialFilters = () => {
    return {
      price: { 
        min: searchParams.get('priceMin') ? parseFloat(searchParams.get('priceMin')) : '', 
        max: searchParams.get('priceMax') ? parseFloat(searchParams.get('priceMax')) : '' 
      },
      category: searchParams.get('category') || '',
      brand: searchParams.get('brand') || '',
      stock: searchParams.get('stock') || 'all',
      isFeatured: searchParams.get('featured') === 'true',
      hasDiscount: searchParams.get('discount') === 'true'
    };
  };

  const [filters, setFilters] = useState(getInitialFilters());

  // Re-sync filters when URL changes
  useEffect(() => {
    const newFilters = getInitialFilters();
    setFilters(newFilters);
  }, [searchParams]);

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(12);

  // Get initial search from URL
  const initialSearch = searchParams.get('q') || '';
  const isSearchMode = !!initialSearch;

  // ✅ FIXED: Sử dụng search hook khi có search query
  const searchHook = useSearchProducts();
  const {
    searchResults,
    isSearching,
    search,
    clearSearch
  } = searchHook;

  // ✅ FIXED: Sử dụng products hook khi không search
  const productsHook = useProducts({
    first: itemsPerPage,
    offset: (currentPage - 1) * itemsPerPage,
    orderBy: sortBy,
    skip: isSearchMode // Skip products query khi đang search
  });

  // ✅ FIXED: Logic để lấy data đúng
  const getDisplayData = () => {
    if (isSearchMode) {
      return {
        products: searchResults || [],
        totalCount: searchResults?.length || 0,
        loading: isSearching,
        error: null,
        hasNextPage: false,
        hasPreviousPage: false
      };
    } else {
      return {
        products: productsHook.products || [],
        totalCount: productsHook.totalCount || 0,
        loading: productsHook.loading,
        error: productsHook.error,
        hasNextPage: productsHook.hasNextPage,
        hasPreviousPage: productsHook.hasPreviousPage
      };
    }
  };

  const { products: rawProducts, totalCount: rawTotalCount, loading, error } = getDisplayData();

  // Client-side filtering
  const filteredProducts = useMemo(() => {
    if (!rawProducts) return [];
    
    return rawProducts.filter(product => {
      // Price range
      if (filters.price.min && product.price < filters.price.min) return false;
      if (filters.price.max && product.price > filters.price.max) return false;

      // Category
      if (filters.category && product.category?._id !== filters.category) return false;

      // Brand
      if (filters.brand && product.brand?._id !== filters.brand) return false;

      // Stock status
      if (filters.stock === 'inStock' && product.stock <= 0) return false;
      if (filters.stock === 'outOfStock' && product.stock > 0) return false;
      if (filters.stock === 'lowStock' && (product.stock <= 0 || product.stock > 10)) return false;

      // Featured products
      if (filters.isFeatured && !product.isFeatured) return false;

      // Discounted products
      if (filters.hasDiscount && (!product.originalPrice || product.originalPrice <= product.price)) return false;

      return true;
    });
  }, [rawProducts, filters]);

  // Sort options
  const sortOptions = [
    { value: 'CREATED_DESC', label: 'Mới nhất', icon: '✨' },
    { value: 'CREATED_ASC', label: 'Cũ nhất', icon: '📅' },
    { value: 'PRICE_ASC', label: 'Giá thấp đến cao', icon: '💰' },
    { value: 'PRICE_DESC', label: 'Giá cao đến thấp', icon: '💎' },
    { value: 'NAME_ASC', label: 'Tên A-Z', icon: '🔤' },
    { value: 'NAME_DESC', label: 'Tên Z-A', icon: '🔤' },
  ];

  // Handle sort change
  const handleSortChange = (newSort) => {
    setSortBy(newSort);
    setCurrentPage(1);
    
    // ✅ FIXED: Re-trigger search with new sort nếu đang search
    if (isSearchMode && initialSearch) {
      search(initialSearch, {
        first: itemsPerPage,
        offset: 0,
        orderBy: newSort
      });
    }
  };

  // ✅ FIXED: Handle search from search component
  const handleSearchSubmit = (query) => {
    if (query.trim()) {
      setSearchParams({ q: query.trim() });
      setCurrentPage(1);
      
      // Trigger search
      search(query.trim(), {
        first: itemsPerPage,
        offset: 0,
        orderBy: sortBy
      });
    } else {
      setSearchParams({});
      clearSearch();
    }
    setShowMobileSearch(false);
  };

  // ✅ FIXED: Trigger search when URL changes
  useEffect(() => {
    if (initialSearch) {
      search(initialSearch, {
        first: itemsPerPage,
        offset: (currentPage - 1) * itemsPerPage,
        orderBy: sortBy
      });
    } else {
      clearSearch();
    }
  }, [initialSearch, currentPage, sortBy]);

  // Handle filter changes
  const handleFilterChange = (newFilters) => {
    // Update URL params
    const newParams = new URLSearchParams(searchParams);
    
    // Price range
    if (newFilters.price.min) {
      newParams.set('priceMin', newFilters.price.min.toString());
    } else {
      newParams.delete('priceMin');
    }
    
    if (newFilters.price.max) {
      newParams.set('priceMax', newFilters.price.max.toString());
    } else {
      newParams.delete('priceMax');
    }
    
    // Category
    if (newFilters.category) {
      newParams.set('category', newFilters.category);
    } else {
      newParams.delete('category');
    }
    
    // Brand
    if (newFilters.brand) {
      newParams.set('brand', newFilters.brand);
    } else {
      newParams.delete('brand');
    }
    
    // Stock
    if (newFilters.stock !== 'all') {
      newParams.set('stock', newFilters.stock);
    } else {
      newParams.delete('stock');
    }
    
    // Featured
    if (newFilters.isFeatured) {
      newParams.set('featured', 'true');
    } else {
      newParams.delete('featured');
    }
    
    // Discount
    if (newFilters.hasDiscount) {
      newParams.set('discount', 'true');
    } else {
      newParams.delete('discount');
    }
    
    setSearchParams(newParams, { replace: true });
    setFilters(newFilters);
    setCurrentPage(1);
  };

  // Calculate pagination for filtered products
  const totalFilteredCount = filteredProducts.length;
  const totalPages = Math.ceil(totalFilteredCount / itemsPerPage);
  const startItem = ((currentPage - 1) * itemsPerPage) + 1;
  const endItem = Math.min(currentPage * itemsPerPage, totalFilteredCount);

  // Get current page products
  const currentProducts = filteredProducts.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  // Handle pagination
  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
      window.scrollTo({ top: 0, behavior: 'smooth' });
      
      // ✅ FIXED: Handle pagination for search
      if (isSearchMode && initialSearch) {
        search(initialSearch, {
          first: itemsPerPage,
          offset: (page - 1) * itemsPerPage,
          orderBy: sortBy
        });
      }
    }
  };

  // Clear all filters
  const clearAllFilters = () => {
    setFilters({
      price: { min: '', max: '' },
      category: '',
      brand: '',
      stock: 'all',
      isFeatured: false,
      hasDiscount: false
    });
    
    // Clear filter params from URL
    const newParams = new URLSearchParams(searchParams);
    ['priceMin', 'priceMax', 'category', 'brand', 'stock', 'featured', 'discount'].forEach(param => {
      newParams.delete(param);
    });
    setSearchParams(newParams, { replace: true });
    
    setCurrentPage(1);
  };

  return (
    <ProtectedRoute>
      <Layout>
        {/* Hero Section */}
        <div className="relative overflow-hidden bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600">
          <div className="absolute inset-0 bg-black/20"></div>
          <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
            <div className="text-center text-white">
              <h1 className="text-4xl md:text-6xl font-bold mb-4">
                {initialSearch ? (
                  <>
                    Kết quả tìm kiếm
                    <span className="block text-2xl md:text-3xl font-normal mt-2 text-blue-100">
                      "{initialSearch}"
                    </span>
                  </>
                ) : (
                  <>
                    Khám phá
                    <span className="bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent">
                      {" "}Sản phẩm{" "}
                    </span>
                    tuyệt vời
                  </>
                )}
              </h1>
              <p className="text-xl md:text-2xl text-blue-100 mb-8">
                {loading ? 'Đang tải...' : `${totalFilteredCount.toLocaleString()} sản phẩm đang chờ bạn khám phá`}
              </p>
              
              {/* Desktop Search */}
              <div className="hidden md:block max-w-2xl mx-auto">
                <ProductSearch 
                  placeholder="Tìm kiếm sản phẩm mơ ước của bạn..."
                  onSearchSubmit={handleSearchSubmit}
                  className="transform scale-110"
                />
              </div>
            </div>
          </div>
          
          {/* Decorative elements */}
          <div className="absolute top-10 left-10 w-20 h-20 bg-white/10 rounded-full blur-xl"></div>
          <div className="absolute bottom-10 right-10 w-32 h-32 bg-yellow-300/10 rounded-full blur-xl"></div>
          <div className="absolute top-1/2 left-1/4 w-16 h-16 bg-pink-300/10 rounded-full blur-xl"></div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Mobile Search */}
          <div className="md:hidden mb-6">
            <button
              onClick={() => setShowMobileSearch(!showMobileSearch)}
              className="w-full btn bg-white border-2 border-gray-200 text-gray-700 hover:border-blue-300 hover:bg-blue-50 justify-center transition-all duration-200"
            >
              <span className="text-lg mr-2">🔍</span>
              Tìm kiếm sản phẩm
            </button>
            
            {showMobileSearch && (
              <div className="mt-4 p-4 bg-white rounded-xl shadow-lg border border-gray-100">
                <ProductSearch 
                  placeholder="Tìm kiếm sản phẩm..."
                  onSearchSubmit={handleSearchSubmit}
                />
              </div>
            )}
          </div>

          {/* Controls Bar */}
          <div className="mb-8 bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
              {/* Left side - Results info & filters */}
              <div className="flex flex-col sm:flex-row sm:items-center gap-4">
                {/* Results Info */}
                {totalFilteredCount > 0 && (
                  <div className="text-sm text-gray-600 font-medium">
                    <span className="hidden sm:inline">Hiển thị </span>
                    <span className="text-blue-600 font-bold">
                      {startItem.toLocaleString()}-{endItem.toLocaleString()}
                    </span>
                    <span className="hidden sm:inline"> trong số </span>
                    <span className="sm:hidden"> / </span>
                    <span className="text-blue-600 font-bold">
                      {totalFilteredCount.toLocaleString()}
                    </span>
                    <span className="hidden sm:inline"> sản phẩm</span>
                  </div>
                )}

                {/* Clear Filters */}
                {(Object.values(filters).some(val => 
                  val !== '' && val !== false && val !== 'all'
                ) || initialSearch) && (
                  <button
                    onClick={clearAllFilters}
                    className="flex items-center text-sm bg-red-50 text-red-600 hover:bg-red-100 px-3 py-2 rounded-lg transition-colors"
                  >
                    <XMarkIcon className="h-4 w-4 mr-1" />
                    {isSearchMode ? 'Xóa tìm kiếm' : 'Xóa bộ lọc'}
                  </button>
                )}
              </div>

              {/* Right side - Controls */}
              <div className="flex items-center gap-3">
                {/* Sort Dropdown */}
                <div className="relative">
                  <select
                    value={sortBy}
                    onChange={(e) => handleSortChange(e.target.value)}
                    className="appearance-none bg-white border border-gray-300 rounded-xl px-4 py-2 pr-8 text-sm font-medium text-gray-700 hover:border-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                  >
                    {sortOptions.map((option) => (
                      <option key={option.value} value={option.value}>
                        {option.icon} {option.label}
                      </option>
                    ))}
                  </select>
                  <ChevronDownIcon className="absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none" />
                </div>

                {/* View Mode Toggle */}
                <div className="flex items-center bg-gray-100 rounded-xl p-1">
                  <button
                    onClick={() => setViewMode('grid')}
                    className={`p-2 rounded-lg transition-all duration-200 ${viewMode === 'grid' 
                      ? 'bg-white text-blue-600 shadow-sm' 
                      : 'text-gray-600 hover:text-gray-900'
                    }`}
                    title="Lưới"
                  >
                    <Squares2X2Icon className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => setViewMode('list')}
                    className={`p-2 rounded-lg transition-all duration-200 ${viewMode === 'list' 
                      ? 'bg-white text-blue-600 shadow-sm' 
                      : 'text-gray-600 hover:text-gray-900'
                    }`}
                    title="Danh sách"
                  >
                    <ListBulletIcon className="h-4 w-4" />
                  </button>
                </div>

                {/* Filter Toggle */}
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 ${
                    showFilters
                      ? 'bg-blue-100 text-blue-700 border border-blue-200'
                      : 'bg-white border border-gray-300 text-gray-700 hover:border-blue-300 hover:bg-blue-50'
                  }`}
                >
                  <FunnelIcon className="h-4 w-4" />
                  <span className="hidden sm:inline">Bộ lọc</span>
                  {Object.values(filters).some(val => 
                    val !== '' && val !== false && val !== 'all'
                  ) && (
                    <span className="w-2 h-2 bg-red-500 rounded-full"></span>
                  )}
                </button>
              </div>
            </div>
          </div>

          <div className="flex gap-8">
            {/* Sidebar Filters - Desktop */}
            <div className="hidden lg:block w-80 flex-shrink-0">
              <div className="sticky top-8">
                <ProductFilter 
                  onFilterChange={handleFilterChange}
                  initialFilters={filters}
                  className="bg-white rounded-xl shadow-sm border border-gray-100"
                />
              </div>
            </div>

            {/* Mobile Filters Modal */}
            {showFilters && (
              <div className="lg:hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex">
                <div className="bg-white w-full max-w-sm h-full overflow-y-auto">
                  <div className="p-4 border-b border-gray-200 bg-gradient-to-r from-blue-500 to-purple-500 text-white">
                    <div className="flex items-center justify-between">
                      <h3 className="text-lg font-semibold">🎯 Bộ lọc sản phẩm</h3>
                      <button
                        onClick={() => setShowFilters(false)}
                        className="text-white hover:text-gray-200 p-1"
                      >
                        <XMarkIcon className="h-6 w-6" />
                      </button>
                    </div>
                  </div>
                  <div className="p-4">
                    <ProductFilter 
                      onFilterChange={handleFilterChange}
                      initialFilters={filters}
                    />
                  </div>
                </div>
                <div 
                  className="flex-1" 
                  onClick={() => setShowFilters(false)} 
                />
              </div>
            )}

            {/* Main Content */}
            <div className="flex-1 min-w-0">
              {/* Error State */}
              {error && (
                <div className="bg-red-50 border-l-4 border-red-400 rounded-lg p-6 mb-6">
                  <div className="flex items-center">
                    <div className="text-red-600 mr-3 text-2xl">⚠️</div>
                    <div>
                      <h3 className="text-lg font-medium text-red-800">
                        Oops! Có lỗi xảy ra
                      </h3>
                      <p className="text-red-700 mt-1">
                        {error.message || 'Không thể tải sản phẩm. Vui lòng thử lại sau.'}
                      </p>
                      <button
                        onClick={() => {
                          if (isSearchMode) {
                            search(initialSearch);
                          } else {
                            productsHook.refetch();
                          }
                        }}
                        className="mt-3 btn bg-red-100 text-red-800 hover:bg-red-200 border-red-200"
                      >
                        🔄 Thử lại
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* No Results */}
              {!loading && totalFilteredCount === 0 && (
                <div className="text-center py-12">
                  <div className="text-6xl mb-4">🔍</div>
                  <h3 className="text-xl font-medium text-gray-900 mb-2">
                    Không tìm thấy sản phẩm
                  </h3>
                  <div className="flex items-center justify-center gap-4 mt-4">
                    <button
                      onClick={clearAllFilters}
                      className="px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors"
                    >
                      Xóa bộ lọc
                    </button>
                    <button
                      onClick={() => window.location.reload()}
                      className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
                    >
                      Làm mới trang
                    </button>
                  </div>
                </div>
              )}

              {/* Products List */}
              <ProductList
                products={currentProducts}
                loading={loading}
                viewMode={viewMode}
                showLoadMore={false}
                hasNextPage={currentPage < totalPages}
                loadingMore={false}
              />

              {/* Pagination */}
              {totalPages > 1 && !loading && (
                <div className="mt-12 flex justify-center">
                  <nav className="flex items-center space-x-2">
                    {/* Previous Button */}
                    <button
                      onClick={() => handlePageChange(currentPage - 1)}
                      disabled={currentPage === 1}
                      className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                    >
                      ← Trước
                    </button>

                    {/* Page Numbers */}
                    {Array.from({ length: Math.min(totalPages, 7) }, (_, i) => {
                      let pageNum;
                      if (totalPages <= 7) {
                        pageNum = i + 1;
                      } else if (currentPage <= 3) {
                        pageNum = i + 1;
                      } else if (currentPage >= totalPages - 2) {
                        pageNum = totalPages - 6 + i;
                      } else {
                        pageNum = currentPage - 3 + i;
                      }

                      return (
                        <button
                          key={pageNum}
                          onClick={() => handlePageChange(pageNum)}
                          className={`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
                            currentPage === pageNum
                              ? 'bg-blue-600 text-white shadow-lg'
                              : 'text-gray-700 bg-white border border-gray-300 hover:bg-gray-50'
                          }`}
                        >
                          {pageNum}
                        </button>
                      );
                    })}

                    {/* Next Button */}
                    <button
                      onClick={() => handlePageChange(currentPage + 1)}
                      disabled={currentPage === totalPages}
                      className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                    >
                      Sau →
                    </button>
                  </nav>
                </div>
              )}
            </div>
          </div>
        </div>
      </Layout>
    </ProtectedRoute>
  );
};

export default ProductsPage;
====================================================================================================
END OF FILE: webfrontend/src/pages/ProductsPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/ProductDetailPage.jsx
====================================================================================================

// src/pages/ProductDetailPage.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Layout from '../components/common/Layout';
import { useProduct } from '../hooks/useProducts';
import { formatPrice, getImageUrl, calculateDiscountPercentage } from '../lib/utils';
import {
  HeartIcon,
  ShoppingCartIcon,
  CheckIcon,
  XMarkIcon,
  ArrowLeftIcon,
  ShareIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  MinusIcon,
  PlusIcon,
  ExclamationTriangleIcon,
  GlobeAltIcon,
  BuildingOfficeIcon,
  CalendarIcon,
  MapPinIcon
} from '@heroicons/react/24/outline';
import {
  HeartIcon as HeartSolidIcon
} from '@heroicons/react/24/solid';
import toast from 'react-hot-toast';

const ProductDetailPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { product, loading, error } = useProduct(id);

  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const [quantity, setQuantity] = useState(1);
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [showImageModal, setShowImageModal] = useState(false);

  useEffect(() => {
    if (product) {
      document.title = `${product.name} - SmartShop`;
    }
    return () => {
      document.title = 'SmartShop';
    };
  }, [product]);

  if (loading) {
    return (
      <Layout>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <ProductDetailSkeleton />
        </div>
      </Layout>
    );
  }

  if (error || !product) {
    return (
      <Layout>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center py-12">
            <ExclamationTriangleIcon className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Không tìm thấy sản phẩm
            </h2>
            <p className="text-gray-600 mb-6">
              Sản phẩm có thể đã bị xóa hoặc không tồn tại.
            </p>
            <button
              onClick={() => navigate('/products')}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <ArrowLeftIcon className="h-4 w-4 mr-2" />
              Quay lại danh sách sản phẩm
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  const {
    name,
    description,
    price,
    originalPrice,
    images = [],
    stock = 0,
    category,
    brand,
    isFeatured,
    sku,
    createdAt,
    updatedAt
  } = product;

  const discount = originalPrice && originalPrice > price 
    ? calculateDiscountPercentage(originalPrice, price) 
    : 0;

  const handleQuantityChange = (change) => {
    const newQuantity = quantity + change;
    if (newQuantity >= 1 && newQuantity <= stock) {
      setQuantity(newQuantity);
    }
  };

  const handleAddToCart = () => {
    if (stock === 0) {
      toast.error('Sản phẩm đã hết hàng!');
      return;
    }
    if (quantity > stock) {
      toast.error('Số lượng vượt quá hàng tồn kho!');
      return;
    }
    // TODO: Implement add to cart functionality
    toast.success('Đã thêm vào giỏ hàng!');
  };

  const handleBuyNow = () => {
    if (stock === 0) {
      toast.error('Sản phẩm đã hết hàng!');
      return;
    }
    if (quantity > stock) {
      toast.error('Số lượng vượt quá hàng tồn kho!');
      return;
    }
    // TODO: Implement buy now functionality
    navigate('/checkout');
  };

  const handleShare = async () => {
    try {
      if (navigator.share) {
        await navigator.share({
          title: product.name,
          text: product.description,
          url: window.location.href
        });
      } else {
        await navigator.clipboard.writeText(window.location.href);
        toast.success('Đã sao chép link sản phẩm!');
      }
    } catch (error) {
      console.error('Error sharing:', error);
      toast.error('Không thể chia sẻ sản phẩm!');
    }
  };

  const handleWishlist = () => {
    setIsWishlisted(!isWishlisted);
    toast.success(isWishlisted ? 'Đã xóa khỏi yêu thích!' : 'Đã thêm vào yêu thích!');
  };

  const renderImageGallery = () => (
    <div className="space-y-4">
      {/* Main Image */}
      <div className="relative aspect-square bg-gray-100 rounded-2xl overflow-hidden group">
        <img
          src={getImageUrl(images[selectedImageIndex] || '/placeholder-product.jpg')}
          alt={name}
          className="w-full h-full object-cover cursor-zoom-in transition-transform duration-300 group-hover:scale-105"
          onClick={() => setShowImageModal(true)}
        />
        
        {/* Badges */}
        <div className="absolute top-4 left-4 flex flex-col gap-2">
          {isFeatured && (
            <span className="px-3 py-1 bg-gradient-to-r from-yellow-400 to-orange-400 text-white text-sm font-bold rounded-lg shadow-lg">
              ⭐ Nổi bật
            </span>
          )}
          {discount > 0 && (
            <span className="px-3 py-1 bg-gradient-to-r from-red-500 to-pink-500 text-white text-sm font-bold rounded-lg shadow-lg">
              -{discount}%
            </span>
          )}
        </div>

        {/* Navigation arrows */}
        {images.length > 1 && (
          <>
            <button
              onClick={(e) => {
                e.stopPropagation();
                setSelectedImageIndex(prev => prev > 0 ? prev - 1 : images.length - 1);
              }}
              className="absolute left-4 top-1/2 transform -translate-y-1/2 w-10 h-10 bg-white/80 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-white transition-colors opacity-0 group-hover:opacity-100 shadow-lg"
            >
              <ChevronLeftIcon className="h-5 w-5 text-gray-700" />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation();
                setSelectedImageIndex(prev => prev < images.length - 1 ? prev + 1 : 0);
              }}
              className="absolute right-4 top-1/2 transform -translate-y-1/2 w-10 h-10 bg-white/80 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-white transition-colors opacity-0 group-hover:opacity-100 shadow-lg"
            >
              <ChevronRightIcon className="h-5 w-5 text-gray-700" />
            </button>
          </>
        )}

        {/* Image indicator */}
        {images.length > 1 && (
          <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
            {images.map((_, index) => (
              <button
                key={index}
                onClick={(e) => {
                  e.stopPropagation();
                  setSelectedImageIndex(index);
                }}
                className={`w-2 h-2 rounded-full transition-all ${
                  index === selectedImageIndex 
                    ? 'bg-white w-4' 
                    : 'bg-white/60 hover:bg-white/80'
                }`}
              />
            ))}
          </div>
        )}
      </div>

      {/* Thumbnail Images */}
      {images.length > 1 && (
        <div className="grid grid-cols-6 gap-2">
          {images.map((image, index) => (
            <button
              key={index}
              onClick={() => setSelectedImageIndex(index)}
              className={`aspect-square rounded-lg overflow-hidden border-2 transition-all ${
                index === selectedImageIndex
                  ? 'border-blue-500 ring-2 ring-blue-500/20'
                  : 'border-transparent hover:border-gray-200'
              }`}
            >
              <img
                src={getImageUrl(image)}
                alt={`${name} - view ${index + 1}`}
                className="w-full h-full object-cover"
              />
            </button>
          ))}
        </div>
      )}
    </div>
  );

  const renderProductInfo = () => (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <div className="flex items-center gap-2 text-sm text-gray-600 mb-2">
          <span>{category?.name || 'Chưa phân loại'}</span>
          <span>•</span>
          <span className="font-medium text-blue-600">{brand?.name || 'Không xác định'}</span>
        </div>
        <h1 className="text-2xl font-bold text-gray-900">{name}</h1>
      </div>

      {/* Price */}
      <div className="flex items-baseline gap-3">
        <span className="text-3xl font-bold text-gray-900">
          {formatPrice(price)}
        </span>
        {originalPrice && originalPrice > price && (
          <span className="text-lg text-gray-500 line-through">
            {formatPrice(originalPrice)}
          </span>
        )}
      </div>

      {/* Stock Status */}
      <div className="flex items-center gap-2">
        {stock > 0 ? (
          <>
            <CheckIcon className="w-5 h-5 text-green-600" />
            <span className="text-sm font-medium text-green-600">
              Còn {stock} sản phẩm
            </span>
          </>
        ) : (
          <>
            <XMarkIcon className="w-5 h-5 text-red-600" />
            <span className="text-sm font-medium text-red-600">
              Hết hàng
            </span>
          </>
        )}
      </div>

      {/* SKU */}
      <div className="text-sm text-gray-600">
        SKU: <span className="font-medium">{sku}</span>
      </div>

      {/* Quantity */}
      <div className="flex items-center gap-4">
        <span className="text-sm font-medium text-gray-700">Số lượng:</span>
        <div className="flex items-center">
          <button
            onClick={() => handleQuantityChange(-1)}
            disabled={quantity <= 1}
            className="w-10 h-10 rounded-l-lg border border-r-0 border-gray-300 flex items-center justify-center hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <MinusIcon className="w-4 h-4 text-gray-600" />
          </button>
          <input
            type="number"
            value={quantity}
            onChange={(e) => {
              const val = parseInt(e.target.value);
              if (val >= 1 && val <= stock) setQuantity(val);
            }}
            className="w-16 h-10 border-y border-gray-300 text-center focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />
          <button
            onClick={() => handleQuantityChange(1)}
            disabled={quantity >= stock}
            className="w-10 h-10 rounded-r-lg border border-l-0 border-gray-300 flex items-center justify-center hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <PlusIcon className="w-4 h-4 text-gray-600" />
          </button>
        </div>
      </div>

      {/* Actions */}
      <div className="flex items-center gap-4">
        <button
          onClick={handleAddToCart}
          disabled={stock === 0}
          className="flex-1 btn btn-primary"
        >
          <ShoppingCartIcon className="w-5 h-5 mr-2" />
          Thêm vào giỏ
        </button>
        <button
          onClick={handleBuyNow}
          disabled={stock === 0}
          className="flex-1 btn btn-secondary"
        >
          Mua ngay
        </button>
        <button
          onClick={handleWishlist}
          className={`w-12 h-12 rounded-lg border flex items-center justify-center transition-colors ${
            isWishlisted
              ? 'bg-red-50 border-red-200 text-red-600'
              : 'border-gray-300 text-gray-600 hover:bg-gray-50'
          }`}
        >
          {isWishlisted ? (
            <HeartSolidIcon className="w-6 h-6" />
          ) : (
            <HeartIcon className="w-6 h-6" />
          )}
        </button>
        <button
          onClick={handleShare}
          className="w-12 h-12 rounded-lg border border-gray-300 flex items-center justify-center text-gray-600 hover:bg-gray-50"
        >
          <ShareIcon className="w-6 h-6" />
        </button>
      </div>

      {/* Brand Info */}
      {brand && (
        <div className="bg-gray-50 rounded-xl p-4">
          <div className="flex items-start gap-4">
            {brand.logo && (
              <img 
                src={getImageUrl(brand.logo)}
                alt={brand.name}
                className="w-16 h-16 object-contain rounded-lg bg-white p-2"
              />
            )}
            <div className="flex-1">
              <h3 className="font-medium text-gray-900 mb-1">{brand.name}</h3>
              <p className="text-sm text-gray-600 mb-3">{brand.description}</p>
              <div className="grid grid-cols-2 gap-4 text-sm">
                {brand.website && (
                  <a 
                    href={brand.website}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="flex items-center text-blue-600 hover:text-blue-700"
                  >
                    <GlobeAltIcon className="w-4 h-4 mr-1" />
                    Website
                  </a>
                )}
                {brand.country && (
                  <div className="flex items-center text-gray-600">
                    <MapPinIcon className="w-4 h-4 mr-1" />
                    {brand.country}
                  </div>
                )}
                {brand.foundedYear && (
                  <div className="flex items-center text-gray-600">
                    <CalendarIcon className="w-4 h-4 mr-1" />
                    Thành lập: {brand.foundedYear}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Category Info */}
      {category && category.description && (
        <div className="bg-gray-50 rounded-xl p-4">
          <div className="flex items-start gap-4">
            {category.image && (
              <img 
                src={getImageUrl(category.image)}
                alt={category.name}
                className="w-16 h-16 object-cover rounded-lg"
              />
            )}
            <div>
              <h3 className="font-medium text-gray-900 mb-1">{category.name}</h3>
              <p className="text-sm text-gray-600">{category.description}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );

  return (
    <Layout>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Breadcrumbs */}
        <nav className="flex items-center space-x-2 text-sm text-gray-500 mb-8">
          <button onClick={() => navigate('/')} className="hover:text-gray-900">
            Trang chủ
          </button>
          <span>/</span>
          <button onClick={() => navigate('/products')} className="hover:text-gray-900">
            Sản phẩm
          </button>
          {category && (
            <>
              <span>/</span>
              <button 
                onClick={() => navigate(`/categories/${category._id}`)}
                className="hover:text-gray-900"
              >
                {category.name}
              </button>
            </>
          )}
          <span>/</span>
          <span className="text-gray-900">{name}</span>
        </nav>

        {/* Product Details */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-12">
          <div>{renderImageGallery()}</div>
          <div>{renderProductInfo()}</div>
        </div>

        {/* Description */}
        <div className="prose prose-sm max-w-none bg-white rounded-xl p-6 shadow-sm border border-gray-100">
          <h2 className="text-xl font-bold text-gray-900 mb-4">Mô tả sản phẩm</h2>
          <div className="text-gray-600">
            {description || 'Chưa có mô tả cho sản phẩm này.'}
          </div>
        </div>

        {/* Image Modal */}
        {showImageModal && (
          <div className="fixed inset-0 z-50 bg-black/90 flex items-center justify-center">
            <button
              onClick={() => setShowImageModal(false)}
              className="absolute top-4 right-4 text-white hover:text-gray-300"
            >
              <XMarkIcon className="w-8 h-8" />
            </button>
            <img
              src={getImageUrl(images[selectedImageIndex])}
              alt={name}
              className="max-w-full max-h-full object-contain"
            />
          </div>
        )}
      </div>
    </Layout>
  );
};

const ProductDetailSkeleton = () => (
  <div className="animate-pulse">
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
      {/* Image Skeleton */}
      <div>
        <div className="aspect-square bg-gray-200 rounded-2xl mb-4" />
        <div className="grid grid-cols-6 gap-2">
          {[...Array(6)].map((_, i) => (
            <div key={i} className="aspect-square bg-gray-200 rounded-lg" />
          ))}
        </div>
      </div>

      {/* Info Skeleton */}
      <div className="space-y-6">
        <div>
          <div className="h-4 bg-gray-200 rounded w-1/4 mb-2" />
          <div className="h-8 bg-gray-200 rounded w-3/4" />
        </div>
        <div className="h-8 bg-gray-200 rounded w-1/3" />
        <div className="h-6 bg-gray-200 rounded w-1/4" />
        <div className="h-10 bg-gray-200 rounded" />
        <div className="flex gap-4">
          <div className="h-12 bg-gray-200 rounded flex-1" />
          <div className="h-12 bg-gray-200 rounded flex-1" />
          <div className="h-12 w-12 bg-gray-200 rounded" />
          <div className="h-12 w-12 bg-gray-200 rounded" />
        </div>
        <div className="h-40 bg-gray-200 rounded" />
      </div>
    </div>
  </div>
);

export default ProductDetailPage;
====================================================================================================
END OF FILE: webfrontend/src/pages/ProductDetailPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/CategoriesPage.jsx
====================================================================================================


====================================================================================================
END OF FILE: webfrontend/src/pages/CategoriesPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/BrandsPage.jsx
====================================================================================================


====================================================================================================
END OF FILE: webfrontend/src/pages/BrandsPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/CartPage.jsx
====================================================================================================


====================================================================================================
END OF FILE: webfrontend/src/pages/CartPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/NotFoundPage.jsx
====================================================================================================

// src/pages/NotFoundPage.jsx
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const NotFoundPage = () => {
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();

  const handleGoBack = () => {
    navigate(-1);
  };

  const handleGoHome = () => {
    navigate(isAuthenticated ? '/' : '/login');
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center items-center px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full text-center">
        {/* 404 Illustration */}
        <div className="mb-8">
          <div className="text-8xl">🔍</div>
          <h1 className="mt-4 text-6xl font-bold text-gray-900">404</h1>
        </div>

        {/* Error Message */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            Oops! Trang không tồn tại
          </h2>
          <p className="text-gray-600 mb-6">
            Trang bạn đang tìm kiếm có thể đã bị xóa, đổi tên hoặc tạm thời không khả dụng.
          </p>
        </div>

        {/* Action Buttons */}
        <div className="space-y-4">
          <button
            onClick={handleGoHome}
            className="btn btn-primary w-full"
          >
            🏠 Về trang chủ
          </button>
          
          <button
            onClick={handleGoBack}
            className="btn btn-secondary w-full"
          >
            ← Quay lại trang trước
          </button>
        </div>

        {/* Additional Links */}
        <div className="mt-8 pt-6 border-t border-gray-200">
          <p className="text-sm text-gray-500 mb-4">
            Hoặc bạn có thể:
          </p>
          
          <div className="space-y-2">
            {isAuthenticated ? (
              <>
                <Link
                  to="/"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  📱 Trang chủ SmartShop
                </Link>
                <Link
                  to="/products"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  🛍️ Xem sản phẩm
                </Link>
                <Link
                  to="/cart"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  🛒 Giỏ hàng của tôi
                </Link>
              </>
            ) : (
              <>
                <Link
                  to="/login"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  🔐 Đăng nhập
                </Link>
                <Link
                  to="/register"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  📝 Tạo tài khoản mới
                </Link>
              </>
            )}
          </div>
        </div>

        {/* Help Text */}
        <div className="mt-8 p-4 bg-blue-50 rounded-lg">
          <p className="text-sm text-blue-700">
            💡 <strong>Mẹo:</strong> Kiểm tra lại URL hoặc liên hệ với chúng tôi nếu bạn nghĩ đây là lỗi hệ thống.
          </p>
        </div>
      </div>
    </div>
  );
};

export default NotFoundPage;
====================================================================================================
END OF FILE: webfrontend/src/pages/NotFoundPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/admin/DashboardPage.jsx
====================================================================================================

// src/pages/admin/DashboardPage.jsx
import React from 'react';
import {
  CubeIcon,
  TagIcon,
  BuildingStorefrontIcon,
  ShoppingCartIcon,
  UserGroupIcon,
  ChartBarIcon
} from '@heroicons/react/24/outline';

import ProductTable from './products/ProductTable';
import ProductFilter from './products/ProductFilter';

const DashboardPage = () => {
  // Mock data - sẽ được thay thế bằng real data sau
  const stats = [
    {
      name: 'Tổng sản phẩm',
      value: '1,234',
      change: '+12%',
      changeType: 'positive',
      icon: CubeIcon,
      color: 'blue'
    },
    {
      name: 'Đơn hàng mới',
      value: '56',
      change: '+8%',
      changeType: 'positive',
      icon: ShoppingCartIcon,
      color: 'green'
    },
    {
      name: 'Khách hàng',
      value: '2,345',
      change: '+15%',
      changeType: 'positive',
      icon: UserGroupIcon,
      color: 'purple'
    },
    {
      name: 'Doanh thu',
      value: '₫234M',
      change: '-2%',
      changeType: 'negative',
      icon: ChartBarIcon,
      color: 'red'
    }
  ];

  const getColorClasses = (color, type = 'bg') => {
    const colors = {
      blue: type === 'bg' ? 'bg-blue-500' : 'text-blue-600',
      green: type === 'bg' ? 'bg-green-500' : 'text-green-600',
      purple: type === 'bg' ? 'bg-purple-500' : 'text-purple-600',
      red: type === 'bg' ? 'bg-red-500' : 'text-red-600',
    };
    return colors[color] || colors.blue;
  };

  return (
    <div className="space-y-6">
      {/* Welcome Section */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-6 text-white">
        <h1 className="text-2xl font-bold mb-2">
          Chào mừng trở lại! 👋
        </h1>
        <p className="text-blue-100">
          Đây là tổng quan về hoạt động kinh doanh của SmartShop
        </p>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <div key={stat.name} className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">{stat.name}</p>
                <p className="text-2xl font-bold text-gray-900">{stat.value}</p>
                <p className={`text-sm ${
                  stat.changeType === 'positive' ? 'text-green-600' : 'text-red-600'
                }`}>
                  {stat.change} từ tháng trước
                </p>
              </div>
              <div className={`w-12 h-12 ${getColorClasses(stat.color)} rounded-lg flex items-center justify-center`}>
                <stat.icon className="h-6 w-6 text-white" />
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Quick Actions */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Orders */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">Đơn hàng gần đây</h3>
          </div>
          <div className="p-6">
            <div className="text-center py-8">
              <ShoppingCartIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">Tính năng đang phát triển</p>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">Thao tác nhanh</h3>
          </div>
          <div className="p-6 space-y-3">
            <button className="w-full btn btn-primary justify-start">
              <CubeIcon className="h-5 w-5 mr-3" />
              Thêm sản phẩm mới
            </button>
            <button className="w-full btn btn-secondary justify-start">
              <TagIcon className="h-5 w-5 mr-3" />
              Quản lý danh mục
            </button>
            <button className="w-full btn btn-secondary justify-start">
              <BuildingStorefrontIcon className="h-5 w-5 mr-3" />
              Quản lý thương hiệu
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DashboardPage;
====================================================================================================
END OF FILE: webfrontend/src/pages/admin/DashboardPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/admin/AdminProductsPage.jsx
====================================================================================================

// src/pages/admin/AdminProductsPage.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import {
  PlusIcon,
  MagnifyingGlassIcon,
  FunnelIcon,
  ViewColumnsIcon,
  Squares2X2Icon,
  ArrowDownTrayIcon,
  ChartBarIcon,
  CogIcon
} from '@heroicons/react/24/outline';
import { useProducts } from '../../hooks/useProducts';
import ProductTable from './products/ProductTable';
import AdminProductFilter from './products/AdminProductFilter';

const AdminProductsPage = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [viewMode, setViewMode] = useState('table'); // 'table' or 'grid'
  const [filters, setFilters] = useState({
    condition: null,
    orderBy: 'CREATED_DESC'
  });

  // Fetch products với current filters
  const { 
    products, 
    totalCount, 
    hasNextPage, 
    loading, 
    error, 
    loadMore, 
    refetch 
  } = useProducts({
    first: 20,
    orderBy: filters.orderBy,
    condition: filters.condition
  });

  const handleSearch = (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      setFilters(prev => ({
        ...prev,
        condition: {
          ...prev.condition,
          name: searchQuery.trim()
        }
      }));
    } else {
      setFilters(prev => ({
        ...prev,
        condition: prev.condition ? { ...prev.condition, name: undefined } : null
      }));
    }
  };

  const handleFilterChange = (newFilters) => {
    setFilters(prev => ({
      ...prev,
      condition: newFilters
    }));
  };

  const handleSortChange = (orderBy) => {
    setFilters(prev => ({
      ...prev,
      orderBy
    }));
  };

  const clearFilters = () => {
    setSearchQuery('');
    setFilters({
      condition: null,
      orderBy: 'CREATED_DESC'
    });
  };

  const hasActiveFilters = () => {
    return searchQuery || filters.condition || filters.orderBy !== 'CREATED_DESC';
  };

  // Calculate stats
  const activeProducts = products.filter(p => p.isActive).length;
  const featuredProducts = products.filter(p => p.isFeatured).length;
  const outOfStockProducts = products.filter(p => p.stock === 0).length;
  const lowStockProducts = products.filter(p => p.stock > 0 && p.stock <= 10).length;

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Quản lý sản phẩm</h1>
          <p className="mt-1 text-sm text-gray-500">
            Quản lý toàn bộ sản phẩm trong hệ thống
          </p>
        </div>
        
        <div className="mt-4 sm:mt-0 flex items-center space-x-3">
          {/* Quick Actions */}
          <Link
            to="/admin/products/create"
            className="btn btn-primary"
          >
            <PlusIcon className="h-4 w-4 mr-2" />
            Thêm sản phẩm
          </Link>
          
          <div className="flex items-center space-x-2">
            <button className="btn btn-secondary text-sm">
              <ArrowDownTrayIcon className="h-4 w-4 mr-2" />
              Export
            </button>
            <button className="btn btn-secondary text-sm">
              <ChartBarIcon className="h-4 w-4 mr-2" />
              Báo cáo
            </button>
            <button className="btn btn-secondary text-sm">
              <CogIcon className="h-4 w-4" />
            </button>
          </div>
        </div>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                <span className="text-blue-600 font-semibold text-sm">📦</span>
              </div>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">Tổng sản phẩm</p>
              <p className="text-2xl font-bold text-gray-900">{totalCount}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                <span className="text-green-600 font-semibold text-sm">✅</span>
              </div>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">Đang bán</p>
              <p className="text-2xl font-bold text-gray-900">{activeProducts}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">
                <span className="text-yellow-600 font-semibold text-sm">⭐</span>
              </div>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">Nổi bật</p>
              <p className="text-2xl font-bold text-gray-900">{featuredProducts}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center">
                <span className="text-orange-600 font-semibold text-sm">⚠️</span>
              </div>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">Sắp hết</p>
              <p className="text-2xl font-bold text-gray-900">{lowStockProducts}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
                <span className="text-red-600 font-semibold text-sm">❌</span>
              </div>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">Hết hàng</p>
              <p className="text-2xl font-bold text-gray-900">{outOfStockProducts}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="p-4 border-b border-gray-200">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0">
            {/* Search */}
            <form onSubmit={handleSearch} className="flex-1 max-w-md">
              <div className="relative">
                <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Tìm kiếm theo tên, SKU, mô tả..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            </form>

            {/* Controls */}
            <div className="flex items-center space-x-3">
              {/* Sort */}
              <select
                value={filters.orderBy}
                onChange={(e) => handleSortChange(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="CREATED_DESC">Mới nhất</option>
                <option value="CREATED_ASC">Cũ nhất</option>
                <option value="NAME_ASC">Tên A-Z</option>
                <option value="NAME_DESC">Tên Z-A</option>
                <option value="PRICE_ASC">Giá thấp đến cao</option>
                <option value="PRICE_DESC">Giá cao đến thấp</option>
                <option value="STOCK_ASC">Tồn kho ít nhất</option>
                <option value="STOCK_DESC">Tồn kho nhiều nhất</option>
              </select>

              {/* Filter Toggle */}
              <button
                onClick={() => setShowFilters(!showFilters)}
                className={`px-3 py-2 border rounded-lg text-sm font-medium transition-colors ${
                  showFilters
                    ? 'bg-blue-50 border-blue-300 text-blue-700'
                    : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                }`}
              >
                <FunnelIcon className="h-4 w-4 mr-2 inline" />
                Bộ lọc
              </button>

              {/* View Mode Toggle */}
              <div className="flex border border-gray-300 rounded-lg">
                <button
                  onClick={() => setViewMode('table')}
                  className={`px-3 py-2 text-sm font-medium transition-colors ${
                    viewMode === 'table'
                      ? 'bg-blue-50 text-blue-700'
                      : 'text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <ViewColumnsIcon className="h-4 w-4" />
                </button>
                <button
                  onClick={() => setViewMode('grid')}
                  className={`px-3 py-2 text-sm font-medium transition-colors border-l border-gray-300 ${
                    viewMode === 'grid'
                      ? 'bg-blue-50 text-blue-700'
                      : 'text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <Squares2X2Icon className="h-4 w-4" />
                </button>
              </div>

              {/* Clear Filters */}
              {hasActiveFilters() && (
                <button
                  onClick={clearFilters}
                  className="px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-900"
                >
                  Xóa bộ lọc
                </button>
              )}
            </div>
          </div>

          {/* Active Filters */}
          {hasActiveFilters() && (
            <div className="mt-3 flex flex-wrap items-center gap-2">
              <span className="text-sm text-gray-500">Bộ lọc đang áp dụng:</span>
              {filters.condition?.name && (
                <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  Tên: {filters.condition.name}
                </span>
              )}
              {filters.orderBy !== 'CREATED_DESC' && (
                <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  Sắp xếp: {
                    {
                      'CREATED_ASC': 'Cũ nhất',
                      'NAME_ASC': 'Tên A-Z',
                      'NAME_DESC': 'Tên Z-A',
                      'PRICE_ASC': 'Giá thấp đến cao',
                      'PRICE_DESC': 'Giá cao đến thấp',
                      'STOCK_ASC': 'Tồn kho ít nhất',
                      'STOCK_DESC': 'Tồn kho nhiều nhất'
                    }[filters.orderBy]
                  }
                </span>
              )}
            </div>
          )}
        </div>

        {/* Filter Panel */}
        {showFilters && (
          <div className="p-4 border-b border-gray-200 bg-gray-50">
            <AdminProductFilter 
              onFilterChange={handleFilterChange}
              className="max-w-4xl"
            />
          </div>
        )}
      </div>

      {/* Products Table/Grid */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        {error ? (
          <div className="p-6 text-center">
            <div className="text-red-500 mb-2">❌</div>
            <p className="text-gray-600 mb-4">Có lỗi xảy ra khi tải dữ liệu</p>
            <button
              onClick={() => refetch()}
              className="btn btn-secondary"
            >
              Thử lại
            </button>
          </div>
        ) : (
          <>
            <ProductTable
              products={products}
              loading={loading}
              viewMode={viewMode}
              isAdmin={true}
            />

            {/* Load More */}
            {hasNextPage && (
              <div className="p-4 border-t border-gray-200 text-center">
                <button
                  onClick={loadMore}
                  disabled={loading}
                  className="btn btn-secondary"
                >
                  {loading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600 mr-2"></div>
                      Đang tải...
                    </>
                  ) : (
                    'Tải thêm sản phẩm'
                  )}
                </button>
              </div>
            )}

            {/* Empty State */}
            {!loading && products.length === 0 && (
              <div className="p-12 text-center">
                <div className="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
                  <span className="text-2xl">📦</span>
                </div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  Chưa có sản phẩm nào
                </h3>
                <p className="text-gray-500 mb-6">
                  Bắt đầu bằng cách thêm sản phẩm đầu tiên của bạn
                </p>
                <Link
                  to="/admin/products/create"
                  className="btn btn-primary"
                >
                  <PlusIcon className="h-4 w-4 mr-2" />
                  Thêm sản phẩm đầu tiên
                </Link>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default AdminProductsPage;
====================================================================================================
END OF FILE: webfrontend/src/pages/admin/AdminProductsPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/admin/CreateProductPage.jsx
====================================================================================================

// src/pages/admin/CreateProductPage.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import ProductForm from './products/ProductForm';
import { useCreateProduct } from '../../hooks/useProducts';
import { useUploadProductImages } from '../../hooks/useUpload';
import toast from 'react-hot-toast';

const CreateProductPage = () => {
  const navigate = useNavigate();
  const { createProduct, loading: createLoading, error: createError } = useCreateProduct();
  const { uploadImages, loading: uploadLoading } = useUploadProductImages();

  const handleSubmit = async (productData, imageFiles) => {
    console.log('🚀 CreateProductPage: Starting product creation...');
    console.log('📝 Product data:', productData);
    console.log('🖼️ Image files:', imageFiles);

    try {
      // Step 1: Create product first
      console.log('🔸 Step 1: Creating product...');
      const createdProduct = await createProduct(productData);
      
      if (!createdProduct) {
        throw new Error('Failed to create product - no product returned');
      }

      if (!createdProduct._id) {
        throw new Error('Failed to create product - no product ID returned');
      }

      console.log('✅ Product created successfully:', createdProduct);

      // Step 2: Upload images if any
      if (imageFiles && imageFiles.length > 0) {
        console.log('🔸 Step 2: Uploading images...');
        
        try {
          const uploadResult = await uploadImages(createdProduct._id, imageFiles);
          
          if (uploadResult && uploadResult.success) {
            console.log('✅ Images uploaded successfully');
            toast.success(`Tạo sản phẩm và upload ${imageFiles.length} ảnh thành công!`);
          } else {
            console.warn('⚠️ Image upload failed:', uploadResult?.message);
            toast.warn(`Sản phẩm đã tạo thành công nhưng upload ảnh thất bại: ${uploadResult?.message || 'Unknown error'}`);
          }
        } catch (uploadError) {
          console.error('❌ Image upload error:', uploadError);
          toast.warn(`Sản phẩm đã tạo thành công nhưng upload ảnh thất bại: ${uploadError.message}`);
        }
      } else {
        console.log('ℹ️ No images to upload');
        toast.success('Tạo sản phẩm thành công!');
      }

      // Step 3: Navigate back to products list
      console.log('🔸 Step 3: Navigating to products list...');
      navigate('/admin/products');

    } catch (error) {
      console.error('❌ Create product error:', error);
      
      // Handle specific error cases
      if (error.message.includes('duplicate key error')) {
        toast.error('SKU đã tồn tại, vui lòng chọn SKU khác');
      } else if (error.message.includes('Category not found')) {
        toast.error('Danh mục không tồn tại');
      } else if (error.message.includes('Brand not found')) {
        toast.error('Thương hiệu không tồn tại');
      } else {
        toast.error(`Lỗi tạo sản phẩm: ${error.message}`);
      }
    }
  };

  const handleCancel = () => {
    navigate('/admin/products');
  };

  const isLoading = createLoading || uploadLoading;

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Thêm sản phẩm mới</h1>
        <p className="mt-1 text-sm text-gray-500">
          Tạo sản phẩm mới cho cửa hàng
        </p>
      </div>

      {/* Error display */}
      {createError && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center">
            <div className="text-red-600 mr-3">⚠️</div>
            <div>
              <h3 className="text-sm font-medium text-red-800">
                Lỗi tạo sản phẩm
              </h3>
              <p className="text-sm text-red-700 mt-1">
                {createError.message}
              </p>
            </div>
          </div>
        </div>
      )}

      <ProductForm 
        onSubmit={handleSubmit}
        onCancel={handleCancel}
        loading={isLoading}
      />
    </div>
  );
};

export default CreateProductPage;
====================================================================================================
END OF FILE: webfrontend/src/pages/admin/CreateProductPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/admin/EditProductPage.jsx
====================================================================================================

// src/pages/admin/EditProductPage.jsx
import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import ProductForm from './products/ProductForm';
import { useProduct, useUpdateProductWithImages } from '../../hooks/useProducts';
import toast from 'react-hot-toast';

const EditProductPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { product, loading: productLoading, error: productError } = useProduct(id);
  const { updateProductWithImages, loading: updateLoading, error: updateError } = useUpdateProductWithImages();

  const handleSubmit = async (productData, imageFiles) => {
    console.log('🔄 EditProductPage: Starting product update...');
    console.log('📝 Product data:', productData);
    console.log('🖼️ Image files:', imageFiles);

    try {
      const updatedProduct = await updateProductWithImages(id, productData, imageFiles);
      
      console.log('✅ Product updated successfully:', updatedProduct);
      
      // Show success message and navigate
      if (imageFiles && imageFiles.length > 0) {
        toast.success(`Cập nhật sản phẩm và upload ${imageFiles.length} ảnh thành công!`);
      } else {
        toast.success('Cập nhật sản phẩm thành công!');
      }
      
      navigate('/admin/products');
      
    } catch (error) {
      console.error('❌ Update product error:', error);
      
      // Handle specific error cases
      if (error.message.includes('duplicate key error')) {
        toast.error('SKU đã tồn tại, vui lòng chọn SKU khác');
      } else if (error.message.includes('Category not found')) {
        toast.error('Danh mục không tồn tại');
      } else if (error.message.includes('Brand not found')) {
        toast.error('Thương hiệu không tồn tại');
      } else {
        toast.error(`Lỗi cập nhật sản phẩm: ${error.message}`);
      }
    }
  };

  const handleCancel = () => {
    navigate('/admin/products');
  };

  // Loading state
  if (productLoading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/3 mb-2"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        </div>
        <div className="bg-white rounded-lg shadow p-6">
          <div className="animate-pulse space-y-4">
            <div className="h-10 bg-gray-200 rounded"></div>
            <div className="h-32 bg-gray-200 rounded"></div>
            <div className="grid grid-cols-2 gap-4">
              <div className="h-10 bg-gray-200 rounded"></div>
              <div className="h-10 bg-gray-200 rounded"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Error state
  if (productError) {
    return (
      <div className="space-y-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Chỉnh sửa sản phẩm</h1>
          <p className="mt-1 text-sm text-gray-500">
            Có lỗi xảy ra khi tải thông tin sản phẩm
          </p>
        </div>
        
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center">
            <div className="text-red-600 mr-3">⚠️</div>
            <div>
              <h3 className="text-sm font-medium text-red-800">
                Lỗi tải sản phẩm
              </h3>
              <p className="text-sm text-red-700 mt-1">
                {productError.message}
              </p>
            </div>
          </div>
          <div className="mt-4">
            <button
              onClick={() => navigate('/admin/products')}
              className="btn btn-secondary mr-3"
            >
              Quay lại danh sách
            </button>
            <button
              onClick={() => window.location.reload()}
              className="btn btn-primary"
            >
              Thử lại
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Product not found
  if (!product) {
    return (
      <div className="space-y-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Chỉnh sửa sản phẩm</h1>
          <p className="mt-1 text-sm text-gray-500">
            Không tìm thấy sản phẩm
          </p>
        </div>
        
        <div className="text-center py-12">
          <div className="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
            <span className="text-2xl">📦</span>
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            Không tìm thấy sản phẩm
          </h3>
          <p className="text-gray-500 mb-6">
            Sản phẩm có thể đã bị xóa hoặc không tồn tại
          </p>
          <button
            onClick={() => navigate('/admin/products')}
            className="btn btn-primary"
          >
            Quay lại danh sách
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Chỉnh sửa sản phẩm</h1>
        <p className="mt-1 text-sm text-gray-500">
          Cập nhật thông tin cho: <span className="font-medium">{product.name}</span>
        </p>
      </div>

      {/* Update Error display */}
      {updateError && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center">
            <div className="text-red-600 mr-3">⚠️</div>
            <div>
              <h3 className="text-sm font-medium text-red-800">
                Lỗi cập nhật sản phẩm
              </h3>
              <p className="text-sm text-red-700 mt-1">
                {updateError.message}
              </p>
            </div>
          </div>
        </div>
      )}

      <ProductForm 
        product={product}
        onSubmit={handleSubmit}
        onCancel={handleCancel}
        loading={updateLoading}
      />
    </div>
  );
};

export default EditProductPage;
====================================================================================================
END OF FILE: webfrontend/src/pages/admin/EditProductPage.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/admin/products/ProductTable.jsx
====================================================================================================

// src/components/admin/products/ProductTable.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  PencilIcon, 
  TrashIcon, 
  EyeIcon,
  PhotoIcon,
  CheckCircleIcon,
  XCircleIcon,
  StarIcon,
  ArrowsUpDownIcon,
  XMarkIcon
} from '@heroicons/react/24/outline';
import { formatPrice, formatDate, getImageUrl } from '../../../lib/utils';
import { useDeleteProduct, useUpdateProductImages, useSetMainProductImage, useDeleteProductImage } from '../../../hooks/useProducts';

const ProductTable = ({ 
  products = [], 
  loading = false, 
  viewMode = 'table'
}) => {
  const navigate = useNavigate();
  const { deleteProduct, loading: deleteLoading } = useDeleteProduct();
  const { updateProductImages, loading: updateImagesLoading } = useUpdateProductImages();
  const { setMainProductImage, loading: setMainLoading } = useSetMainProductImage();
  const { deleteProductImage, loading: deleteImageLoading } = useDeleteProductImage();
  
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showImageModal, setShowImageModal] = useState(false);

  const handleEdit = (productId) => {
    navigate(`/admin/products/edit/${productId}`);
  };

  const handleView = (productId) => {
    // Sẽ implement sau
    console.log('View product:', productId);
  };

  const handleDelete = async (productId, productName) => {
    if (window.confirm(`Bạn có chắc chắn muốn xóa sản phẩm "${productName}"?`)) {
      await deleteProduct(productId);
    }
  };

  const handleImageClick = (product) => {
    setSelectedProduct(product);
    setShowImageModal(true);
  };

  const handleSetMainImage = async (productId, imageIndex) => {
    try {
      await setMainProductImage({
        variables: {
          id: productId,
          imageIndex
        }
      });
    } catch (error) {
      console.error('Error setting main image:', error);
      alert('Có lỗi xảy ra khi đặt ảnh chính');
    }
  };

  const handleDeleteImage = async (productId, imageIndex) => {
    if (window.confirm('Bạn có chắc chắn muốn xóa ảnh này?')) {
      try {
        await deleteProductImage({
          variables: {
            id: productId,
            imageIndex
          }
        });
      } catch (error) {
        console.error('Error deleting image:', error);
        alert('Có lỗi xảy ra khi xóa ảnh');
      }
    }
  };

  // Image Modal Component
  const ImageModal = () => {
    if (!selectedProduct) return null;

    return (
      <div className="fixed inset-0 z-50 overflow-y-auto">
        <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
          <div className="fixed inset-0 transition-opacity" aria-hidden="true">
            <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
          </div>

          <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
            <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
              <div className="sm:flex sm:items-start">
                <div className="mt-3 text-center sm:mt-0 sm:text-left w-full">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg leading-6 font-medium text-gray-900">
                      Quản lý ảnh sản phẩm
                    </h3>
                    <button
                      onClick={() => setShowImageModal(false)}
                      className="text-gray-400 hover:text-gray-500"
                    >
                      <XMarkIcon className="h-6 w-6" />
                    </button>
                  </div>
                  
                  <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
                    {selectedProduct.images?.map((image, index) => (
                      <div key={index} className="relative group">
                        <img
                          src={getImageUrl(image)}
                          alt={`${selectedProduct.name} - ${index + 1}`}
                          className="w-full h-32 object-cover rounded-lg border border-gray-200"
                        />
                        <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-opacity flex items-center justify-center opacity-0 group-hover:opacity-100">
                          <div className="flex space-x-2">
                            {index !== 0 && (
                              <button
                                onClick={() => handleSetMainImage(selectedProduct._id, index)}
                                disabled={setMainLoading}
                                className="p-1 bg-blue-500 text-white rounded-full hover:bg-blue-600"
                                title="Đặt làm ảnh chính"
                              >
                                <ArrowsUpDownIcon className="h-4 w-4" />
                              </button>
                            )}
                            <button
                              onClick={() => handleDeleteImage(selectedProduct._id, index)}
                              disabled={deleteImageLoading}
                              className="p-1 bg-red-500 text-white rounded-full hover:bg-red-600"
                              title="Xóa ảnh"
                            >
                              <TrashIcon className="h-4 w-4" />
                            </button>
                          </div>
                        </div>
                        {index === 0 && (
                          <div className="absolute top-2 left-2">
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">
                              Ảnh chính
                            </span>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
              <button
                type="button"
                className="btn btn-secondary"
                onClick={() => setShowImageModal(false)}
              >
                Đóng
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  if (loading) {
    return (
      <div className="p-6">
        <div className="animate-pulse space-y-4">
          {[...Array(5)].map((_, i) => (
            <div key={i} className="h-16 bg-gray-200 rounded"></div>
          ))}
        </div>
      </div>
    );
  }

  if (products.length === 0) {
    return (
      <div className="p-12 text-center">
        <div className="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
          <PhotoIcon className="h-8 w-8 text-gray-400" />
        </div>
        <h3 className="text-lg font-medium text-gray-900 mb-2">
          Chưa có sản phẩm nào
        </h3>
        <p className="text-gray-500 mb-6">
          Bắt đầu bằng cách thêm sản phẩm đầu tiên của bạn
        </p>
        <button
          onClick={() => navigate('/admin/products/create')}
          className="btn btn-primary"
        >
          Thêm sản phẩm đầu tiên
        </button>
      </div>
    );
  }

  // Update the image click handler in both grid and table views
  const productImage = (product, size = 'small') => (
    <div 
      className={`relative ${size === 'small' ? 'h-12 w-12' : 'h-48'} cursor-pointer group`}
      onClick={() => handleImageClick(product)}
    >
      {product.images && product.images.length > 0 ? (
        <img
          src={getImageUrl(product.images[0])}
          alt={product.name}
          className={`${
            size === 'small' 
              ? 'h-12 w-12 rounded-lg object-cover border border-gray-200' 
              : 'w-full h-full object-cover'
          }`}
          onError={(e) => {
            e.target.src = '/placeholder-product.jpg';
          }}
        />
      ) : (
        <div className={`${
          size === 'small'
            ? 'h-12 w-12 rounded-lg'
            : 'w-full h-full'
          } bg-gray-100 flex items-center justify-center`}
        >
          <PhotoIcon className={`${size === 'small' ? 'h-6 w-6' : 'h-12 w-12'} text-gray-400`} />
        </div>
      )}
      
      <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity flex items-center justify-center">
        <div className="opacity-0 group-hover:opacity-100 transform scale-95 group-hover:scale-100 transition-all">
          <button className="px-2 py-1 bg-white bg-opacity-90 rounded text-xs font-medium">
            Quản lý ảnh
          </button>
        </div>
      </div>
    </div>
  );

  // Grid View
  if (viewMode === 'grid') {
    return (
      <div className="p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {products.map((product) => (
            <div
              key={product._id}
              className="bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-lg transition-shadow"
            >
              {/* Product Image */}
              {productImage(product, 'large')}

              {/* Product Info */}
              <div className="p-4">
                <div className="mb-2">
                  <h3 className="text-sm font-medium text-gray-900 line-clamp-2 mb-1">
                    {product.name}
                  </h3>
                  <p className="text-xs text-gray-500">
                    {product.category?.name} • {product.brand?.name}
                  </p>
                </div>

                <div className="mb-3">
                  <p className="text-lg font-bold text-red-600">
                    {formatPrice(product.price)}
                  </p>
                  {product.originalPrice && product.originalPrice > product.price && (
                    <p className="text-sm text-gray-500 line-through">
                      {formatPrice(product.originalPrice)}
                    </p>
                  )}
                </div>

                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm text-gray-600">
                    Tồn kho: <span className="font-medium">{product.stock}</span>
                  </span>
                  <span className="text-xs text-gray-500">
                    SKU: {product.sku}
                  </span>
                </div>

                {/* Actions */}
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleView(product._id)}
                    className="flex-1 px-3 py-2 text-xs font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    <EyeIcon className="h-3 w-3 mr-1 inline" />
                    Xem
                  </button>
                  <button
                    onClick={() => handleEdit(product._id)}
                    className="flex-1 px-3 py-2 text-xs font-medium text-blue-700 bg-blue-100 rounded-lg hover:bg-blue-200 transition-colors"
                  >
                    <PencilIcon className="h-3 w-3 mr-1 inline" />
                    Sửa
                  </button>
                  <button
                    onClick={() => handleDelete(product._id, product.name)}
                    disabled={deleteLoading}
                    className="px-3 py-2 text-xs font-medium text-red-700 bg-red-100 rounded-lg hover:bg-red-200 transition-colors disabled:opacity-50"
                  >
                    <TrashIcon className="h-3 w-3" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
        {showImageModal && <ImageModal />}
      </div>
    );
  }

  // Table View (default)
  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Sản phẩm
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Danh mục & Thương hiệu
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Giá
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Tồn kho
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Trạng thái
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Ngày tạo
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Thao tác
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {products.map((product) => (
            <tr key={product._id} className="hover:bg-gray-50 transition-colors">
              {/* Product Info */}
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    {productImage(product, 'small')}
                  </div>
                  <div className="ml-4">
                    <div className="text-sm font-medium text-gray-900 max-w-xs truncate">
                      {product.name}
                    </div>
                    <div className="text-sm text-gray-500">
                      SKU: {product.sku}
                    </div>
                  </div>
                </div>
              </td>

              {/* Category & Brand */}
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{product.category?.name || 'N/A'}</div>
                <div className="text-sm text-gray-500">{product.brand?.name || 'N/A'}</div>
              </td>

              {/* Price */}
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm font-medium text-red-600">
                  {formatPrice(product.price)}
                </div>
                {product.originalPrice && product.originalPrice > product.price && (
                  <div className="text-sm text-gray-500 line-through">
                    {formatPrice(product.originalPrice)}
                  </div>
                )}
              </td>

              {/* Stock */}
              <td className="px-6 py-4 whitespace-nowrap">
                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                  product.stock === 0
                    ? 'bg-red-100 text-red-800'
                    : product.stock < 10
                    ? 'bg-yellow-100 text-yellow-800'
                    : 'bg-green-100 text-green-800'
                }`}>
                  {product.stock} sản phẩm
                </span>
              </td>

              {/* Status */}
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="flex flex-col space-y-1">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    product.isActive 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {product.isActive ? 'Đang bán' : 'Tạm dừng'}
                  </span>
                  {product.isFeatured && (
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                      <StarIcon className="h-3 w-3 mr-1" />
                      Nổi bật
                    </span>
                  )}
                </div>
              </td>

              {/* Created Date */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {formatDate(product.createdAt)}
              </td>

              {/* Actions */}
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => handleView(product._id)}
                    className="text-gray-600 hover:text-gray-900"
                    title="Xem chi tiết"
                  >
                    <EyeIcon className="h-5 w-5" />
                  </button>
                  <button
                    onClick={() => handleEdit(product._id)}
                    className="text-blue-600 hover:text-blue-900"
                    title="Chỉnh sửa"
                  >
                    <PencilIcon className="h-5 w-5" />
                  </button>
                  <button
                    onClick={() => handleDelete(product._id, product.name)}
                    disabled={deleteLoading}
                    className="text-red-600 hover:text-red-900 disabled:opacity-50"
                    title="Xóa"
                  >
                    <TrashIcon className="h-5 w-5" />
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {showImageModal && <ImageModal />}
    </div>
  );
};

export default ProductTable;
====================================================================================================
END OF FILE: webfrontend/src/pages/admin/products/ProductTable.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/admin/products/ProductForm.jsx
====================================================================================================

// src/pages/admin/products/ProductForm.jsx
import React, { useState, useEffect } from 'react';
import { PhotoIcon, XMarkIcon } from '@heroicons/react/24/outline';
import { useProductFormData } from '../../../hooks/useProducts';
import { formatPrice, getImageUrl } from '../../../lib/utils';

const ProductForm = ({ 
  product = null, 
  onSubmit, 
  onCancel, 
  loading = false 
}) => {
  const { categories, brands, loading: formDataLoading } = useProductFormData();
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    originalPrice: '',
    sku: '',
    category: '',
    brand: '',
    stock: '',
    isActive: true,
    isFeatured: false
  });

  // State for image files to upload
  const [imageFiles, setImageFiles] = useState([]);
  const [imagePreviews, setImagePreviews] = useState([]);
  const [errors, setErrors] = useState({});

  // Populate form when editing
  useEffect(() => {
    if (product) {
      setFormData({
        name: product.name || '',
        description: product.description || '',
        price: product.price || '',
        originalPrice: product.originalPrice || '',
        sku: product.sku || '',
        category: product.category?._id || '',
        brand: product.brand?._id || '',
        stock: product.stock || '',
        isActive: product.isActive ?? true,
        isFeatured: product.isFeatured ?? false
      });
      // Reset image files when editing (existing images are handled separately)
      setImageFiles([]);
      setImagePreviews([]);
    }
  }, [product]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));

    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  // Handle image files selection
  const handleImageFilesChange = (e) => {
    const files = Array.from(e.target.files);
    const validFiles = files.filter(file => {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        toast.error(`File ${file.name} không phải là ảnh`);
        return false;
      }
      // Validate file size (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        toast.error(`File ${file.name} quá lớn (max 10MB)`);
        return false;
      }
      return true;
    });

    // Check total images limit
    const currentImages = product?.images?.length || 0;
    const totalImages = currentImages + imageFiles.length + validFiles.length;
    
    if (totalImages > 5) {
      toast.error('Tối đa 5 ảnh cho mỗi sản phẩm');
      return;
    }

    // Update files state
    const newFiles = [...imageFiles, ...validFiles];
    setImageFiles(newFiles);

    // Create previews
    const newPreviews = [...imagePreviews];
    validFiles.forEach(file => {
      const reader = new FileReader();
      reader.onload = (e) => {
        newPreviews.push({
          file,
          url: e.target.result,
          name: file.name
        });
        setImagePreviews([...newPreviews]);
      };
      reader.readAsDataURL(file);
    });
  };

  // Remove image file from upload queue
  const removeImageFile = (index) => {
    const newFiles = imageFiles.filter((_, i) => i !== index);
    const newPreviews = imagePreviews.filter((_, i) => i !== index);
    setImageFiles(newFiles);
    setImagePreviews(newPreviews);
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Tên sản phẩm là bắt buộc';
    }

    if (!formData.price || formData.price <= 0) {
      newErrors.price = 'Giá sản phẩm phải lớn hơn 0';
    }

    if (!formData.sku.trim()) {
      newErrors.sku = 'SKU là bắt buộc';
    }

    if (!formData.category) {
      newErrors.category = 'Danh mục là bắt buộc';
    }

    if (!formData.brand) {
      newErrors.brand = 'Thương hiệu là bắt buộc';
    }

    if (formData.stock === '' || formData.stock < 0) {
      newErrors.stock = 'Số lượng tồn kho không được âm';
    }

    if (formData.originalPrice && formData.originalPrice <= formData.price) {
      newErrors.originalPrice = 'Giá gốc phải lớn hơn giá bán';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    // Convert string numbers to numbers
    const submitData = {
      ...formData,
      price: parseFloat(formData.price),
      originalPrice: formData.originalPrice ? parseFloat(formData.originalPrice) : null,
      stock: parseInt(formData.stock)
    };

    // Pass both product data and image files to parent
    console.log('📝 Submitting form:', { submitData, imageFiles });
    onSubmit(submitData, imageFiles);
  };

  if (formDataLoading) {
    return (
      <div className="bg-white rounded-lg shadow p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-4 bg-gray-200 rounded w-1/4"></div>
          <div className="h-10 bg-gray-200 rounded"></div>
          <div className="h-32 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow">
      <div className="px-6 py-4 border-b border-gray-200">
        <h3 className="text-lg font-medium text-gray-900">
          {product ? 'Chỉnh sửa sản phẩm' : 'Thêm sản phẩm mới'}
        </h3>
      </div>

      <form onSubmit={handleSubmit} className="p-6 space-y-6">
        {/* Basic Product Info */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Product Name */}
          <div className="md:col-span-2">
            <label className="form-label">Tên sản phẩm *</label>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              className={`input ${errors.name ? 'input-error' : ''}`}
              placeholder="Nhập tên sản phẩm"
            />
            {errors.name && <p className="form-error">{errors.name}</p>}
          </div>

          {/* SKU */}
          <div>
            <label className="form-label">SKU *</label>
            <input
              type="text"
              name="sku"
              value={formData.sku}
              onChange={handleChange}
              className={`input ${errors.sku ? 'input-error' : ''}`}
              placeholder="VD: IPHONE15-128GB"
            />
            {errors.sku && <p className="form-error">{errors.sku}</p>}
          </div>

          {/* Stock */}
          <div>
            <label className="form-label">Số lượng tồn kho *</label>
            <input
              type="number"
              name="stock"
              value={formData.stock}
              onChange={handleChange}
              min="0"
              className={`input ${errors.stock ? 'input-error' : ''}`}
              placeholder="0"
            />
            {errors.stock && <p className="form-error">{errors.stock}</p>}
          </div>

          {/* Price */}
          <div>
            <label className="form-label">Giá bán (VNĐ) *</label>
            <input
              type="number"
              name="price"
              value={formData.price}
              onChange={handleChange}
              min="0"
              step="1000"
              className={`input ${errors.price ? 'input-error' : ''}`}
              placeholder="0"
            />
            {errors.price && <p className="form-error">{errors.price}</p>}
            {formData.price && (
              <p className="text-sm text-gray-500 mt-1">
                {formatPrice(formData.price)}
              </p>
            )}
          </div>

          {/* Original Price */}
          <div>
            <label className="form-label">Giá gốc (VNĐ)</label>
            <input
              type="number"
              name="originalPrice"
              value={formData.originalPrice}
              onChange={handleChange}
              min="0"
              step="1000"
              className={`input ${errors.originalPrice ? 'input-error' : ''}`}
              placeholder="Để trống nếu không có"
            />
            {errors.originalPrice && <p className="form-error">{errors.originalPrice}</p>}
          </div>

          {/* Category */}
          <div>
            <label className="form-label">Danh mục *</label>
            <select
              name="category"
              value={formData.category}
              onChange={handleChange}
              className={`input ${errors.category ? 'input-error' : ''}`}
            >
              <option value="">Chọn danh mục</option>
              {categories.map((category) => (
                <option key={category._id} value={category._id}>
                  {category.name}
                </option>
              ))}
            </select>
            {errors.category && <p className="form-error">{errors.category}</p>}
          </div>

          {/* Brand */}
          <div>
            <label className="form-label">Thương hiệu *</label>
            <select
              name="brand"
              value={formData.brand}
              onChange={handleChange}
              className={`input ${errors.brand ? 'input-error' : ''}`}
            >
              <option value="">Chọn thương hiệu</option>
              {brands.map((brand) => (
                <option key={brand._id} value={brand._id}>
                  {brand.name}
                </option>
              ))}
            </select>
            {errors.brand && <p className="form-error">{errors.brand}</p>}
          </div>
        </div>

        {/* Description */}
        <div>
          <label className="form-label">Mô tả sản phẩm</label>
          <textarea
            name="description"
            value={formData.description}
            onChange={handleChange}
            rows={4}
            className="input resize-none"
            placeholder="Nhập mô tả chi tiết về sản phẩm..."
          />
        </div>

        {/* Images Section */}
        <div>
          <label className="form-label">
            Hình ảnh sản phẩm ({(product?.images?.length || 0) + imageFiles.length}/5)
          </label>
          
          {/* Existing Images (Edit mode) */}
          {product?.images && product.images.length > 0 && (
            <div className="mb-4">
              <p className="text-sm text-gray-600 mb-2">Ảnh hiện tại:</p>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {product.images.map((image, index) => (
                  <div key={index} className="relative">
                    <img
                      src={getImageUrl(image)}
                      alt={`Current ${index + 1}`}
                      className="w-full h-24 object-cover rounded-lg border border-gray-200"
                      onError={(e) => {
                        e.target.src = '/placeholder-product.jpg';
                      }}
                    />
                    {index === 0 && (
                      <div className="absolute bottom-1 left-1 bg-blue-500 text-white text-xs px-1 py-0.5 rounded">
                        Chính
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* New Images Preview */}
          {imagePreviews.length > 0 && (
            <div className="mb-4">
              <p className="text-sm text-gray-600 mb-2">Ảnh mới sẽ upload:</p>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {imagePreviews.map((preview, index) => (
                  <div key={index} className="relative group">
                    <img
                      src={preview.url}
                      alt={`New ${index + 1}`}
                      className="w-full h-24 object-cover rounded-lg border border-green-200"
                    />
                    <button
                      type="button"
                      onClick={() => removeImageFile(index)}
                      className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      <XMarkIcon className="h-3 w-3" />
                    </button>
                    <div className="absolute bottom-1 left-1 bg-green-500 text-white text-xs px-1 py-0.5 rounded">
                      Mới
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Upload New Images */}
          {((product?.images?.length || 0) + imageFiles.length) < 5 && (
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <PhotoIcon className="h-12 w-12 text-gray-400 mx-auto mb-2" />
              <label className="cursor-pointer">
                <span className="text-sm font-medium text-blue-600 hover:text-blue-500">
                  Chọn ảnh để thêm
                </span>
                <input
                  type="file"
                  multiple
                  accept="image/*"
                  onChange={handleImageFilesChange}
                  className="hidden"
                />
              </label>
              <p className="text-xs text-gray-500 mt-1">
                PNG, JPG, GIF up to 10MB. Tối đa 5 ảnh.
              </p>
            </div>
          )}
        </div>

        {/* Checkboxes */}
        <div className="flex items-center space-x-6">
          <label className="flex items-center">
            <input
              type="checkbox"
              name="isActive"
              checked={formData.isActive}
              onChange={handleChange}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <span className="ml-2 text-sm text-gray-700">Kích hoạt</span>
          </label>

          <label className="flex items-center">
            <input
              type="checkbox"
              name="isFeatured"
              checked={formData.isFeatured}
              onChange={handleChange}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <span className="ml-2 text-sm text-gray-700">Sản phẩm nổi bật</span>
          </label>
        </div>

        {/* Actions */}
        <div className="flex items-center justify-end space-x-3 pt-6 border-t border-gray-200">
          <button
            type="button"
            onClick={onCancel}
            className="btn btn-secondary"
            disabled={loading}
          >
            Hủy
          </button>
          <button
            type="submit"
            className="btn btn-primary"
            disabled={loading}
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                {product ? 'Đang cập nhật...' : 'Đang tạo...'}
              </>
            ) : (
              product ? 'Cập nhật sản phẩm' : 'Tạo sản phẩm'
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ProductForm;
====================================================================================================
END OF FILE: webfrontend/src/pages/admin/products/ProductForm.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/admin/products/ProductFilter.jsx
====================================================================================================

// src/pages/admin/products/AdminProductFilter.jsx
import React, { useState } from 'react';
import { useCategories, useBrands } from '../../../hooks/useProducts';

const AdminProductFilter = ({ onFilterChange, className = '' }) => {
  const { categories, loading: categoriesLoading } = useCategories();
  const { brands, loading: brandsLoading } = useBrands();

  const [filters, setFilters] = useState({
    category: '',
    brand: '',
    isActive: '',
    isFeatured: '',
    stockStatus: '',
    priceRange: { min: '', max: '' },
    hasImages: ''
  });

  const handleFilterChange = (key, value) => {
    const newFilters = { ...filters, [key]: value };
    setFilters(newFilters);
    
    // Build condition object for GraphQL
    const condition = {};
    
    if (newFilters.category) condition.category = newFilters.category;
    if (newFilters.brand) condition.brand = newFilters.brand;
    if (newFilters.isActive !== '') condition.isActive = newFilters.isActive === 'true';
    if (newFilters.isFeatured !== '') condition.isFeatured = newFilters.isFeatured === 'true';
    
    // Price range
    if (newFilters.priceRange.min || newFilters.priceRange.max) {
      condition.price = {};
      if (newFilters.priceRange.min) condition.price.min = parseFloat(newFilters.priceRange.min);
      if (newFilters.priceRange.max) condition.price.max = parseFloat(newFilters.priceRange.max);
    }
    
    // Stock status
    if (newFilters.stockStatus) {
      switch (newFilters.stockStatus) {
        case 'inStock':
          condition.stock = { min: 1 };
          break;
        case 'lowStock':
          condition.stock = { min: 1, max: 10 };
          break;
        case 'outOfStock':
          condition.stock = { min: 0, max: 0 };
          break;
      }
    }
    
    onFilterChange(Object.keys(condition).length > 0 ? condition : null);
  };

  const handlePriceChange = (field, value) => {
    const newPriceRange = { ...filters.priceRange, [field]: value };
    handleFilterChange('priceRange', newPriceRange);
  };

  const clearFilters = () => {
    const emptyFilters = {
      category: '',
      brand: '',
      isActive: '',
      isFeatured: '',
      stockStatus: '',
      priceRange: { min: '', max: '' },
      hasImages: ''
    };
    setFilters(emptyFilters);
    onFilterChange(null);
  };

  const hasActiveFilters = () => {
    return Object.entries(filters).some(([key, value]) => {
      if (key === 'priceRange') {
        return value.min || value.max;
      }
      return value !== '';
    });
  };

  return (
    <div className={`space-y-6 ${className}`}>
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium text-gray-900">Bộ lọc nâng cao</h3>
        {hasActiveFilters() && (
          <button
            onClick={clearFilters}
            className="text-sm text-red-600 hover:text-red-800 font-medium"
          >
            Xóa tất cả bộ lọc
          </button>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {/* Category Filter */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Danh mục
          </label>
          <select
            value={filters.category}
            onChange={(e) => handleFilterChange('category', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Tất cả danh mục</option>
            {categoriesLoading ? (
              <option disabled>Đang tải...</option>
            ) : (
              categories.map((category) => (
                <option key={category._id} value={category._id}>
                  {category.name}
                </option>
              ))
            )}
          </select>
        </div>

        {/* Brand Filter */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Thương hiệu
          </label>
          <select
            value={filters.brand}
            onChange={(e) => handleFilterChange('brand', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Tất cả thương hiệu</option>
            {brandsLoading ? (
              <option disabled>Đang tải...</option>
            ) : (
              brands.map((brand) => (
                <option key={brand._id} value={brand._id}>
                  {brand.name}
                </option>
              ))
            )}
          </select>
        </div>

        {/* Status Filter */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Trạng thái
          </label>
          <select
            value={filters.isActive}
            onChange={(e) => handleFilterChange('isActive', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Tất cả trạng thái</option>
            <option value="true">Đang bán</option>
            <option value="false">Tạm dừng</option>
          </select>
        </div>

        {/* Featured Filter */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Sản phẩm nổi bật
          </label>
          <select
            value={filters.isFeatured}
            onChange={(e) => handleFilterChange('isFeatured', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Tất cả</option>
            <option value="true">Nổi bật</option>
            <option value="false">Thường</option>
          </select>
        </div>

        {/* Stock Status Filter */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Tình trạng kho
          </label>
          <select
            value={filters.stockStatus}
            onChange={(e) => handleFilterChange('stockStatus', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Tất cả</option>
            <option value="inStock">Còn hàng</option>
            <option value="lowStock">Sắp hết (≤10)</option>
            <option value="outOfStock">Hết hàng</option>
          </select>
        </div>

        {/* Price Range */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Khoảng giá (VNĐ)
          </label>
          <div className="flex space-x-2">
            <input
              type="number"
              placeholder="Từ"
              value={filters.priceRange.min}
              onChange={(e) => handlePriceChange('min', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <input
              type="number"
              placeholder="Đến"
              value={filters.priceRange.max}
              onChange={(e) => handlePriceChange('max', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        {/* Quick Stock Filters */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Bộ lọc nhanh
          </label>
          <div className="space-y-2">
            <button
              onClick={() => handleFilterChange('stockStatus', 'outOfStock')}
              className="w-full text-left px-3 py-2 text-sm border border-red-200 text-red-700 bg-red-50 rounded-lg hover:bg-red-100 transition-colors"
            >
              🚨 Sản phẩm hết hàng
            </button>
            <button
              onClick={() => handleFilterChange('stockStatus', 'lowStock')}
              className="w-full text-left px-3 py-2 text-sm border border-yellow-200 text-yellow-700 bg-yellow-50 rounded-lg hover:bg-yellow-100 transition-colors"
            >
              ⚠️ Sắp hết hàng
            </button>
            <button
              onClick={() => handleFilterChange('isFeatured', 'true')}
              className="w-full text-left px-3 py-2 text-sm border border-blue-200 text-blue-700 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors"
            >
              ⭐ Sản phẩm nổi bật
            </button>
          </div>
        </div>

        {/* Date Filters - Could be added later */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Thời gian tạo
          </label>
          <select
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            disabled
          >
            <option>Tất cả thời gian</option>
            <option>Hôm nay</option>
            <option>7 ngày qua</option>
            <option>30 ngày qua</option>
            <option>3 tháng qua</option>
          </select>
          <p className="text-xs text-gray-500 mt-1">Sắp có</p>
        </div>
      </div>

      {/* Summary */}
      {hasActiveFilters() && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
          <p className="text-sm text-blue-700">
            💡 <strong>Gợi ý:</strong> Bạn đang áp dụng {Object.values(filters).filter(v => v !== '' && !(typeof v === 'object' && !v.min && !v.max)).length} bộ lọc. 
            Sử dụng "Xóa tất cả bộ lọc" để reset về trạng thái ban đầu.
          </p>
        </div>
      )}
    </div>
  );
};

export default AdminProductFilter;
====================================================================================================
END OF FILE: webfrontend/src/pages/admin/products/ProductFilter.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/admin/products/AdminProductFilter.jsx
====================================================================================================

import React, { useState } from 'react';
import {
  XMarkIcon,
  FunnelIcon,
  ArrowPathIcon
} from '@heroicons/react/24/outline';

const AdminProductFilter = ({ filters = {}, onChange, onClear }) => {
  const [localFilters, setLocalFilters] = useState(filters);

  const handleChange = (field, value) => {
    const newFilters = {
      ...localFilters,
      [field]: value === '' ? undefined : value
    };
    setLocalFilters(newFilters);
    onChange(newFilters);
  };

  const handleReset = () => {
    setLocalFilters({});
    onClear();
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FunnelIcon className="h-5 w-5 text-gray-500" />
          <h3 className="font-medium text-gray-900">Bộ lọc nâng cao</h3>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={handleReset}
            className="flex items-center gap-1 text-sm text-gray-500 hover:text-gray-700"
          >
            <ArrowPathIcon className="h-4 w-4" />
            Đặt lại
          </button>
          <button
            onClick={onClear}
            className="flex items-center gap-1 text-sm text-gray-500 hover:text-gray-700"
          >
            <XMarkIcon className="h-4 w-4" />
            Đóng
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
        {/* Trạng thái */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Trạng thái
          </label>
          <select
            value={localFilters.status || ''}
            onChange={(e) => handleChange('status', e.target.value)}
            className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">Tất cả</option>
            <option value="ACTIVE">Đang bán</option>
            <option value="INACTIVE">Ngừng bán</option>
            <option value="DRAFT">Nháp</option>
          </select>
        </div>

        {/* Tình trạng kho */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Tình trạng kho
          </label>
          <select
            value={localFilters.stockStatus || ''}
            onChange={(e) => handleChange('stockStatus', e.target.value)}
            className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">Tất cả</option>
            <option value="IN_STOCK">Còn hàng</option>
            <option value="LOW_STOCK">Sắp hết</option>
            <option value="OUT_OF_STOCK">Hết hàng</option>
          </select>
        </div>

        {/* Khoảng giá */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Giá từ
          </label>
          <input
            type="number"
            min="0"
            value={localFilters.minPrice || ''}
            onChange={(e) => handleChange('minPrice', e.target.value)}
            placeholder="VD: 100000"
            className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Đến
          </label>
          <input
            type="number"
            min="0"
            value={localFilters.maxPrice || ''}
            onChange={(e) => handleChange('maxPrice', e.target.value)}
            placeholder="VD: 1000000"
            className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        {/* Khoảng tồn kho */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Tồn kho từ
          </label>
          <input
            type="number"
            min="0"
            value={localFilters.minStock || ''}
            onChange={(e) => handleChange('minStock', e.target.value)}
            placeholder="VD: 10"
            className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Đến
          </label>
          <input
            type="number"
            min="0"
            value={localFilters.maxStock || ''}
            onChange={(e) => handleChange('maxStock', e.target.value)}
            placeholder="VD: 100"
            className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        {/* Đặc biệt */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Đặc biệt
          </label>
          <select
            value={localFilters.featured || ''}
            onChange={(e) => handleChange('featured', e.target.value)}
            className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">Tất cả</option>
            <option value="true">Nổi bật</option>
            <option value="false">Không nổi bật</option>
          </select>
        </div>

        {/* Danh mục */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Danh mục
          </label>
          <select
            value={localFilters.categoryId || ''}
            onChange={(e) => handleChange('categoryId', e.target.value)}
            className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">Tất cả danh mục</option>
            {/* TODO: Add categories from API */}
            <option value="1">Điện thoại</option>
            <option value="2">Laptop</option>
            <option value="3">Máy tính bảng</option>
          </select>
        </div>

        {/* Thương hiệu */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Thương hiệu
          </label>
          <select
            value={localFilters.brandId || ''}
            onChange={(e) => handleChange('brandId', e.target.value)}
            className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">Tất cả thương hiệu</option>
            {/* TODO: Add brands from API */}
            <option value="1">Apple</option>
            <option value="2">Samsung</option>
            <option value="3">Xiaomi</option>
          </select>
        </div>
      </div>

      {/* Active Filters */}
      {Object.keys(localFilters).length > 0 && (
        <div className="flex flex-wrap items-center gap-2 pt-4 border-t border-gray-200">
          <span className="text-sm text-gray-500">Bộ lọc đang áp dụng:</span>
          {Object.entries(localFilters).map(([key, value]) => (
            value && (
              <span
                key={key}
                className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
              >
                {key}: {value}
                <button
                  onClick={() => handleChange(key, '')}
                  className="hover:text-blue-600"
                >
                  <XMarkIcon className="h-3 w-3" />
                </button>
              </span>
            )
          ))}
        </div>
      )}
    </div>
  );
};

export default AdminProductFilter; 
====================================================================================================
END OF FILE: webfrontend/src/pages/admin/products/AdminProductFilter.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/pages/admin/products/ImageUpload.jsx
====================================================================================================

// src/components/admin/products/ImageUpload.jsx
import React, { useState, useRef } from 'react';
import {
  PhotoIcon,
  XMarkIcon,
  CloudArrowUpIcon,
  PlusIcon,
  StarIcon
} from '@heroicons/react/24/outline';
import { useUploadProductImage, useRemoveProductImage } from '../../../hooks/useUpload';
import { getImageUrl } from '../../../lib/utils';
import { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';
import { SortableContext, arrayMove, rectSortingStrategy } from '@dnd-kit/sortable';
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';

const SortableImage = ({ image, index, onRemove, isMain, onSetMain }) => {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
  } = useSortable({ id: image });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };

  return (
    <div 
      ref={setNodeRef} 
      style={style} 
      className="relative group cursor-move"
      {...attributes}
      {...listeners}
    >
      <img
        src={getImageUrl(image)}
        alt={`Product ${index + 1}`}
        className="w-full h-24 object-cover rounded-lg border border-gray-200 group-hover:border-blue-400 transition-colors"
        onError={(e) => {
          e.target.src = '/placeholder-product.jpg';
        }}
      />
      <div className="absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity space-x-1">
        {!isMain && (
          <button
            type="button"
            onClick={(e) => {
              e.stopPropagation();
              onSetMain(index);
            }}
            className="bg-yellow-500 text-white rounded-full p-1 hover:bg-yellow-600"
            title="Đặt làm ảnh chính"
          >
            <StarIcon className="h-3 w-3" />
          </button>
        )}
        <button
          type="button"
          onClick={(e) => {
            e.stopPropagation();
            if (window.confirm('Bạn có chắc muốn xóa ảnh này?')) {
              onRemove(image, index);
            }
          }}
          className="bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
          title="Xóa ảnh"
        >
          <XMarkIcon className="h-3 w-3" />
        </button>
      </div>
      {isMain && (
        <div className="absolute bottom-1 left-1 bg-blue-500 text-white text-xs px-1.5 py-0.5 rounded-full flex items-center space-x-1">
          <StarIcon className="h-3 w-3" />
          <span>Chính</span>
        </div>
      )}
    </div>
  );
};

const ImageUpload = ({ 
  productId, 
  images = [], 
  onImagesChange, 
  maxImages = 5 
}) => {
  const fileInputRef = useRef(null);
  const [dragOver, setDragOver] = useState(false);
  const [uploading, setUploading] = useState(false);
  
  const { uploadImage, loading: uploadLoading } = useUploadProductImage();
  const { removeImage, loading: removeLoading } = useRemoveProductImage();

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor)
  );

  const handleDragEnd = (event) => {
    const { active, over } = event;
    
    if (active.id !== over.id) {
      const oldIndex = images.indexOf(active.id);
      const newIndex = images.indexOf(over.id);
      
      const newImages = arrayMove(images, oldIndex, newIndex);
      onImagesChange(newImages);
    }
  };

  const handleFileSelect = (files) => {
    if (!productId) {
      alert('Vui lòng tạo sản phẩm trước khi upload ảnh');
      return;
    }

    if (images.length + files.length > maxImages) {
      alert(`Chỉ được upload tối đa ${maxImages} ảnh`);
      return;
    }

    uploadFiles(files);
  };

  const uploadFiles = async (files) => {
    setUploading(true);
    const newImages = [...images];

    for (let file of files) {
      try {
        const result = await uploadImage(productId, file);
        if (result.success && result.filename) {
          newImages.push(result.filename);
        }
      } catch (error) {
        console.error('Upload error:', error);
      }
    }

    onImagesChange(newImages);
    setUploading(false);
  };

  const handleRemoveImage = async (filename, index) => {
    if (!productId) {
      // Nếu chưa có productId, chỉ remove khỏi state
      const newImages = images.filter((_, i) => i !== index);
      onImagesChange(newImages);
      return;
    }

    try {
      await removeImage(productId, filename);
      const newImages = images.filter((_, i) => i !== index);
      onImagesChange(newImages);
    } catch (error) {
      console.error('Remove image error:', error);
    }
  };

  const handleSetMainImage = (index) => {
    if (index === 0) return;
    
    const newImages = [...images];
    const [imageToMove] = newImages.splice(index, 1);
    newImages.unshift(imageToMove);
    onImagesChange(newImages);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDragOver(false);
    
    const files = Array.from(e.dataTransfer.files).filter(
      file => file.type.startsWith('image/')
    );
    
    if (files.length > 0) {
      handleFileSelect(files);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setDragOver(false);
  };

  const openFileDialog = () => {
    fileInputRef.current?.click();
  };

  const handleFileInputChange = (e) => {
    const files = Array.from(e.target.files);
    if (files.length > 0) {
      handleFileSelect(files);
    }
    // Reset input
    e.target.value = '';
  };

  return (
    <div className="space-y-4">
      <label className="block text-sm font-medium text-gray-700">
        Hình ảnh sản phẩm ({images.length}/{maxImages})
      </label>

      {/* Current Images */}
      {images.length > 0 && (
        <DndContext
          sensors={sensors}
          collisionDetection={closestCenter}
          onDragEnd={handleDragEnd}
        >
          <SortableContext items={images} strategy={rectSortingStrategy}>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {images.map((image, index) => (
                <SortableImage
                  key={image}
                  image={image}
                  index={index}
                  onRemove={handleRemoveImage}
                  isMain={index === 0}
                  onSetMain={handleSetMainImage}
                />
              ))}
            </div>
          </SortableContext>
        </DndContext>
      )}

      {/* Upload Area */}
      {images.length < maxImages && (
        <div
          onDrop={handleDrop}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onClick={openFileDialog}
          className={`border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors ${
            dragOver
              ? 'border-blue-400 bg-blue-50'
              : 'border-gray-300 hover:border-gray-400'
          }`}
        >
          <input
            ref={fileInputRef}
            type="file"
            multiple
            accept="image/*"
            onChange={handleFileInputChange}
            className="hidden"
          />

          {uploading || uploadLoading ? (
            <div className="space-y-2">
              <CloudArrowUpIcon className="h-12 w-12 text-blue-500 mx-auto animate-bounce" />
              <p className="text-sm text-blue-600 font-medium">Đang upload...</p>
            </div>
          ) : (
            <div className="space-y-2">
              <PhotoIcon className="h-12 w-12 text-gray-400 mx-auto" />
              <div>
                <p className="text-sm font-medium text-gray-900">
                  Kéo thả ảnh vào đây hoặc click để chọn
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  PNG, JPG, GIF up to 10MB
                </p>
              </div>
              <button
                type="button"
                className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <PlusIcon className="h-4 w-4 mr-2" />
                Chọn ảnh
              </button>
            </div>
          )}
        </div>
      )}

      {/* Info */}
      <div className="text-xs text-gray-500">
        <p>• Kéo thả để sắp xếp lại thứ tự ảnh</p>
        <p>• Ảnh đầu tiên sẽ được làm ảnh chính</p>
        <p>• Kích thước tối ưu: 800x800px</p>
        <p>• Định dạng: JPG, PNG, GIF</p>
      </div>
    </div>
  );
};

export default ImageUpload;
====================================================================================================
END OF FILE: webfrontend/src/pages/admin/products/ImageUpload.jsx
====================================================================================================


====================================================================================================
FILE: webfrontend/src/index.css
====================================================================================================

/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  * {
    box-sizing: border-box;
  }
  
  body {
    font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    @apply bg-gray-50 text-gray-900;
  }

  html {
    scroll-behavior: smooth;
  }
}

@layer components {
  /* Button Components */
  .btn {
    @apply inline-flex items-center justify-center px-4 py-2 rounded-lg font-medium text-sm transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;
  }
  
  .btn-primary {
    @apply bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700 focus:ring-blue-500 shadow-lg hover:shadow-xl transform hover:scale-[1.02];
  }
  
  .btn-secondary {
    @apply bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-gray-500 shadow-sm hover:shadow-md;
  }
  
  .btn-danger {
    @apply bg-gradient-to-r from-red-500 to-red-600 text-white hover:from-red-600 hover:to-red-700 focus:ring-red-500 shadow-lg hover:shadow-xl;
  }

  .btn-ghost {
    @apply text-gray-600 hover:text-gray-900 hover:bg-gray-100 focus:ring-gray-500;
  }

  /* Input Components */
  .input {
    @apply w-full px-4 py-3 border border-gray-300 rounded-xl placeholder-gray-500 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200;
  }
  
  .input-error {
    @apply border-red-300 focus:ring-red-500 bg-red-50;
  }

  .input-success {
    @apply border-green-300 focus:ring-green-500 bg-green-50;
  }

  /* Form Components */
  .form-group {
    @apply space-y-2;
  }
  
  .form-label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
  
  .form-error {
    @apply text-red-500 text-sm mt-1 flex items-center;
  }

  .form-help {
    @apply text-gray-500 text-sm mt-1;
  }

  /* Card Components */
  .card {
    @apply bg-white rounded-xl shadow-sm border border-gray-100 p-6 hover:shadow-md transition-all duration-200;
  }

  .card-header {
    @apply border-b border-gray-100 pb-4 mb-4;
  }

  .card-footer {
    @apply border-t border-gray-100 pt-4 mt-4;
  }

  /* Badge Components */
  .badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }

  .badge-primary {
    @apply bg-blue-100 text-blue-800;
  }

  .badge-secondary {
    @apply bg-gray-100 text-gray-800;
  }

  .badge-success {
    @apply bg-green-100 text-green-800;
  }

  .badge-warning {
    @apply bg-yellow-100 text-yellow-800;
  }

  .badge-danger {
    @apply bg-red-100 text-red-800;
  }

  /* Alert Components */
  .alert {
    @apply p-4 rounded-xl border-l-4;
  }

  .alert-info {
    @apply bg-blue-50 border-blue-400 text-blue-700;
  }

  .alert-success {
    @apply bg-green-50 border-green-400 text-green-700;
  }

  .alert-warning {
    @apply bg-yellow-50 border-yellow-400 text-yellow-700;
  }

  .alert-error {
    @apply bg-red-50 border-red-400 text-red-700;
  }

  /* Loading Components */
  .loading-spinner {
    @apply animate-spin rounded-full border-2 border-gray-300 border-t-blue-600;
  }

  .loading-pulse {
    @apply animate-pulse bg-gray-200 rounded;
  }

  /* Navigation Components */
  .nav-link {
    @apply px-3 py-2 rounded-lg text-sm font-medium transition-colors;
  }

  .nav-link-active {
    @apply bg-blue-100 text-blue-700;
  }

  .nav-link-inactive {
    @apply text-gray-600 hover:text-gray-900 hover:bg-gray-100;
  }

  /* Table Components */
  .table {
    @apply min-w-full divide-y divide-gray-200;
  }

  .table-header {
    @apply bg-gray-50;
  }

  .table-header-cell {
    @apply px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider;
  }

  .table-body {
    @apply bg-white divide-y divide-gray-200;
  }

  .table-row {
    @apply hover:bg-gray-50 transition-colors;
  }

  .table-cell {
    @apply px-6 py-4 whitespace-nowrap text-sm text-gray-900;
  }

  /* Modal Components */
  .modal-overlay {
    @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50;
  }

  .modal-content {
    @apply bg-white rounded-xl shadow-xl max-w-md w-full p-6;
  }

  /* Dropdown Components */
  .dropdown {
    @apply relative inline-block text-left;
  }

  .dropdown-menu {
    @apply absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-lg border border-gray-200 py-1 z-50;
  }

  .dropdown-item {
    @apply block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors;
  }
}

@layer utilities {
  /* Custom Scrollbar */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  .scrollbar-thin {
    scrollbar-width: thin;
  }

  .scrollbar-thin::-webkit-scrollbar {
    width: 6px;
  }

  .scrollbar-thin::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  /* Glass Effect */
  .glass {
    @apply bg-white/80 backdrop-blur-md border border-white/20;
  }

  .glass-dark {
    @apply bg-gray-900/80 backdrop-blur-md border border-gray-700/20;
  }

  /* Text Gradients */
  .text-gradient {
    @apply bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent;
  }

  .text-gradient-success {
    @apply bg-gradient-to-r from-green-500 to-emerald-600 bg-clip-text text-transparent;
  }

  .text-gradient-warning {
    @apply bg-gradient-to-r from-yellow-500 to-orange-500 bg-clip-text text-transparent;
  }

  .text-gradient-danger {
    @apply bg-gradient-to-r from-red-500 to-pink-600 bg-clip-text text-transparent;
  }

  /* Animations */
  .animate-fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }

  .animate-slide-up {
    animation: slideUp 0.3s ease-out;
  }

  .animate-slide-down {
    animation: slideDown 0.3s ease-out;
  }

  .animate-scale-in {
    animation: scaleIn 0.2s ease-out;
  }

  /* Hover Effects */
  .hover-lift {
    @apply transition-transform duration-200 hover:scale-105;
  }

  .hover-glow {
    @apply transition-shadow duration-200 hover:shadow-lg hover:shadow-blue-500/25;
  }

  /* Focus Effects */
  .focus-ring {
    @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2;
  }

  .focus-ring-inset {
    @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset;
  }
}

/* Custom Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* React Hot Toast Custom Styles */
.Toaster__toast {
  @apply rounded-xl shadow-lg;
}

.Toaster__toast--success {
  @apply bg-green-500;
}

.Toaster__toast--error {
  @apply bg-red-500;
}

.Toaster__toast--loading {
  @apply bg-blue-500;
}

/* Selection Styles */
::selection {
  @apply bg-blue-200 text-blue-900;
}

::-moz-selection {
  @apply bg-blue-200 text-blue-900;
}

/* Focus Visible for Accessibility */
*:focus-visible {
  @apply outline-none ring-2 ring-blue-500 ring-offset-2;
}

/* Print Styles */
@media print {
  .no-print {
    display: none !important;
  }
  
  .print-break {
    page-break-after: always;
  }
}
====================================================================================================
END OF FILE: webfrontend/src/index.css
====================================================================================================


====================================================================================================
FILE: webfrontend/src/App.css
====================================================================================================

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

====================================================================================================
END OF FILE: webfrontend/src/App.css
====================================================================================================


====================================================================================================
FILE: webfrontend/src/lib/utils.js
====================================================================================================

// src/lib/utils.js
import { clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

// Utility function to merge Tailwind classes
export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

// Format price to Vietnamese currency
export const formatPrice = (price) => {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
  }).format(price);
};

// Format date to Vietnamese format
export const formatDate = (dateString) => {
  if (!dateString) return 'N/A';
  
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return 'N/A';
    
    return new Intl.DateTimeFormat('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false,
      timeZone: 'Asia/Ho_Chi_Minh'
    }).format(date);
  } catch (error) {
    console.error('Error formatting date:', error);
    return 'N/A';
  }
};

// Format date to short format
export const formatDateShort = (date) => {
  return new Intl.DateTimeFormat('vi-VN', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
  }).format(new Date(date));
};

// Create slug from text
export const slugify = (text) => {
  return text
    .toLowerCase()
    .replace(/[^\w ]+/g, '')
    .replace(/ +/g, '-');
};

// Get image URL
export const getImageUrl = (imageName) => {
  if (!imageName) return '/placeholder-image.jpg';
  if (imageName.startsWith('http')) return imageName;
  return `${import.meta.env.VITE_API_URL || 'http://localhost:4000'}/img/${imageName}`;
};

// Truncate text
export const truncateText = (text, length = 100) => {
  if (!text) return '';
  if (text.length <= length) return text;
  return text.substring(0, length).trim() + '...';
};

// Debounce function
export const debounce = (func, wait) => {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};

// Generate random ID
export const generateId = () => {
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
};

// Validate email
export const isValidEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// Validate phone number (Vietnamese format)
export const isValidPhone = (phone) => {
  const phoneRegex = /^[0-9]{10,11}$/;
  return phoneRegex.test(phone);
};

// Calculate discount percentage
export const calculateDiscountPercentage = (originalPrice, currentPrice) => {
  if (!originalPrice || !currentPrice || originalPrice <= currentPrice) return 0;
  return Math.round(((originalPrice - currentPrice) / originalPrice) * 100);
};

// Format file size
export const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// Copy to clipboard
export const copyToClipboard = async (text) => {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (err) {
    console.error('Failed to copy to clipboard:', err);
    return false;
  }
};
====================================================================================================
END OF FILE: webfrontend/src/lib/utils.js
====================================================================================================


====================================================================================================
FILE: README.md
====================================================================================================

npm i graphql graphql-yoga

npm install lodash @envelop/graphql-middleware

npm install mongoose dotenv

# Cài đặt migrate-mongo global
npm install -g migrate-mongo

# Cài đặt Jest và mongodb-memory-server
npm install --save-dev jest mongodb-memory-server

npm install bcrypt

npm install jsonwebtoken bcrypt

npm install express uuid



  curl http://localhost:4000/graphql \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4M2JjNTNjNmIyMmE4OTc3YjhhNzhmZCIsInVzZXJuYW1lIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDg3NDc5MTgsImV4cCI6MTc0ODgzNDMxOH0.H8-5pjZVlx1T1F_Tx940EpciO-BHMG5Mk7mi6HZy1rY" \
  -F operations='{"query":"mutation ($file: Upload!) { uploadImage(file: $file) { success message filename url } }","variables":{"file":null}}' \
  -F map='{"0":["variables.file"]}' \
  -F 0=@\home\takiya\SmartShop\server\img\image_3.jpg

683bff348046303c5a404899

curl -X POST http://localhost:4000/ \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4M2JjNTNjNmIyMmE4OTc3YjhhNzhmZCIsInVzZXJuYW1lIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDg3NDc5MTgsImV4cCI6MTc0ODgzNDMxOH0.H8-5pjZVlx1T1F_Tx940EpciO-BHMG5Mk7mi6HZy1rY" \
  -F operations='{"query":"mutation ($productId: ID!, $file: File!) { uploadProductImage(productId: $productId, file: $file) { success message filename url } }","variables":{"productId":"683bff348046303c5a404899","file":null}}' \
  -F map='{"0":["variables.file"]}' \
  -F 0=@/home/takiya/SmartShop/server/img/image_3.jpg

curl -X POST http://localhost:4000/ \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4M2JjNTNjNmIyMmE4OTc3YjhhNzhmZCIsInVzZXJuYW1lIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDg3NDc5MTgsImV4cCI6MTc0ODgzNDMxOH0.H8-5pjZVlx1T1F_Tx940EpciO-BHMG5Mk7mi6HZy1rY" \
  -F operations='{"query":"mutation ($productId: ID!, $files: [File!]!) { uploadProductImages(productId: $productId, files: $files) { success message filename url } }","variables":{"productId":"683bff348046303c5a404899","files":[null]}}' \
  -F map='{"0":["variables.files.0"]}' \
  -F 0=@/home/takiya/SmartShop/server/img/image_3.jpg

  curl -X POST http://localhost:4000/ \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI2ODNiYzUzYzZiMjJhODk3N2I4YTc4ZmQiLCJ1c2VybmFtZSI6ImFkbWluIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzQ4NzQ3OTE4LCJleHAiOjE3NDg4MzQzMTh9.H8-5pjZVlx1T1F_Tx940EpciO-BHMG5Mk7mi6HZy1rY" \
  -F operations='{"query":"mutation ($productId: ID!, $files: [File!]!) { uploadProductImages(productId: $productId, files: $files) { success message filename url } }","variables":{"productId":"683bff348046303c5a404899","files":[null,null,null]}}' \
  -F map='{"0":["variables.files.0"],"1":["variables.files.1"],"2":["variables.files.2"]}' \
  -F 0=@/home/takiya/SmartShop/server/img/image_3.jpg \
  -F 1=@/home/takiya/SmartShop/server/img/image_3.jpg \
  -F 2=@/home/takiya/SmartShop/server/img/image_3.jpg

  # Test upload single image trước
curl -X POST http://localhost:4000/ \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4M2JjNTNjNmIyMmE4OTc3YjhhNzhmZCIsInVzZXJuYW1lIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDg3NDc5MTgsImV4cCI6MTc0ODgzNDMxOH0.H8-5pjZVlx1T1F_Tx940EpciO-BHMG5Mk7mi6HZy1rY" \
  -F operations='{ "query": "mutation ($file: File!) { upload(file: $file) }", "variables": {"file": null} }' \
  -F map='{ "0": ["variables.file"] }' \
  -F 0=@/home/takiya/SmartShop/server/img/image_3.jpg

  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4M2JjNTNjNmIyMmE4OTc3YjhhNzhmZCIsInVzZXJuYW1lIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDg3NDc5MTgsImV4cCI6MTc0ODgzNDMxOH0.H8-5pjZVlx1T1F_Tx940EpciO-BHMG5Mk7mi6HZy1rY

  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4M2JjNTNjNmIyMmE4OTc3YjhhNzhmZCIsInVzZXJuYW1lIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDg3NjU4NDIsImV4cCI6MTc0ODg1MjI0Mn0.W5sW1e_2lUrYDN2XobF-1n2gPtTmu03B9TaM4uCRfOY

# Đăng nhập admin
  curl -X POST http://localhost:4000/ \
  -H "Content-Type: application/json" \
  -d '{"query":"mutation { login(input: {username: \"admin\", password: \"admin123\"}) { success message data { jwt } } }"}'

  curl -X POST http://localhost:4000/ \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4M2JjNTNjNmIyMmE4OTc3YjhhNzhmZCIsInVzZXJuYW1lIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDg3NjU4NDIsImV4cCI6MTc0ODg1MjI0Mn0.W5sW1e_2lUrYDN2XobF-1n2gPtTmu03B9TaM4uCRfOY" \
  -F operations='{"query":"mutation ($productId: ID!, $files: [File!]!) { uploadProductImages(productId: $productId, files: $files) { success message filename url } }","variables":{"productId":"683bff348046303c5a404899","files":[null,null,null]}}' \
  -F map='{"0":["variables.files.0"],"1":["variables.files.1"],"2":["variables.files.2"]}' \
  -F 0=@/home/takiya/SmartShop/server/img/image_3.jpg \
  -F 1=@/home/takiya/SmartShop/server/img/image_3.jpg \
  -F 2=@/home/takiya/SmartShop/server/img/image_3.jpg


  #  upload mutile image 
     curl -X POST http://localhost:4000/ \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4M2JjNTNjNmIyMmE4OTc3YjhhNzhmZCIsInVzZXJuYW1lIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDg3NjU4NDIsImV4cCI6MTc0ODg1MjI0Mn0.W5sW1e_2lUrYDN2XobF-1n2gPtTmu03B9TaM4uCRfOY" \
  -F operations='{"query":"mutation ($productId: ID!, $files: [File!]!) { uploadProductImages(productId: $productId, files: $files) { success message filename url } }","variables":{"productId":"683bc53c6b22a8977b8a7906","files":[null,null,null]}}' \
  -F map='{"0":["variables.files.0"],"1":["variables.files.1"],"2":["variables.files.2"]}' \
  -F 0=@/home/takiya/SmartShop/server/img/img.png \
  -F 1=@/home/takiya/SmartShop/server/img/img.png \
  -F 2=@/home/takiya/SmartShop/server/img/img.png


{"data":{"uploadProductImages":{"success":true,"message":"3 file(s) uploaded successfully for product","filename":"product_683bff348046303c5a404899_1748765866090_0_4fd206cd-f94a-4622-be49-19df06473a56.jpg, product_683bff348046303c5a404899_1748765866098_1_f46a6f86-60b5-4bb3-a56e-df7b11da2e04.jpg, product_683bff348046303c5a404899_1748765866104_2_6cab082f-42e2-4e04-8e0d-45fcf28088ec.jpg","url":"/img/product_683bff348046303c5a404899_1748765866090_0_4fd206cd-f94a-4622-be49-19df06473a56.jpg"}}}



npm install @apollo/client graphql react-router-dom @headlessui/react @heroicons/react tailwindcss postcss autoprefixer react-hot-toast lucide-react


sudo lsof -i :4000
sudo kill -9 $(sudo lsof -t -i :4000)

sudo docker ps -a
sudo docker ps
sudo docker start smartshop-db
sudo systemctl stop mongod
====================================================================================================
END OF FILE: README.md
====================================================================================================


====================================================================================================
EXTRACTION SUMMARY
====================================================================================================
Total core files: 73
Successfully processed: 73
Missing files: 0
Output file: /home/takiya/SmartShop/smartshop_core_code.txt

====================================================================================================
MISSING FILES
====================================================================================================
None - All files processed successfully!

====================================================================================================
SMARTSHOP PROJECT STRUCTURE
====================================================================================================

SmartShop/
├── server/                 # Backend Node.js/GraphQL
│   ├── index.js           # Main server entry
│   ├── config.js          # Database configuration
│   ├── permissions.js     # Authorization middleware
│   ├── graphql/           # GraphQL schema & resolvers
│   │   ├── schema.js      # Main schema
│   │   ├── authentication.js
│   │   ├── products.js
│   │   ├── categories.js
│   │   ├── brands.js
│   │   ├── carts.js
│   │   ├── orders.js
│   │   └── upload.js
│   ├── data/              # Data layer
│   │   ├── models/        # Mongoose models
│   │   ├── mongoRepo.js   # Repository pattern
│   │   └── init.js        # Database initialization
│   └── img/               # Uploaded images
├── webfrontend/           # Frontend React/Vite
│   ├── src/
│   │   ├── main.jsx       # App entry point
│   │   ├── App.jsx        # Main app component
│   │   ├── router.jsx     # React Router setup
│   │   ├── contexts/      # React contexts
│   │   ├── hooks/         # Custom hooks
│   │   ├── components/    # Reusable components
│   │   ├── pages/         # Page components
│   │   ├── graphql/       # GraphQL queries/mutations
│   │   └── lib/           # Utilities
│   ├── package.json
│   ├── vite.config.js
│   └── tailwind.config.js
└── README.md

====================================================================================================
EXTRACTION COMPLETED
====================================================================================================

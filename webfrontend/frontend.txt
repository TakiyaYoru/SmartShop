
===== ProductList copy.jsx =====
// src/components/products/ProductList.jsx
import React from 'react';
import ProductCard from './ProductCard';

const ProductList = ({ 
  products = [], 
  loading = false, 
  viewMode = 'grid',
  showLoadMore = false,
  onLoadMore,
  hasNextPage = false,
  loadingMore = false 
}) => {
  
  if (loading && products.length === 0) {
    return (
      <div className={`grid gap-6 ${
        viewMode === 'grid' 
          ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
          : 'grid-cols-1'
      }`}>
        {[...Array(6)].map((_, index) => (
          <ProductCardSkeleton key={index} viewMode={viewMode} />
        ))}
      </div>
    );
  }

  if (products.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="w-24 h-24 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
          <span className="text-4xl">üì¶</span>
        </div>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
        </h3>
        <p className="text-gray-600 mb-6">
          Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c
        </p>
        <button 
          onClick={() => window.location.reload()}
          className="btn btn-primary"
        >
          L√†m m·ªõi trang
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Products Grid/List */}
      <div className={`grid gap-6 ${
        viewMode === 'grid' 
          ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
          : 'grid-cols-1'
      }`}>
        {products.map((product) => (
          <ProductCard 
            key={product._id} 
            product={product} 
            viewMode={viewMode}
          />
        ))}
      </div>

      {/* Load More Button */}
      {showLoadMore && hasNextPage && (
        <div className="text-center py-8">
          <button
            onClick={onLoadMore}
            disabled={loadingMore}
            className="btn btn-secondary px-8 py-3"
          >
            {loadingMore ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600 mr-2"></div>
                ƒêang t·∫£i...
              </>
            ) : (
              'Xem th√™m s·∫£n ph·∫©m'
            )}
          </button>
        </div>
      )}

      {/* Loading More Indicator */}
      {loadingMore && (
        <div className={`grid gap-6 ${
          viewMode === 'grid' 
            ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
            : 'grid-cols-1'
        }`}>
          {[...Array(3)].map((_, index) => (
            <ProductCardSkeleton key={`loading-${index}`} viewMode={viewMode} />
          ))}
        </div>
      )}
    </div>
  );
};

// Skeleton Loading Component
const ProductCardSkeleton = ({ viewMode }) => {
  if (viewMode === 'grid') {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden animate-pulse">
        {/* Image Skeleton */}
        <div className="aspect-square bg-gray-200"></div>
        
        {/* Content Skeleton */}
        <div className="p-4 space-y-3">
          {/* Category & Brand */}
          <div className="flex justify-between">
            <div className="h-3 bg-gray-200 rounded w-16"></div>
            <div className="h-3 bg-gray-200 rounded w-12"></div>
          </div>
          
          {/* Title */}
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded w-full"></div>
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
          </div>
          
          {/* Rating */}
          <div className="flex items-center space-x-1">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="w-4 h-4 bg-gray-200 rounded"></div>
            ))}
            <div className="h-3 bg-gray-200 rounded w-8 ml-2"></div>
          </div>
          
          {/* Price */}
          <div className="flex items-center space-x-2">
            <div className="h-5 bg-gray-200 rounded w-20"></div>
            <div className="h-4 bg-gray-200 rounded w-16"></div>
          </div>
          
          {/* Stock */}
          <div className="h-6 bg-gray-200 rounded w-16"></div>
        </div>
      </div>
    );
  }

  // List view skeleton
  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden animate-pulse">
      <div className="flex">
        {/* Image Skeleton */}
        <div className="w-48 aspect-square bg-gray-200 flex-shrink-0"></div>
        
        {/* Content Skeleton */}
        <div className="flex-1 p-6 space-y-4">
          {/* Category & Brand */}
          <div className="flex items-center space-x-4">
            <div className="h-3 bg-gray-200 rounded w-16"></div>
            <div className="h-3 bg-gray-200 rounded w-12"></div>
          </div>
          
          {/* Title */}
          <div className="space-y-2">
            <div className="h-6 bg-gray-200 rounded w-3/4"></div>
            <div className="h-6 bg-gray-200 rounded w-1/2"></div>
          </div>
          
          {/* Description */}
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded w-full"></div>
            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
          </div>
          
          {/* Rating */}
          <div className="flex items-center space-x-1">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="w-4 h-4 bg-gray-200 rounded"></div>
            ))}
            <div className="h-3 bg-gray-200 rounded w-20 ml-2"></div>
          </div>
          
          {/* Bottom section */}
          <div className="flex items-center justify-between pt-4">
            <div className="flex items-center space-x-3">
              <div className="h-7 bg-gray-200 rounded w-24"></div>
              <div className="h-6 bg-gray-200 rounded w-20"></div>
            </div>
            <div className="flex items-center space-x-3">
              <div className="h-6 bg-gray-200 rounded w-16"></div>
              <div className="h-9 bg-gray-200 rounded w-24"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductList;
===== App.css =====
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

===== ProductSearch.jsx =====
// src/components/products/ProductSearch.jsx
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  MagnifyingGlassIcon, 
  XMarkIcon,
  ClockIcon,
  TrendingUpIcon 
} from '@heroicons/react/24/outline';
import { useSearchProducts } from '../../hooks/useProducts';
import { formatPrice, getImageUrl } from '../../lib/utils';

const ProductSearch = ({ 
  placeholder = "T√¨m ki·∫øm s·∫£n ph·∫©m...",
  className = "",
  showSuggestions = true,
  onSearchSubmit
}) => {
  const navigate = useNavigate();
  const { searchResults, isSearching, search, clearSearch } = useSearchProducts();
  
  const [query, setQuery] = useState('');
  const [showResults, setShowResults] = useState(false);
  const [recentSearches, setRecentSearches] = useState([]);
  const [trendingSearches] = useState([
    'iPhone 15', 'MacBook Pro', 'Samsung Galaxy', 'AirPods', 'iPad'
  ]);

  const searchRef = useRef(null);
  const resultsRef = useRef(null);

  // Load recent searches from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('smartshop_recent_searches');
    if (saved) {
      try {
        setRecentSearches(JSON.parse(saved));
      } catch (error) {
        console.error('Error loading recent searches:', error);
      }
    }
  }, []);

  // Save recent searches to localStorage
  const saveRecentSearch = (searchQuery) => {
    if (!searchQuery.trim()) return;
    
    const updated = [
      searchQuery,
      ...recentSearches.filter(item => item !== searchQuery)
    ].slice(0, 5); // Keep only 5 recent searches
    
    setRecentSearches(updated);
    localStorage.setItem('smartshop_recent_searches', JSON.stringify(updated));
  };

  // Handle search input change
  const handleInputChange = (e) => {
    const value = e.target.value;
    setQuery(value);
    
    if (value.trim().length > 2) {
      search(value, { first: 5 }); // Search with limit for suggestions
      setShowResults(true);
    } else {
      clearSearch();
      setShowResults(value.length > 0);
    }
  };

  // Handle search submission
  const handleSubmit = (e) => {
    e.preventDefault();
    performSearch(query);
  };

  const performSearch = (searchQuery) => {
    if (!searchQuery.trim()) return;
    
    saveRecentSearch(searchQuery.trim());
    setShowResults(false);
    setQuery(searchQuery);
    
    if (onSearchSubmit) {
      onSearchSubmit(searchQuery);
    } else {
      navigate(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
    }
  };

  // Handle click outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        searchRef.current && 
        !searchRef.current.contains(event.target) &&
        resultsRef.current &&
        !resultsRef.current.contains(event.target)
      ) {
        setShowResults(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Clear search
  const handleClear = () => {
    setQuery('');
    clearSearch();
    setShowResults(false);
  };

  // Remove recent search item
  const removeRecentSearch = (item) => {
    const updated = recentSearches.filter(search => search !== item);
    setRecentSearches(updated);
    localStorage.setItem('smartshop_recent_searches', JSON.stringify(updated));
  };

  return (
    <div className={`relative ${className}`}>
      {/* Search Input */}
      <form onSubmit={handleSubmit} className="relative">
        <div className="relative">
          <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
          <input
            ref={searchRef}
            type="text"
            value={query}
            onChange={handleInputChange}
            onFocus={() => setShowResults(true)}
            placeholder={placeholder}
            className="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900 placeholder-gray-500"
            autoComplete="off"
          />
          
          {/* Clear button */}
          {query && (
            <button
              type="button"
              onClick={handleClear}
              className="absolute right-3 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600 transition-colors"
            >
              <XMarkIcon className="h-4 w-4" />
            </button>
          )}
        </div>
      </form>

      {/* Search Results Dropdown */}
      {showSuggestions && showResults && (
        <div
          ref={resultsRef}
          className="absolute top-full left-0 right-0 mt-2 bg-white rounded-xl shadow-lg border border-gray-200 z-50 max-h-96 overflow-y-auto"
        >
          {/* Loading */}
          {isSearching && query.length > 2 && (
            <div className="p-4 text-center">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto"></div>
              <p className="text-sm text-gray-500 mt-2">ƒêang t√¨m ki·∫øm...</p>
            </div>
          )}

          {/* Search Results */}
          {searchResults.length > 0 && query.length > 2 && (
            <div>
              <div className="px-4 py-2 border-b border-gray-100">
                <h3 className="text-sm font-medium text-gray-900">S·∫£n ph·∫©m</h3>
              </div>
              <div className="max-h-64 overflow-y-auto">
                {searchResults.map((product) => (
                  <button
                    key={product._id}
                    onClick={() => navigate(`/products/${product._id}`)}
                    className="w-full px-4 py-3 flex items-center space-x-3 hover:bg-gray-50 transition-colors text-left"
                  >
                    <img
                      src={getImageUrl(product.images?.[0])}
                      alt={product.name}
                      className="w-12 h-12 object-cover rounded-lg bg-gray-100"
                      onError={(e) => {
                        e.target.src = '/placeholder-product.jpg';
                      }}
                    />
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {product.name}
                      </p>
                      <p className="text-sm text-gray-500 truncate">
                        {product.brand?.name} ‚Ä¢ {product.category?.name}
                      </p>
                      <p className="text-sm font-semibold text-red-600">
                        {formatPrice(product.price)}
                      </p>
                    </div>
                  </button>
                ))}
              </div>
              
              {/* View all results */}
              <div className="border-t border-gray-100">
                <button
                  onClick={() => performSearch(query)}
                  className="w-full px-4 py-3 text-sm font-medium text-blue-600 hover:bg-blue-50 transition-colors"
                >
                  Xem t·∫•t c·∫£ k·∫øt qu·∫£ cho "{query}"
                </button>
              </div>
            </div>
          )}

          {/* No Results */}
          {searchResults.length === 0 && query.length > 2 && !isSearching && (
            <div className="p-4 text-center">
              <p className="text-sm text-gray-500">
                Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o cho "{query}"
              </p>
            </div>
          )}

          {/* Recent Searches */}
          {(!query || query.length <= 2) && recentSearches.length > 0 && (
            <div>
              <div className="px-4 py-2 border-b border-gray-100">
                <h3 className="text-sm font-medium text-gray-900 flex items-center">
                  <ClockIcon className="h-4 w-4 mr-2" />
                  T√¨m ki·∫øm g·∫ßn ƒë√¢y
                </h3>
              </div>
              <div>
                {recentSearches.map((item, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between px-4 py-2 hover:bg-gray-50"
                  >
                    <button
                      onClick={() => {
                        setQuery(item);
                        performSearch(item);
                      }}
                      className="flex-1 text-left text-sm text-gray-700 hover:text-gray-900"
                    >
                      {item}
                    </button>
                    <button
                      onClick={() => removeRecentSearch(item)}
                      className="p-1 text-gray-400 hover:text-gray-600"
                    >
                      <XMarkIcon className="h-3 w-3" />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Trending Searches */}
          {(!query || query.length <= 2) && trendingSearches.length > 0 && (
            <div>
              <div className="px-4 py-2 border-b border-gray-100">
                <h3 className="text-sm font-medium text-gray-900 flex items-center">
                  <TrendingUpIcon className="h-4 w-4 mr-2" />
                  T√¨m ki·∫øm ph·ªï bi·∫øn
                </h3>
              </div>
              <div>
                {trendingSearches.map((item, index) => (
                  <button
                    key={index}
                    onClick={() => {
                      setQuery(item);
                      performSearch(item);
                    }}
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 hover:text-gray-900"
                  >
                    {item}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Empty state */}
          {(!query || query.length <= 2) && recentSearches.length === 0 && (
            <div className="p-6 text-center">
              <MagnifyingGlassIcon className="h-12 w-12 text-gray-300 mx-auto mb-2" />
              <p className="text-sm text-gray-500">
                Nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ProductSearch;
===== utils.js =====
// src/lib/utils.js
import { clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

// Utility function to merge Tailwind classes
export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

// Format price to Vietnamese currency
export const formatPrice = (price) => {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
  }).format(price);
};

// Format date to Vietnamese format
export const formatDate = (date) => {
  return new Intl.DateTimeFormat('vi-VN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  }).format(new Date(date));
};

// Format date to short format
export const formatDateShort = (date) => {
  return new Intl.DateTimeFormat('vi-VN', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
  }).format(new Date(date));
};

// Create slug from text
export const slugify = (text) => {
  return text
    .toLowerCase()
    .replace(/[^\w ]+/g, '')
    .replace(/ +/g, '-');
};

// Get image URL
export const getImageUrl = (imageName) => {
  if (!imageName) return '/placeholder-image.jpg';
  if (imageName.startsWith('http')) return imageName;
  return `${import.meta.env.VITE_API_URL || 'http://localhost:4000'}/img/${imageName}`;
};

// Truncate text
export const truncateText = (text, length = 100) => {
  if (!text) return '';
  if (text.length <= length) return text;
  return text.substring(0, length).trim() + '...';
};

// Debounce function
export const debounce = (func, wait) => {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};

// Generate random ID
export const generateId = () => {
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
};

// Validate email
export const isValidEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// Validate phone number (Vietnamese format)
export const isValidPhone = (phone) => {
  const phoneRegex = /^[0-9]{10,11}$/;
  return phoneRegex.test(phone);
};

// Calculate discount percentage
export const calculateDiscountPercentage = (originalPrice, currentPrice) => {
  if (!originalPrice || !currentPrice || originalPrice <= currentPrice) return 0;
  return Math.round(((originalPrice - currentPrice) / originalPrice) * 100);
};

// Format file size
export const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// Copy to clipboard
export const copyToClipboard = async (text) => {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (err) {
    console.error('Failed to copy to clipboard:', err);
    return false;
  }
};
===== ProductsPage.jsx =====
// src/pages/ProductsPage.jsx
import React, { useState } from 'react';
import Layout from '../components/common/Layout';
import Sidebar from '../components/common/Sidebar';
import ProtectedRoute from '../components/auth/ProtectedRoute';
import { 
  FunnelIcon, 
  Squares2X2Icon, 
  ListBulletIcon,
  AdjustmentsHorizontalIcon 
} from '@heroicons/react/24/outline';

const ProductsPage = () => {
  const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'list'
  const [sortBy, setSortBy] = useState('newest');
  const [showFilters, setShowFilters] = useState(false);

  // Mock products data
  const products = [
    {
      id: 1,
      name: 'iPhone 15 Pro Max',
      price: 29990000,
      originalPrice: 32990000,
      image: 'https://via.placeholder.com/300x300?text=iPhone+15',
      rating: 4.8,
      reviews: 2547,
      brand: 'Apple',
      category: 'ƒêi·ªán tho·∫°i'
    },
    {
      id: 2,
      name: 'Samsung Galaxy S24 Ultra',
      price: 26990000,
      originalPrice: 28990000,
      image: 'https://via.placeholder.com/300x300?text=Galaxy+S24',
      rating: 4.7,
      reviews: 1823,
      brand: 'Samsung',
      category: 'ƒêi·ªán tho·∫°i'
    },
    {
      id: 3,
      name: 'MacBook Pro 14 M3',
      price: 52990000,
      originalPrice: 54990000,
      image: 'https://via.placeholder.com/300x300?text=MacBook+Pro',
      rating: 4.9,
      reviews: 891,
      brand: 'Apple',
      category: 'Laptop'
    },
    // Add more mock products...
  ];

  const sortOptions = [
    { value: 'newest', label: 'M·ªõi nh·∫•t' },
    { value: 'price_low', label: 'Gi√° th·∫•p ƒë·∫øn cao' },
    { value: 'price_high', label: 'Gi√° cao ƒë·∫øn th·∫•p' },
    { value: 'rating', label: 'ƒê√°nh gi√° cao nh·∫•t' },
    { value: 'bestseller', label: 'B√°n ch·∫°y nh·∫•t' },
  ];

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const calculateDiscount = (original, current) => {
    return Math.round(((original - current) / original) * 100);
  };

  const ProductCard = ({ product }) => (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-all duration-200 group">
      <div className="relative overflow-hidden">
        <img
          src={product.image}
          alt={product.name}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-200"
        />
        {product.originalPrice > product.price && (
          <div className="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded-lg text-xs font-semibold">
            -{calculateDiscount(product.originalPrice, product.price)}%
          </div>
        )}
        <button className="absolute top-2 right-2 w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-md hover:bg-red-50 transition-colors">
          ‚ù§Ô∏è
        </button>
      </div>

      <div className="p-4">
        <h3 className="font-semibold text-gray-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors">
          {product.name}
        </h3>
        
        <div className="flex items-center mb-2">
          <div className="flex items-center">
            <span className="text-yellow-400">‚≠ê</span>
            <span className="text-sm font-medium text-gray-700 ml-1">{product.rating}</span>
            <span className="text-xs text-gray-500 ml-1">({product.reviews})</span>
          </div>
        </div>

        <div className="flex items-center justify-between mb-3">
          <div>
            <span className="text-lg font-bold text-red-600">
              {formatPrice(product.price)}
            </span>
            {product.originalPrice > product.price && (
              <span className="text-sm text-gray-500 line-through ml-2">
                {formatPrice(product.originalPrice)}
              </span>
            )}
          </div>
        </div>

        <button className="w-full btn btn-primary">
          Th√™m v√†o gi·ªè
        </button>
      </div>
    </div>
  );

  return (
    <ProtectedRoute>
      <Layout>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Page Header */}
          <div className="mb-8">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between">
              <div className="mb-4 md:mb-0">
                <h1 className="text-3xl font-bold text-gray-900">S·∫£n ph·∫©m</h1>
                <p className="text-gray-600 mt-1">
                  Kh√°m ph√° h√†ng ngh√¨n s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao
                </p>
              </div>
              
              {/* Controls */}
              <div className="flex items-center space-x-4">
                {/* Sort */}
                <div className="flex items-center space-x-2">
                  <label className="text-sm font-medium text-gray-700">S·∫Øp x·∫øp:</label>
                  <select
                    value={sortBy}
                    onChange={(e) => setSortBy(e.target.value)}
                    className="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {sortOptions.map((option) => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                </div>

                {/* View Mode */}
                <div className="flex items-center border border-gray-300 rounded-lg">
                  <button
                    onClick={() => setViewMode('grid')}
                    className={`p-2 ${viewMode === 'grid' ? 'bg-blue-100 text-blue-600' : 'text-gray-600'}`}
                  >
                    <Squares2X2Icon className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => setViewMode('list')}
                    className={`p-2 ${viewMode === 'list' ? 'bg-blue-100 text-blue-600' : 'text-gray-600'}`}
                  >
                    <ListBulletIcon className="h-4 w-4" />
                  </button>
                </div>

                {/* Filter Toggle (Mobile) */}
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className="md:hidden flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                  <FunnelIcon className="h-4 w-4" />
                  <span>B·ªô l·ªçc</span>
                </button>
              </div>
            </div>
          </div>

          <div className="flex gap-8">
            {/* Sidebar Filters */}
            <div className={`hidden md:block w-64 flex-shrink-0`}>
              <Sidebar type="filter" />
            </div>

            {/* Mobile Filters */}
            {showFilters && (
              <div className="md:hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex">
                <div className="bg-white w-80 h-full overflow-y-auto p-4">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold">B·ªô l·ªçc</h3>
                    <button
                      onClick={() => setShowFilters(false)}
                      className="text-gray-500 hover:text-gray-700"
                    >
                      ‚úï
                    </button>
                  </div>
                  <Sidebar type="filter" />
                </div>
                <div className="flex-1" onClick={() => setShowFilters(false)} />
              </div>
            )}

            {/* Products Grid */}
            <div className="flex-1">
              {/* Results Info */}
              <div className="flex items-center justify-between mb-6">
                <p className="text-sm text-gray-600">
                  Hi·ªÉn th·ªã {products.length} s·∫£n ph·∫©m
                </p>
              </div>

              {/* Products */}
              <div className={`grid gap-6 ${
                viewMode === 'grid' 
                  ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
                  : 'grid-cols-1'
              }`}>
                {products.map((product) => (
                  <ProductCard key={product.id} product={product} />
                ))}
              </div>

              {/* Pagination */}
              <div className="mt-12 flex justify-center">
                <div className="flex items-center space-x-2">
                  <button className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50">
                    Tr∆∞·ªõc
                  </button>
                  <button className="px-3 py-2 text-sm bg-blue-600 text-white rounded-lg">
                    1
                  </button>
                  <button className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50">
                    2
                  </button>
                  <button className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50">
                    3
                  </button>
                  <button className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50">
                    Sau
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </Layout>
    </ProtectedRoute>
  );
};

export default ProductsPage;
===== auth.js =====
// src/graphql/auth.js
import { gql } from '@apollo/client';

// Login mutation
export const LOGIN_MUTATION = gql`
  mutation Login($input: LoginInput!) {
    login(input: $input) {
      success
      message
      data {
        jwt
        user {
          _id
          username
          email
          firstName
          lastName
          role
        }
      }
    }
  }
`;

// Register mutation
export const REGISTER_MUTATION = gql`
  mutation Register($input: RegisterInput!) {
    register(input: $input) {
      success
      message
      data {
        _id
        username
        email
        firstName
        lastName
        role
      }
    }
  }
`;

// Get current user query
export const ME_QUERY = gql`
  query Me {
    me {
      _id
      username
      email
      firstName
      lastName
      role
    }
  }
`;
===== CartPage.jsx =====

===== ProtectedRoute.jsx =====
// src/components/auth/ProtectedRoute.jsx
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const ProtectedRoute = ({ 
  children, 
  requireAuth = true, 
  requiredRole = null,
  fallback = null 
}) => {
  const { isAuthenticated, user, loading } = useAuth();
  const location = useLocation();

  // Show loading while checking auth
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  // If authentication is required but user is not authenticated
  if (requireAuth && !isAuthenticated) {
    // Redirect to login with return url
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // If user is authenticated but shouldn't be (e.g., login page)
  if (!requireAuth && isAuthenticated) {
    // Redirect based on user role
    const redirectPath = user?.role === 'admin' || user?.role === 'manager' 
      ? '/admin' 
      : '/';
    return <Navigate to={redirectPath} replace />;
  }

  // Check role-based access
  if (requireAuth && requiredRole) {
    if (Array.isArray(requiredRole)) {
      // Multiple roles allowed
      if (!requiredRole.includes(user?.role)) {
        return fallback || (
          <div className="min-h-screen flex items-center justify-center">
            <div className="text-center">
              <h1 className="text-2xl font-bold text-gray-900 mb-4">
                Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
              </h1>
              <p className="text-gray-600 mb-6">
                B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o trang n√†y.
              </p>
              <button
                onClick={() => window.history.back()}
                className="btn btn-primary"
              >
                Quay l·∫°i
              </button>
            </div>
          </div>
        );
      }
    } else {
      // Single role required
      if (user?.role !== requiredRole) {
        return fallback || (
          <div className="min-h-screen flex items-center justify-center">
            <div className="text-center">
              <h1 className="text-2xl font-bold text-gray-900 mb-4">
                Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
              </h1>
              <p className="text-gray-600 mb-6">
                Trang n√†y y√™u c·∫ßu quy·ªÅn {requiredRole}.
              </p>
              <button
                onClick={() => window.history.back()}
                className="btn btn-primary"
              >
                Quay l·∫°i
              </button>
            </div>
          </div>
        );
      }
    }
  }

  // All checks passed, render children
  return children;
};

// Convenience components for different access levels
export const AdminRoute = ({ children, ...props }) => (
  <ProtectedRoute requiredRole="admin" {...props}>
    {children}
  </ProtectedRoute>
);

export const ManagerRoute = ({ children, ...props }) => (
  <ProtectedRoute requiredRole={['admin', 'manager']} {...props}>
    {children}
  </ProtectedRoute>
);

export const CustomerRoute = ({ children, ...props }) => (
  <ProtectedRoute requiredRole="customer" {...props}>
    {children}
  </ProtectedRoute>
);

export const GuestRoute = ({ children, ...props }) => (
  <ProtectedRoute requireAuth={false} {...props}>
    {children}
  </ProtectedRoute>
);

export default ProtectedRoute;
===== useProducts.js =====
// src/hooks/useProducts.js
import { useQuery, useMutation } from '@apollo/client';
import { useState } from 'react';
import toast from 'react-hot-toast';
import {
  GET_PRODUCTS,
  GET_PRODUCT,
  SEARCH_PRODUCTS,
  GET_FEATURED_PRODUCTS,
  GET_PRODUCTS_BY_CATEGORY,
  GET_PRODUCTS_BY_BRAND,
  GET_ALL_PRODUCTS,
  CREATE_PRODUCT,
  UPDATE_PRODUCT,
  DELETE_PRODUCT
} from '../graphql/products';
import {
  GET_ALL_CATEGORIES,
  GET_CATEGORIES
} from '../graphql/categories';
import {
  GET_ALL_BRANDS,
  GET_BRANDS
} from '../graphql/brands';

// Hook ƒë·ªÉ l·∫•y danh s√°ch products v·ªõi pagination v√† filter
export const useProducts = (options = {}) => {
  const {
    first = 12,
    offset = 0,
    orderBy = 'CREATED_DESC',
    condition = null,
    skip = false
  } = options;

  const { data, loading, error, fetchMore, refetch } = useQuery(GET_PRODUCTS, {
    variables: {
      first,
      offset,
      orderBy,
      condition
    },
    skip,
    errorPolicy: 'all',
    notifyOnNetworkStatusChange: true
  });

  const loadMore = () => {
    if (data?.products?.hasNextPage) {
      return fetchMore({
        variables: {
          offset: data.products.nodes.length
        }
      });
    }
  };

  return {
    products: data?.products?.nodes || [],
    totalCount: data?.products?.totalCount || 0,
    hasNextPage: data?.products?.hasNextPage || false,
    hasPreviousPage: data?.products?.hasPreviousPage || false,
    loading,
    error,
    loadMore,
    refetch
  };
};

// Hook ƒë·ªÉ search products
export const useSearchProducts = () => {
  const [searchResults, setSearchResults] = useState([]);
  const [isSearching, setIsSearching] = useState(false);

  const [searchProducts] = useMutation(SEARCH_PRODUCTS, {
    onCompleted: (data) => {
      setSearchResults(data?.searchProducts?.nodes || []);
      setIsSearching(false);
    },
    onError: (error) => {
      console.error('Search error:', error);
      toast.error('L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m');
      setIsSearching(false);
    }
  });

  const search = async (query, options = {}) => {
    if (!query.trim()) {
      setSearchResults([]);
      return;
    }

    setIsSearching(true);
    await searchProducts({
      variables: {
        query: query.trim(),
        first: options.first || 20,
        offset: options.offset || 0,
        orderBy: options.orderBy || 'CREATED_DESC'
      }
    });
  };

  const clearSearch = () => {
    setSearchResults([]);
    setIsSearching(false);
  };

  return {
    searchResults,
    isSearching,
    search,
    clearSearch
  };
};

// Hook ƒë·ªÉ l·∫•y chi ti·∫øt 1 product
export const useProduct = (productId) => {
  const { data, loading, error } = useQuery(GET_PRODUCT, {
    variables: { id: productId },
    skip: !productId,
    errorPolicy: 'all'
  });

  return {
    product: data?.product,
    loading,
    error
  };
};

// Hook ƒë·ªÉ l·∫•y featured products
export const useFeaturedProducts = () => {
  const { data, loading, error } = useQuery(GET_FEATURED_PRODUCTS, {
    errorPolicy: 'all'
  });

  return {
    featuredProducts: data?.featuredProducts || [],
    loading,
    error
  };
};

// Hook ƒë·ªÉ l·∫•y products theo category
export const useProductsByCategory = (categoryId) => {
  const { data, loading, error } = useQuery(GET_PRODUCTS_BY_CATEGORY, {
    variables: { categoryId },
    skip: !categoryId,
    errorPolicy: 'all'
  });

  return {
    products: data?.productsByCategory || [],
    loading,
    error
  };
};

// Hook ƒë·ªÉ l·∫•y products theo brand
export const useProductsByBrand = (brandId) => {
  const { data, loading, error } = useQuery(GET_PRODUCTS_BY_BRAND, {
    variables: { brandId },
    skip: !brandId,
    errorPolicy: 'all'
  });

  return {
    products: data?.productsByBrand || [],
    loading,
    error
  };
};

// Hook ƒë·ªÉ l·∫•y categories cho filter
export const useCategories = () => {
  const { data, loading, error } = useQuery(GET_ALL_CATEGORIES, {
    errorPolicy: 'all'
  });

  return {
    categories: data?.allCategories || [],
    loading,
    error
  };
};

// Hook ƒë·ªÉ l·∫•y brands cho filter
export const useBrands = () => {
  const { data, loading, error } = useQuery(GET_ALL_BRANDS, {
    errorPolicy: 'all'
  });

  return {
    brands: data?.allBrands || [],
    loading,
    error
  };
};

// Admin hooks
export const useCreateProduct = () => {
  const [createProduct, { loading, error }] = useMutation(CREATE_PRODUCT, {
    onCompleted: (data) => {
      toast.success('T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!');
    },
    onError: (error) => {
      console.error('Create product error:', error);
      toast.error('L·ªói khi t·∫°o s·∫£n ph·∫©m');
    },
    refetchQueries: [GET_PRODUCTS, GET_ALL_PRODUCTS]
  });

  return {
    createProduct: (input) => createProduct({ variables: { input } }),
    loading,
    error
  };
};

export const useUpdateProduct = () => {
  const [updateProduct, { loading, error }] = useMutation(UPDATE_PRODUCT, {
    onCompleted: (data) => {
      toast.success('C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!');
    },
    onError: (error) => {
      console.error('Update product error:', error);
      toast.error('L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m');
    },
    refetchQueries: [GET_PRODUCTS, GET_ALL_PRODUCTS]
  });

  return {
    updateProduct: (id, input) => updateProduct({ variables: { id, input } }),
    loading,
    error
  };
};

export const useDeleteProduct = () => {
  const [deleteProduct, { loading, error }] = useMutation(DELETE_PRODUCT, {
    onCompleted: (data) => {
      toast.success('X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!');
    },
    onError: (error) => {
      console.error('Delete product error:', error);
      toast.error('L·ªói khi x√≥a s·∫£n ph·∫©m');
    },
    refetchQueries: [GET_PRODUCTS, GET_ALL_PRODUCTS]
  });

  return {
    deleteProduct: (id) => {
      if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?')) {
        deleteProduct({ variables: { id } });
      }
    },
    loading,
    error
  };
};
===== RegisterPage.jsx =====
// src/pages/RegisterPage.jsx
import React from 'react';
import RegisterForm from '../components/auth/RegisterForm';
import { AuthLayout } from '../components/common/Layout';
import { GuestRoute } from '../components/auth/ProtectedRoute';

const RegisterPage = () => {
  return (
    <GuestRoute>
      <AuthLayout>
        <RegisterForm />
      </AuthLayout>
    </GuestRoute>
  );
};

export default RegisterPage;
===== categories.js =====
// src/graphql/categories.js
import { gql } from '@apollo/client';

// Fragment cho Category data
export const CATEGORY_FRAGMENT = gql`
  fragment CategoryData on Category {
    _id
    name
    description
    image
    isActive
    createdAt
    updatedAt
  }
`;

// Query ƒë·ªÉ l·∫•y danh s√°ch categories v·ªõi pagination
export const GET_CATEGORIES = gql`
  query GetCategories(
    $first: Int = 20,
    $offset: Int = 0,
    $orderBy: CategoriesOrderBy = NAME_ASC,
    $condition: CategoryConditionInput
  ) {
    categories(
      first: $first,
      offset: $offset,
      orderBy: $orderBy,
      condition: $condition
    ) {
      nodes {
        ...CategoryData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${CATEGORY_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y t·∫•t c·∫£ categories (simple)
export const GET_ALL_CATEGORIES = gql`
  query GetAllCategories {
    allCategories {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y chi ti·∫øt 1 category
export const GET_CATEGORY = gql`
  query GetCategory($id: ID!) {
    category(id: $id) {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

// Mutations
export const CREATE_CATEGORY = gql`
  mutation CreateCategory($input: CategoryInput!) {
    createCategory(input: $input) {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

export const UPDATE_CATEGORY = gql`
  mutation UpdateCategory($id: ID!, $input: CategoryInput!) {
    updateCategory(id: $id, input: $input) {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

export const DELETE_CATEGORY = gql`
  mutation DeleteCategory($id: ID!) {
    deleteCategory(id: $id)
  }
`;
===== ProductFilter copy.jsx =====
// src/components/products/ProductFilter.jsx
import React, { useState, useEffect } from 'react';
import { useCategories, useBrands } from '../../hooks/useProducts';
import { 
  FunnelIcon, 
  XMarkIcon,
  ChevronDownIcon,
  ChevronUpIcon 
} from '@heroicons/react/24/outline';

const ProductFilter = ({ 
  onFilterChange, 
  initialFilters = {},
  className = '' 
}) => {
  const { categories, loading: categoriesLoading } = useCategories();
  const { brands, loading: brandsLoading } = useBrands();
  
  const [filters, setFilters] = useState({
    priceRange: { min: '', max: '' },
    categories: [],
    brands: [],
    rating: '',
    inStock: false,
    isFeatured: false,
    ...initialFilters
  });

  const [expandedSections, setExpandedSections] = useState({
    price: true,
    categories: true,
    brands: true,
    features: true
  });

  // Predefined price ranges
  const priceRanges = [
    { label: 'D∆∞·ªõi 1 tri·ªáu', min: 0, max: 1000000 },
    { label: '1 - 5 tri·ªáu', min: 1000000, max: 5000000 },
    { label: '5 - 10 tri·ªáu', min: 5000000, max: 10000000 },
    { label: '10 - 20 tri·ªáu', min: 10000000, max: 20000000 },
    { label: 'Tr√™n 20 tri·ªáu', min: 20000000, max: null }
  ];

  const ratings = [
    { label: '5 sao', value: 5 },
    { label: '4 sao tr·ªü l√™n', value: 4 },
    { label: '3 sao tr·ªü l√™n', value: 3 },
    { label: '2 sao tr·ªü l√™n', value: 2 }
  ];

  useEffect(() => {
    onFilterChange?.(filters);
  }, [filters, onFilterChange]);

  const toggleSection = (section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const handlePriceRangeSelect = (range) => {
    setFilters(prev => ({
      ...prev,
      priceRange: { min: range.min || '', max: range.max || '' }
    }));
  };

  const handleCustomPriceChange = (field, value) => {
    setFilters(prev => ({
      ...prev,
      priceRange: {
        ...prev.priceRange,
        [field]: value
      }
    }));
  };

  const handleCategoryToggle = (categoryId) => {
    setFilters(prev => ({
      ...prev,
      categories: prev.categories.includes(categoryId)
        ? prev.categories.filter(id => id !== categoryId)
        : [...prev.categories, categoryId]
    }));
  };

  const handleBrandToggle = (brandId) => {
    setFilters(prev => ({
      ...prev,
      brands: prev.brands.includes(brandId)
        ? prev.brands.filter(id => id !== brandId)
        : [...prev.brands, brandId]
    }));
  };

  const handleFeatureToggle = (feature) => {
    setFilters(prev => ({
      ...prev,
      [feature]: !prev[feature]
    }));
  };

  const handleRatingChange = (rating) => {
    setFilters(prev => ({
      ...prev,
      rating: prev.rating === rating ? '' : rating
    }));
  };

  const clearFilters = () => {
    setFilters({
      priceRange: { min: '', max: '' },
      categories: [],
      brands: [],
      rating: '',
      inStock: false,
      isFeatured: false
    });
  };

  const hasActiveFilters = () => {
    return (
      filters.priceRange.min || 
      filters.priceRange.max || 
      filters.categories.length > 0 || 
      filters.brands.length > 0 || 
      filters.rating || 
      filters.inStock || 
      filters.isFeatured
    );
  };

  const FilterSection = ({ title, children, sectionKey, count = 0 }) => (
    <div className="border-b border-gray-200 last:border-b-0">
      <button
        onClick={() => toggleSection(sectionKey)}
        className="w-full flex items-center justify-between py-4 text-left"
      >
        <div className="flex items-center">
          <span className="font-medium text-gray-900">{title}</span>
          {count > 0 && (
            <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
              {count}
            </span>
          )}
        </div>
        {expandedSections[sectionKey] ? (
          <ChevronUpIcon className="h-4 w-4 text-gray-500" />
        ) : (
          <ChevronDownIcon className="h-4 w-4 text-gray-500" />
        )}
      </button>
      
      {expandedSections[sectionKey] && (
        <div className="pb-4">
          {children}
        </div>
      )}
    </div>
  );

  return (
    <div className={`bg-white rounded-lg shadow-sm border border-gray-200 ${className}`}>
      {/* Header */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <FunnelIcon className="h-5 w-5 text-gray-500 mr-2" />
            <h3 className="font-semibold text-gray-900">B·ªô l·ªçc</h3>
          </div>
          
          {hasActiveFilters() && (
            <button
              onClick={clearFilters}
              className="text-sm text-blue-600 hover:text-blue-700 font-medium"
            >
              X√≥a t·∫•t c·∫£
            </button>
          )}
        </div>
      </div>

      <div className="p-4">
        {/* Price Range Filter */}
        <FilterSection 
          title="Kho·∫£ng gi√°" 
          sectionKey="price"
          count={filters.priceRange.min || filters.priceRange.max ? 1 : 0}
        >
          <div className="space-y-3">
            {/* Predefined ranges */}
            <div className="space-y-2">
              {priceRanges.map((range, index) => (
                <label key={index} className="flex items-center">
                  <input
                    type="radio"
                    name="priceRange"
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    checked={
                      filters.priceRange.min === range.min && 
                      filters.priceRange.max === range.max
                    }
                    onChange={() => handlePriceRangeSelect(range)}
                  />
                  <span className="ml-2 text-sm text-gray-700">{range.label}</span>
                </label>
              ))}
            </div>

            {/* Custom range */}
            <div className="pt-3 border-t border-gray-100">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                T√πy ch·ªânh (VNƒê)
              </label>
              <div className="flex items-center space-x-2">
                <input
                  type="number"
                  placeholder="T·ª´"
                  value={filters.priceRange.min}
                  onChange={(e) => handleCustomPriceChange('min', e.target.value)}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <span className="text-gray-500">-</span>
                <input
                  type="number"
                  placeholder="ƒê·∫øn"
                  value={filters.priceRange.max}
                  onChange={(e) => handleCustomPriceChange('max', e.target.value)}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>
          </div>
        </FilterSection>

        {/* Categories Filter */}
        <FilterSection 
          title="Danh m·ª•c" 
          sectionKey="categories"
          count={filters.categories.length}
        >
          <div className="space-y-2 max-h-48 overflow-y-auto">
            {categoriesLoading ? (
              <div className="space-y-2">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="h-6 bg-gray-200 rounded animate-pulse"></div>
                ))}
              </div>
            ) : (
              categories.map((category) => (
                <label key={category._id} className="flex items-center">
                  <input
                    type="checkbox"
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    checked={filters.categories.includes(category._id)}
                    onChange={() => handleCategoryToggle(category._id)}
                  />
                  <span className="ml-2 text-sm text-gray-700">{category.name}</span>
                </label>
              ))
            )}
          </div>
        </FilterSection>

        {/* Brands Filter */}
        <FilterSection 
          title="Th∆∞∆°ng hi·ªáu" 
          sectionKey="brands"
          count={filters.brands.length}
        >
          <div className="space-y-2 max-h-48 overflow-y-auto">
            {brandsLoading ? (
              <div className="space-y-2">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="h-6 bg-gray-200 rounded animate-pulse"></div>
                ))}
              </div>
            ) : (
              brands.map((brand) => (
                <label key={brand._id} className="flex items-center">
                  <input
                    type="checkbox"
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    checked={filters.brands.includes(brand._id)}
                    onChange={() => handleBrandToggle(brand._id)}
                  />
                  <span className="ml-2 text-sm text-gray-700">{brand.name}</span>
                </label>
              ))
            )}
          </div>
        </FilterSection>

        {/* Rating Filter */}
        <FilterSection 
          title="ƒê√°nh gi√°" 
          sectionKey="rating"
          count={filters.rating ? 1 : 0}
        >
          <div className="space-y-2">
            {ratings.map((rating) => (
              <label key={rating.value} className="flex items-center">
                <input
                  type="radio"
                  name="rating"
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  checked={filters.rating === rating.value}
                  onChange={() => handleRatingChange(rating.value)}
                />
                <span className="ml-2 text-sm text-gray-700 flex items-center">
                  {rating.label}
                  <span className="ml-1 text-yellow-400">
                    {'‚òÖ'.repeat(Math.floor(rating.value))}
                  </span>
                </span>
              </label>
            ))}
          </div>
        </FilterSection>

        {/* Features Filter */}
        <FilterSection 
          title="T√≠nh nƒÉng" 
          sectionKey="features"
          count={(filters.inStock ? 1 : 0) + (filters.isFeatured ? 1 : 0)}
        >
          <div className="space-y-2">
            <label className="flex items-center">
              <input
                type="checkbox"
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                checked={filters.inStock}
                onChange={() => handleFeatureToggle('inStock')}
              />
              <span className="ml-2 text-sm text-gray-700">C√≤n h√†ng</span>
            </label>
            
            <label className="flex items-center">
              <input
                type="checkbox"
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                checked={filters.isFeatured}
                onChange={() => handleFeatureToggle('isFeatured')}
              />
              <span className="ml-2 text-sm text-gray-700">S·∫£n ph·∫©m n·ªïi b·∫≠t</span>
            </label>
          </div>
        </FilterSection>
      </div>

      {/* Apply Button */}
      <div className="p-4 border-t border-gray-200">
        <button
          onClick={() => onFilterChange?.(filters)}
          className="w-full btn btn-primary"
        >
          √Åp d·ª•ng b·ªô l·ªçc
        </button>
      </div>
    </div>
  );
};

export default ProductFilter;
===== RegisterForm.jsx =====
// src/components/auth/RegisterForm.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline';
import { useRegister } from '../../hooks/useAuth';

const RegisterForm = () => {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
    firstName: '',
    lastName: '',
    phone: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [errors, setErrors] = useState({});

  const { register, loading } = useRegister();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    // Username validation
    if (!formData.username.trim()) {
      newErrors.username = 'T√™n ƒëƒÉng nh·∫≠p l√† b·∫Øt bu·ªôc';
    } else if (formData.username.length < 3) {
      newErrors.username = 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±';
    }

    // Email validation
    if (!formData.email.trim()) {
      newErrors.email = 'Email l√† b·∫Øt bu·ªôc';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
    }

    // Password validation
    if (!formData.password) {
      newErrors.password = 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.password.length < 6) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }

    // Confirm password validation
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'X√°c nh·∫≠n m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp';
    }

    // First name validation
    if (!formData.firstName.trim()) {
      newErrors.firstName = 'H·ªç l√† b·∫Øt bu·ªôc';
    }

    // Last name validation
    if (!formData.lastName.trim()) {
      newErrors.lastName = 'T√™n l√† b·∫Øt bu·ªôc';
    }

    // Phone validation (optional)
    if (formData.phone && !/^[0-9]{10,11}$/.test(formData.phone)) {
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    // Remove confirmPassword before sending
    const { confirmPassword, ...registerData } = formData;
    await register(registerData);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            T·∫°o t√†i kho·∫£n SmartShop
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Ho·∫∑c{' '}
            <Link
              to="/login"
              className="font-medium text-blue-600 hover:text-blue-500"
            >
              ƒëƒÉng nh·∫≠p t√†i kho·∫£n c√≥ s·∫µn
            </Link>
          </p>
        </div>

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            {/* Username Field */}
            <div className="form-group">
              <label htmlFor="username" className="form-label">
                T√™n ƒëƒÉng nh·∫≠p *
              </label>
              <input
                id="username"
                name="username"
                type="text"
                autoComplete="username"
                required
                className={`input ${errors.username ? 'input-error' : ''}`}
                placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                value={formData.username}
                onChange={handleChange}
              />
              {errors.username && (
                <p className="form-error">{errors.username}</p>
              )}
            </div>

            {/* Email Field */}
            <div className="form-group">
              <label htmlFor="email" className="form-label">
                Email *
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                className={`input ${errors.email ? 'input-error' : ''}`}
                placeholder="Nh·∫≠p email"
                value={formData.email}
                onChange={handleChange}
              />
              {errors.email && (
                <p className="form-error">{errors.email}</p>
              )}
            </div>

            {/* First Name & Last Name */}
            <div className="grid grid-cols-2 gap-4">
              <div className="form-group">
                <label htmlFor="firstName" className="form-label">
                  H·ªç *
                </label>
                <input
                  id="firstName"
                  name="firstName"
                  type="text"
                  autoComplete="given-name"
                  required
                  className={`input ${errors.firstName ? 'input-error' : ''}`}
                  placeholder="H·ªç"
                  value={formData.firstName}
                  onChange={handleChange}
                />
                {errors.firstName && (
                  <p className="form-error">{errors.firstName}</p>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="lastName" className="form-label">
                  T√™n *
                </label>
                <input
                  id="lastName"
                  name="lastName"
                  type="text"
                  autoComplete="family-name"
                  required
                  className={`input ${errors.lastName ? 'input-error' : ''}`}
                  placeholder="T√™n"
                  value={formData.lastName}
                  onChange={handleChange}
                />
                {errors.lastName && (
                  <p className="form-error">{errors.lastName}</p>
                )}
              </div>
            </div>

            {/* Phone Field */}
            <div className="form-group">
              <label htmlFor="phone" className="form-label">
                S·ªë ƒëi·ªán tho·∫°i
              </label>
              <input
                id="phone"
                name="phone"
                type="tel"
                autoComplete="tel"
                className={`input ${errors.phone ? 'input-error' : ''}`}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (t√πy ch·ªçn)"
                value={formData.phone}
                onChange={handleChange}
              />
              {errors.phone && (
                <p className="form-error">{errors.phone}</p>
              )}
            </div>

            {/* Password Field */}
            <div className="form-group">
              <label htmlFor="password" className="form-label">
                M·∫≠t kh·∫©u *
              </label>
              <div className="relative">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? 'text' : 'password'}
                  autoComplete="new-password"
                  required
                  className={`input pr-10 ${errors.password ? 'input-error' : ''}`}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                  value={formData.password}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeSlashIcon className="h-5 w-5 text-gray-400" />
                  ) : (
                    <EyeIcon className="h-5 w-5 text-gray-400" />
                  )}
                </button>
              </div>
              {errors.password && (
                <p className="form-error">{errors.password}</p>
              )}
            </div>

            {/* Confirm Password Field */}
            <div className="form-group">
              <label htmlFor="confirmPassword" className="form-label">
                X√°c nh·∫≠n m·∫≠t kh·∫©u *
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? 'text' : 'password'}
                  autoComplete="new-password"
                  required
                  className={`input pr-10 ${errors.confirmPassword ? 'input-error' : ''}`}
                  placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                >
                  {showConfirmPassword ? (
                    <EyeSlashIcon className="h-5 w-5 text-gray-400" />
                  ) : (
                    <EyeIcon className="h-5 w-5 text-gray-400" />
                  )}
                </button>
              </div>
              {errors.confirmPassword && (
                <p className="form-error">{errors.confirmPassword}</p>
              )}
            </div>
          </div>

          {/* Terms Agreement */}
          <div className="flex items-center">
            <input
              id="agree-terms"
              name="agree-terms"
              type="checkbox"
              required
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="agree-terms" className="ml-2 block text-sm text-gray-900">
              T√¥i ƒë·ªìng √Ω v·ªõi{' '}
              <a href="#" className="text-blue-600 hover:text-blue-500">
                ƒêi·ªÅu kho·∫£n d·ªãch v·ª•
              </a>{' '}
              v√†{' '}
              <a href="#" className="text-blue-600 hover:text-blue-500">
                Ch√≠nh s√°ch b·∫£o m·∫≠t
              </a>
            </label>
          </div>

          {/* Submit Button */}
          <div>
            <button
              type="submit"
              disabled={loading}
              className="btn btn-primary w-full flex justify-center items-center"
            >
              {loading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  ƒêang t·∫°o t√†i kho·∫£n...
                </>
              ) : (
                'T·∫°o t√†i kho·∫£n'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default RegisterForm;
===== ProductCard.jsx =====
// src/components/products/ProductCard.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { 
  HeartIcon, 
  ShoppingCartIcon, 
  EyeIcon,
  StarIcon 
} from '@heroicons/react/24/outline';
import { HeartIcon as HeartSolidIcon } from '@heroicons/react/24/solid';
import { formatPrice, getImageUrl, calculateDiscountPercentage } from '../../lib/utils';

const ProductCard = ({ 
  product, 
  viewMode = 'grid', // 'grid' or 'list'
  showQuickActions = true,
  className = '' 
}) => {
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [imageError, setImageError] = useState(false);

  if (!product) return null;

  const {
    _id,
    name,
    description,
    price,
    originalPrice,
    images = [],
    stock,
    category,
    brand,
    isFeatured
  } = product;

  const discount = originalPrice && originalPrice > price 
    ? calculateDiscountPercentage(originalPrice, price) 
    : 0;

  const mainImage = images.length > 0 ? getImageUrl(images[0]) : '/placeholder-product.jpg';

  const handleAddToWishlist = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsWishlisted(!isWishlisted);
    // TODO: Implement wishlist functionality
  };

  const handleAddToCart = (e) => {
    e.preventDefault();
    e.stopPropagation();
    // TODO: Implement add to cart functionality
    console.log('Add to cart:', product);
  };

  const handleQuickView = (e) => {
    e.preventDefault();
    e.stopPropagation();
    // TODO: Implement quick view modal
    console.log('Quick view:', product);
  };

  // Grid view layout
  if (viewMode === 'grid') {
    return (
      <div className={`group bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-all duration-200 ${className}`}>
        {/* Image Container */}
        <Link to={`/products/${_id}`} className="block relative overflow-hidden bg-gray-100">
          <div className="aspect-square">
            <img
              src={imageError ? '/placeholder-product.jpg' : mainImage}
              alt={name}
              className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              onError={() => setImageError(true)}
              loading="lazy"
            />
          </div>

          {/* Overlays */}
          <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200" />

          {/* Badges */}
          <div className="absolute top-3 left-3 flex flex-col gap-2">
            {isFeatured && (
              <span className="px-2 py-1 bg-blue-500 text-white text-xs font-semibold rounded-lg">
                N·ªïi b·∫≠t
              </span>
            )}
            {discount > 0 && (
              <span className="px-2 py-1 bg-red-500 text-white text-xs font-semibold rounded-lg">
                -{discount}%
              </span>
            )}
            {stock === 0 && (
              <span className="px-2 py-1 bg-gray-500 text-white text-xs font-semibold rounded-lg">
                H·∫øt h√†ng
              </span>
            )}
          </div>

          {/* Quick Actions */}
          {showQuickActions && (
            <div className="absolute top-3 right-3 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
              <button
                onClick={handleAddToWishlist}
                className="w-9 h-9 bg-white rounded-full flex items-center justify-center shadow-md hover:bg-red-50 transition-colors"
                title={isWishlisted ? 'B·ªè y√™u th√≠ch' : 'Th√™m v√†o y√™u th√≠ch'}
              >
                {isWishlisted ? (
                  <HeartSolidIcon className="w-4 h-4 text-red-500" />
                ) : (
                  <HeartIcon className="w-4 h-4 text-gray-600" />
                )}
              </button>
              <button
                onClick={handleQuickView}
                className="w-9 h-9 bg-white rounded-full flex items-center justify-center shadow-md hover:bg-blue-50 transition-colors"
                title="Xem nhanh"
              >
                <EyeIcon className="w-4 h-4 text-gray-600" />
              </button>
            </div>
          )}

          {/* Quick Add to Cart (Bottom overlay) */}
          {showQuickActions && stock > 0 && (
            <div className="absolute bottom-0 left-0 right-0 p-3 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-200">
              <button
                onClick={handleAddToCart}
                className="w-full btn btn-primary text-sm py-2"
              >
                <ShoppingCartIcon className="w-4 h-4 mr-2" />
                Th√™m v√†o gi·ªè
              </button>
            </div>
          )}
        </Link>

        {/* Product Info */}
        <div className="p-4">
          {/* Category & Brand */}
          <div className="flex items-center justify-between text-xs text-gray-500 mb-2">
            <span>{category?.name}</span>
            <span>{brand?.name}</span>
          </div>

          {/* Product Name */}
          <Link 
            to={`/products/${_id}`}
            className="block"
          >
            <h3 className="font-semibold text-gray-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors">
              {name}
            </h3>
          </Link>

          {/* Rating (Mock for now) */}
          <div className="flex items-center mb-3">
            <div className="flex items-center">
              {[...Array(5)].map((_, i) => (
                <StarIcon
                  key={i}
                  className={`w-4 h-4 ${i < 4 ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
                />
              ))}
            </div>
            <span className="text-sm text-gray-500 ml-1">(4.2)</span>
          </div>

          {/* Price */}
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-2">
              <span className="text-lg font-bold text-red-600">
                {formatPrice(price)}
              </span>
              {originalPrice && originalPrice > price && (
                <span className="text-sm text-gray-500 line-through">
                  {formatPrice(originalPrice)}
                </span>
              )}
            </div>
          </div>

          {/* Stock Status */}
          <div className="flex items-center justify-between">
            <span className={`text-xs px-2 py-1 rounded-full ${
              stock > 10 
                ? 'bg-green-100 text-green-700' 
                : stock > 0 
                  ? 'bg-yellow-100 text-yellow-700'
                  : 'bg-red-100 text-red-700'
            }`}>
              {stock > 10 ? 'C√≤n h√†ng' : stock > 0 ? `C√≤n ${stock}` : 'H·∫øt h√†ng'}
            </span>
          </div>
        </div>
      </div>
    );
  }

  // List view layout
  return (
    <div className={`group bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-all duration-200 ${className}`}>
      <div className="flex">
        {/* Image */}
        <Link to={`/products/${_id}`} className="block relative overflow-hidden bg-gray-100 w-48 flex-shrink-0">
          <div className="aspect-square">
            <img
              src={imageError ? '/placeholder-product.jpg' : mainImage}
              alt={name}
              className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              onError={() => setImageError(true)}
              loading="lazy"
            />
          </div>

          {/* Badges */}
          <div className="absolute top-2 left-2 flex flex-col gap-1">
            {isFeatured && (
              <span className="px-2 py-1 bg-blue-500 text-white text-xs font-semibold rounded">
                N·ªïi b·∫≠t
              </span>
            )}
            {discount > 0 && (
              <span className="px-2 py-1 bg-red-500 text-white text-xs font-semibold rounded">
                -{discount}%
              </span>
            )}
          </div>
        </Link>

        {/* Content */}
        <div className="flex-1 p-6 flex flex-col justify-between">
          <div>
            {/* Category & Brand */}
            <div className="flex items-center text-sm text-gray-500 mb-2">
              <span>{category?.name}</span>
              <span className="mx-2">‚Ä¢</span>
              <span>{brand?.name}</span>
            </div>

            {/* Product Name */}
            <Link to={`/products/${_id}`}>
              <h3 className="text-xl font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                {name}
              </h3>
            </Link>

            {/* Description */}
            {description && (
              <p className="text-gray-600 text-sm mb-4 line-clamp-2">
                {description}
              </p>
            )}

            {/* Rating */}
            <div className="flex items-center mb-4">
              <div className="flex items-center">
                {[...Array(5)].map((_, i) => (
                  <StarIcon
                    key={i}
                    className={`w-4 h-4 ${i < 4 ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
                  />
                ))}
              </div>
              <span className="text-sm text-gray-500 ml-2">(4.2) ‚Ä¢ 156 ƒë√°nh gi√°</span>
            </div>
          </div>

          {/* Bottom section */}
          <div className="flex items-center justify-between">
            {/* Price */}
            <div className="flex items-center space-x-3">
              <span className="text-2xl font-bold text-red-600">
                {formatPrice(price)}
              </span>
              {originalPrice && originalPrice > price && (
                <span className="text-lg text-gray-500 line-through">
                  {formatPrice(originalPrice)}
                </span>
              )}
            </div>

            {/* Actions */}
            <div className="flex items-center space-x-3">
              {/* Stock */}
              <span className={`text-sm px-3 py-1 rounded-full ${
                stock > 10 
                  ? 'bg-green-100 text-green-700' 
                  : stock > 0 
                    ? 'bg-yellow-100 text-yellow-700'
                    : 'bg-red-100 text-red-700'
              }`}>
                {stock > 10 ? 'C√≤n h√†ng' : stock > 0 ? `C√≤n ${stock}` : 'H·∫øt h√†ng'}
              </span>

              {/* Action Buttons */}
              <div className="flex items-center space-x-2">
                <button
                  onClick={handleAddToWishlist}
                  className="p-2 text-gray-600 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors"
                  title={isWishlisted ? 'B·ªè y√™u th√≠ch' : 'Th√™m v√†o y√™u th√≠ch'}
                >
                  {isWishlisted ? (
                    <HeartSolidIcon className="w-5 h-5 text-red-500" />
                  ) : (
                    <HeartIcon className="w-5 h-5" />
                  )}
                </button>

                {stock > 0 && (
                  <button
                    onClick={handleAddToCart}
                    className="btn btn-primary"
                  >
                    <ShoppingCartIcon className="w-4 h-4 mr-2" />
                    Th√™m v√†o gi·ªè
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductCard;
===== App.jsx =====
// src/App.jsx
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import { useAuth } from './contexts/AuthContext';

// Pages
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import HomePage from './pages/HomePage';
import ProductsPage from './pages/ProductsPage';
import NotFoundPage from './pages/NotFoundPage';

// Protected Routes
import ProtectedRoute, { AdminRoute, ManagerRoute } from './components/auth/ProtectedRoute';

function App() {
  const { loading } = useAuth();

  // Show loading while initializing auth
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">ƒêang kh·ªüi t·∫°o SmartShop...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="App">
      <Routes>
        {/* Public Routes */}
        <Route path="/login" element={<LoginPage />} />
        <Route path="/register" element={<RegisterPage />} />
        
        {/* Protected Routes */}
        <Route 
          path="/" 
          element={
            <ProtectedRoute>
              <HomePage />
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/products" 
          element={
            <ProtectedRoute>
              <ProductsPage />
            </ProtectedRoute>
          } 
        />
        
        {/* Placeholder pages */}
        <Route 
          path="/categories" 
          element={
            <ProtectedRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <div className="max-w-7xl mx-auto">
                  <h1 className="text-3xl font-bold text-gray-900 mb-6">Danh m·ª•c s·∫£n ph·∫©m</h1>
                  <div className="bg-white rounded-lg shadow p-6">
                    <p className="text-gray-600">Trang danh m·ª•c s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn ·ªü ph·∫ßn ti·∫øp theo! üìÇ</p>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/brands" 
          element={
            <ProtectedRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <div className="max-w-7xl mx-auto">
                  <h1 className="text-3xl font-bold text-gray-900 mb-6">Th∆∞∆°ng hi·ªáu</h1>
                  <div className="bg-white rounded-lg shadow p-6">
                    <p className="text-gray-600">Trang th∆∞∆°ng hi·ªáu s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn ·ªü ph·∫ßn ti·∫øp theo! üè™</p>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/cart" 
          element={
            <ProtectedRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <div className="max-w-7xl mx-auto">
                  <h1 className="text-3xl font-bold text-gray-900 mb-6">Gi·ªè h√†ng</h1>
                  <div className="bg-white rounded-lg shadow p-6">
                    <p className="text-gray-600">T√≠nh nƒÉng gi·ªè h√†ng s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn ·ªü ph·∫ßn ti·∫øp theo! üõí</p>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          } 
        />
        
        {/* Admin Routes */}
        <Route 
          path="/admin/*" 
          element={
            <AdminRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <h1 className="text-3xl font-bold text-gray-900 mb-6">
                  Admin Dashboard
                </h1>
                <div className="bg-white rounded-lg shadow p-6">
                  <p className="text-gray-600">
                    Welcome to SmartShop Admin Panel! üöÄ
                  </p>
                  <p className="text-sm text-gray-500 mt-2">
                    Admin features will be implemented here.
                  </p>
                </div>
              </div>
            </AdminRoute>
          } 
        />
        
        {/* Manager Routes */}
        <Route 
          path="/manager/*" 
          element={
            <ManagerRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <h1 className="text-3xl font-bold text-gray-900 mb-6">
                  Manager Dashboard
                </h1>
                <div className="bg-white rounded-lg shadow p-6">
                  <p className="text-gray-600">
                    Welcome to SmartShop Manager Panel! üìä
                  </p>
                  <p className="text-sm text-gray-500 mt-2">
                    Manager features will be implemented here.
                  </p>
                </div>
              </div>
            </ManagerRoute>
          } 
        />
        
        {/* 404 Page */}
        <Route path="*" element={<NotFoundPage />} />
      </Routes>
    </div>
  );
}

export default App;
===== ProductList.jsx =====
// src/components/products/ProductList.jsx
import React from 'react';
import ProductCard from './ProductCard';

const ProductList = ({ 
  products = [], 
  loading = false, 
  viewMode = 'grid',
  showLoadMore = false,
  onLoadMore,
  hasNextPage = false,
  loadingMore = false 
}) => {
  
  if (loading && products.length === 0) {
    return (
      <div className={`grid gap-6 ${
        viewMode === 'grid' 
          ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
          : 'grid-cols-1'
      }`}>
        {[...Array(6)].map((_, index) => (
          <ProductCardSkeleton key={index} viewMode={viewMode} />
        ))}
      </div>
    );
  }

  if (products.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="w-24 h-24 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
          <span className="text-4xl">üì¶</span>
        </div>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
        </h3>
        <p className="text-gray-600 mb-6">
          Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c
        </p>
        <button 
          onClick={() => window.location.reload()}
          className="btn btn-primary"
        >
          L√†m m·ªõi trang
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Products Grid/List */}
      <div className={`grid gap-6 ${
        viewMode === 'grid' 
          ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
          : 'grid-cols-1'
      }`}>
        {products.map((product) => (
          <ProductCard 
            key={product._id} 
            product={product} 
            viewMode={viewMode}
          />
        ))}
      </div>

      {/* Load More Button */}
      {showLoadMore && hasNextPage && (
        <div className="text-center py-8">
          <button
            onClick={onLoadMore}
            disabled={loadingMore}
            className="btn btn-secondary px-8 py-3"
          >
            {loadingMore ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600 mr-2"></div>
                ƒêang t·∫£i...
              </>
            ) : (
              'Xem th√™m s·∫£n ph·∫©m'
            )}
          </button>
        </div>
      )}

      {/* Loading More Indicator */}
      {loadingMore && (
        <div className={`grid gap-6 ${
          viewMode === 'grid' 
            ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
            : 'grid-cols-1'
        }`}>
          {[...Array(3)].map((_, index) => (
            <ProductCardSkeleton key={`loading-${index}`} viewMode={viewMode} />
          ))}
        </div>
      )}
    </div>
  );
};

// Skeleton Loading Component
const ProductCardSkeleton = ({ viewMode }) => {
  if (viewMode === 'grid') {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden animate-pulse">
        {/* Image Skeleton */}
        <div className="aspect-square bg-gray-200"></div>
        
        {/* Content Skeleton */}
        <div className="p-4 space-y-3">
          {/* Category & Brand */}
          <div className="flex justify-between">
            <div className="h-3 bg-gray-200 rounded w-16"></div>
            <div className="h-3 bg-gray-200 rounded w-12"></div>
          </div>
          
          {/* Title */}
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded w-full"></div>
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
          </div>
          
          {/* Rating */}
          <div className="flex items-center space-x-1">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="w-4 h-4 bg-gray-200 rounded"></div>
            ))}
            <div className="h-3 bg-gray-200 rounded w-8 ml-2"></div>
          </div>
          
          {/* Price */}
          <div className="flex items-center space-x-2">
            <div className="h-5 bg-gray-200 rounded w-20"></div>
            <div className="h-4 bg-gray-200 rounded w-16"></div>
          </div>
          
          {/* Stock */}
          <div className="h-6 bg-gray-200 rounded w-16"></div>
        </div>
      </div>
    );
  }

  // List view skeleton
  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden animate-pulse">
      <div className="flex">
        {/* Image Skeleton */}
        <div className="w-48 aspect-square bg-gray-200 flex-shrink-0"></div>
        
        {/* Content Skeleton */}
        <div className="flex-1 p-6 space-y-4">
          {/* Category & Brand */}
          <div className="flex items-center space-x-4">
            <div className="h-3 bg-gray-200 rounded w-16"></div>
            <div className="h-3 bg-gray-200 rounded w-12"></div>
          </div>
          
          {/* Title */}
          <div className="space-y-2">
            <div className="h-6 bg-gray-200 rounded w-3/4"></div>
            <div className="h-6 bg-gray-200 rounded w-1/2"></div>
          </div>
          
          {/* Description */}
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded w-full"></div>
            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
          </div>
          
          {/* Rating */}
          <div className="flex items-center space-x-1">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="w-4 h-4 bg-gray-200 rounded"></div>
            ))}
            <div className="h-3 bg-gray-200 rounded w-20 ml-2"></div>
          </div>
          
          {/* Bottom section */}
          <div className="flex items-center justify-between pt-4">
            <div className="flex items-center space-x-3">
              <div className="h-7 bg-gray-200 rounded w-24"></div>
              <div className="h-6 bg-gray-200 rounded w-20"></div>
            </div>
            <div className="flex items-center space-x-3">
              <div className="h-6 bg-gray-200 rounded w-16"></div>
              <div className="h-9 bg-gray-200 rounded w-24"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductList;
===== index.css =====
/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  * {
    box-sizing: border-box;
  }
  
  body {
    font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    @apply bg-gray-50 text-gray-900;
  }

  html {
    scroll-behavior: smooth;
  }
}

@layer components {
  /* Button Components */
  .btn {
    @apply inline-flex items-center justify-center px-4 py-2 rounded-lg font-medium text-sm transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;
  }
  
  .btn-primary {
    @apply bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700 focus:ring-blue-500 shadow-lg hover:shadow-xl transform hover:scale-[1.02];
  }
  
  .btn-secondary {
    @apply bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-gray-500 shadow-sm hover:shadow-md;
  }
  
  .btn-danger {
    @apply bg-gradient-to-r from-red-500 to-red-600 text-white hover:from-red-600 hover:to-red-700 focus:ring-red-500 shadow-lg hover:shadow-xl;
  }

  .btn-ghost {
    @apply text-gray-600 hover:text-gray-900 hover:bg-gray-100 focus:ring-gray-500;
  }

  /* Input Components */
  .input {
    @apply w-full px-4 py-3 border border-gray-300 rounded-xl placeholder-gray-500 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200;
  }
  
  .input-error {
    @apply border-red-300 focus:ring-red-500 bg-red-50;
  }

  .input-success {
    @apply border-green-300 focus:ring-green-500 bg-green-50;
  }

  /* Form Components */
  .form-group {
    @apply space-y-2;
  }
  
  .form-label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
  
  .form-error {
    @apply text-red-500 text-sm mt-1 flex items-center;
  }

  .form-help {
    @apply text-gray-500 text-sm mt-1;
  }

  /* Card Components */
  .card {
    @apply bg-white rounded-xl shadow-sm border border-gray-100 p-6 hover:shadow-md transition-all duration-200;
  }

  .card-header {
    @apply border-b border-gray-100 pb-4 mb-4;
  }

  .card-footer {
    @apply border-t border-gray-100 pt-4 mt-4;
  }

  /* Badge Components */
  .badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }

  .badge-primary {
    @apply bg-blue-100 text-blue-800;
  }

  .badge-secondary {
    @apply bg-gray-100 text-gray-800;
  }

  .badge-success {
    @apply bg-green-100 text-green-800;
  }

  .badge-warning {
    @apply bg-yellow-100 text-yellow-800;
  }

  .badge-danger {
    @apply bg-red-100 text-red-800;
  }

  /* Alert Components */
  .alert {
    @apply p-4 rounded-xl border-l-4;
  }

  .alert-info {
    @apply bg-blue-50 border-blue-400 text-blue-700;
  }

  .alert-success {
    @apply bg-green-50 border-green-400 text-green-700;
  }

  .alert-warning {
    @apply bg-yellow-50 border-yellow-400 text-yellow-700;
  }

  .alert-error {
    @apply bg-red-50 border-red-400 text-red-700;
  }

  /* Loading Components */
  .loading-spinner {
    @apply animate-spin rounded-full border-2 border-gray-300 border-t-blue-600;
  }

  .loading-pulse {
    @apply animate-pulse bg-gray-200 rounded;
  }

  /* Navigation Components */
  .nav-link {
    @apply px-3 py-2 rounded-lg text-sm font-medium transition-colors;
  }

  .nav-link-active {
    @apply bg-blue-100 text-blue-700;
  }

  .nav-link-inactive {
    @apply text-gray-600 hover:text-gray-900 hover:bg-gray-100;
  }

  /* Table Components */
  .table {
    @apply min-w-full divide-y divide-gray-200;
  }

  .table-header {
    @apply bg-gray-50;
  }

  .table-header-cell {
    @apply px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider;
  }

  .table-body {
    @apply bg-white divide-y divide-gray-200;
  }

  .table-row {
    @apply hover:bg-gray-50 transition-colors;
  }

  .table-cell {
    @apply px-6 py-4 whitespace-nowrap text-sm text-gray-900;
  }

  /* Modal Components */
  .modal-overlay {
    @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50;
  }

  .modal-content {
    @apply bg-white rounded-xl shadow-xl max-w-md w-full p-6;
  }

  /* Dropdown Components */
  .dropdown {
    @apply relative inline-block text-left;
  }

  .dropdown-menu {
    @apply absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-lg border border-gray-200 py-1 z-50;
  }

  .dropdown-item {
    @apply block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors;
  }
}

@layer utilities {
  /* Custom Scrollbar */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  .scrollbar-thin {
    scrollbar-width: thin;
  }

  .scrollbar-thin::-webkit-scrollbar {
    width: 6px;
  }

  .scrollbar-thin::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  /* Glass Effect */
  .glass {
    @apply bg-white/80 backdrop-blur-md border border-white/20;
  }

  .glass-dark {
    @apply bg-gray-900/80 backdrop-blur-md border border-gray-700/20;
  }

  /* Text Gradients */
  .text-gradient {
    @apply bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent;
  }

  .text-gradient-success {
    @apply bg-gradient-to-r from-green-500 to-emerald-600 bg-clip-text text-transparent;
  }

  .text-gradient-warning {
    @apply bg-gradient-to-r from-yellow-500 to-orange-500 bg-clip-text text-transparent;
  }

  .text-gradient-danger {
    @apply bg-gradient-to-r from-red-500 to-pink-600 bg-clip-text text-transparent;
  }

  /* Animations */
  .animate-fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }

  .animate-slide-up {
    animation: slideUp 0.3s ease-out;
  }

  .animate-slide-down {
    animation: slideDown 0.3s ease-out;
  }

  .animate-scale-in {
    animation: scaleIn 0.2s ease-out;
  }

  /* Hover Effects */
  .hover-lift {
    @apply transition-transform duration-200 hover:scale-105;
  }

  .hover-glow {
    @apply transition-shadow duration-200 hover:shadow-lg hover:shadow-blue-500/25;
  }

  /* Focus Effects */
  .focus-ring {
    @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2;
  }

  .focus-ring-inset {
    @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset;
  }
}

/* Custom Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* React Hot Toast Custom Styles */
.Toaster__toast {
  @apply rounded-xl shadow-lg;
}

.Toaster__toast--success {
  @apply bg-green-500;
}

.Toaster__toast--error {
  @apply bg-red-500;
}

.Toaster__toast--loading {
  @apply bg-blue-500;
}

/* Selection Styles */
::selection {
  @apply bg-blue-200 text-blue-900;
}

::-moz-selection {
  @apply bg-blue-200 text-blue-900;
}

/* Focus Visible for Accessibility */
*:focus-visible {
  @apply outline-none ring-2 ring-blue-500 ring-offset-2;
}

/* Print Styles */
@media print {
  .no-print {
    display: none !important;
  }
  
  .print-break {
    page-break-after: always;
  }
}
===== products.js =====
// src/graphql/products.js
import { gql } from '@apollo/client';

// Fragment cho Product data
export const PRODUCT_FRAGMENT = gql`
  fragment ProductData on Product {
    _id
    name
    description
    price
    originalPrice
    sku
    images
    stock
    isActive
    isFeatured
    createdAt
    updatedAt
    category {
      _id
      name
      description
    }
    brand {
      _id
      name
      description
      logo
    }
  }
`;

// Query ƒë·ªÉ l·∫•y danh s√°ch products v·ªõi pagination v√† filter
export const GET_PRODUCTS = gql`
  query GetProducts(
    $first: Int = 12,
    $offset: Int = 0,
    $orderBy: ProductsOrderBy = CREATED_DESC,
    $condition: ProductConditionInput
  ) {
    products(
      first: $first,
      offset: $offset,
      orderBy: $orderBy,
      condition: $condition
    ) {
      nodes {
        ...ProductData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y chi ti·∫øt 1 product
export const GET_PRODUCT = gql`
  query GetProduct($id: ID!) {
    product(id: $id) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ search products
export const SEARCH_PRODUCTS = gql`
  query SearchProducts(
    $query: String!,
    $first: Int = 12,
    $offset: Int = 0,
    $orderBy: ProductsOrderBy = CREATED_DESC
  ) {
    searchProducts(
      query: $query,
      first: $first,
      offset: $offset,
      orderBy: $orderBy
    ) {
      nodes {
        ...ProductData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y featured products
export const GET_FEATURED_PRODUCTS = gql`
  query GetFeaturedProducts {
    featuredProducts {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y products theo category
export const GET_PRODUCTS_BY_CATEGORY = gql`
  query GetProductsByCategory($categoryId: ID!) {
    productsByCategory(categoryId: $categoryId) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y products theo brand
export const GET_PRODUCTS_BY_BRAND = gql`
  query GetProductsByBrand($brandId: ID!) {
    productsByBrand(brandId: $brandId) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y t·∫•t c·∫£ products (simple)
export const GET_ALL_PRODUCTS = gql`
  query GetAllProducts {
    allProducts {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Mutations cho Admin
export const CREATE_PRODUCT = gql`
  mutation CreateProduct($input: ProductInput!) {
    createProduct(input: $input) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

export const UPDATE_PRODUCT = gql`
  mutation UpdateProduct($id: ID!, $input: ProductInput!) {
    updateProduct(id: $id, input: $input) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

export const DELETE_PRODUCT = gql`
  mutation DeleteProduct($id: ID!) {
    deleteProduct(id: $id)
  }
`;
===== main.jsx =====
// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { ApolloProvider } from '@apollo/client';
import { BrowserRouter } from 'react-router-dom';
import { Toaster } from 'react-hot-toast';

import App from './App.jsx';
import { client } from './lib/apollo.js';
import { AuthProvider } from './contexts/AuthContext.jsx';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ApolloProvider client={client}>
      <BrowserRouter>
        <AuthProvider>
          <App />
          <Toaster 
            position="top-right"
            toastOptions={{
              duration: 4000,
              style: {
                background: '#363636',
                color: '#fff',
              },
              success: {
                duration: 3000,
                iconTheme: {
                  primary: '#4ade80',
                  secondary: '#fff',
                },
              },
              error: {
                duration: 5000,
                iconTheme: {
                  primary: '#ef4444',
                  secondary: '#fff',
                },
              },
            }}
          />
        </AuthProvider>
      </BrowserRouter>
    </ApolloProvider>
  </React.StrictMode>,
);
===== HomePage.jsx =====
// src/pages/HomePage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import Layout from '../components/common/Layout';
import { 
  CubeIcon, 
  ShoppingCartIcon, 
  ChartBarIcon,
  TagIcon,
  BuildingStorefrontIcon,
  HeartIcon,
  TruckIcon,
  ShieldCheckIcon
} from '@heroicons/react/24/outline';

const HomePage = () => {
  const { user } = useAuth();

  const features = [
    {
      name: 'S·∫£n ph·∫©m',
      description: 'Kh√°m ph√° h√†ng ngh√¨n s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao',
      icon: CubeIcon,
      href: '/products',
      color: 'blue'
    },
    {
      name: 'Danh m·ª•c',
      description: 'Duy·ªát theo c√°c danh m·ª•c s·∫£n ph·∫©m',
      icon: TagIcon,
      href: '/categories',
      color: 'purple'
    },
    {
      name: 'Th∆∞∆°ng hi·ªáu',
      description: 'C√°c th∆∞∆°ng hi·ªáu uy t√≠n h√†ng ƒë·∫ßu',
      icon: BuildingStorefrontIcon,
      href: '/brands',
      color: 'green'
    },
    {
      name: 'Gi·ªè h√†ng',
      description: 'Qu·∫£n l√Ω gi·ªè h√†ng c·ªßa b·∫°n',
      icon: ShoppingCartIcon,
      href: '/cart',
      color: 'yellow'
    },
    {
      name: 'Y√™u th√≠ch',
      description: 'S·∫£n ph·∫©m b·∫°n ƒë√£ l∆∞u',
      icon: HeartIcon,
      href: '/wishlist',
      color: 'pink'
    },
    {
      name: 'ƒê∆°n h√†ng',
      description: 'Theo d√µi tr·∫°ng th√°i ƒë∆°n h√†ng',
      icon: TruckIcon,
      href: '/orders',
      color: 'indigo'
    }
  ];

  const benefits = [
    {
      title: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn',
      description: 'Cho ƒë∆°n h√†ng tr√™n 500,000ƒë',
      icon: 'üöö'
    },
    {
      title: 'B·∫£o h√†nh ch√≠nh h√£ng',
      description: 'Cam k·∫øt 100% h√†ng ch√≠nh h√£ng',
      icon: 'üõ°Ô∏è'
    },
    {
      title: 'ƒê·ªïi tr·∫£ d·ªÖ d√†ng',
      description: 'Trong v√≤ng 30 ng√†y',
      icon: 'üîÑ'
    },
    {
      title: 'H·ªó tr·ª£ 24/7',
      description: 'T∆∞ v·∫•n m·ªçi l√∫c m·ªçi n∆°i',
      icon: 'üí¨'
    }
  ];

  const getColorClasses = (color) => {
    const colors = {
      blue: 'bg-blue-100 text-blue-600 hover:bg-blue-200',
      purple: 'bg-purple-100 text-purple-600 hover:bg-purple-200',
      green: 'bg-green-100 text-green-600 hover:bg-green-200',
      yellow: 'bg-yellow-100 text-yellow-600 hover:bg-yellow-200',
      pink: 'bg-pink-100 text-pink-600 hover:bg-pink-200',
      indigo: 'bg-indigo-100 text-indigo-600 hover:bg-indigo-200'
    };
    return colors[color] || colors.blue;
  };

  return (
    <Layout>
      {/* Hero Section */}
      <section className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <div className="text-center">
            <h1 className="text-4xl md:text-6xl font-bold mb-6">
              Ch√†o m·ª´ng ƒë·∫øn v·ªõi <span className="text-yellow-300">SmartShop</span>
            </h1>
            <p className="text-xl md:text-2xl mb-8 text-blue-100">
              N·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ hi·ªán ƒë·∫°i v·ªõi h√†ng tri·ªáu s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link
                to="/products"
                className="px-8 py-4 bg-white text-blue-600 rounded-xl font-semibold hover:bg-blue-50 transition-colors"
              >
                Kh√°m ph√° s·∫£n ph·∫©m
              </Link>
              <Link
                to="/register"
                className="px-8 py-4 bg-transparent border-2 border-white text-white rounded-xl font-semibold hover:bg-white hover:text-blue-600 transition-colors"
              >
                T·∫°o t√†i kho·∫£n mi·ªÖn ph√≠
              </Link>
            </div>
          </div>
        </div>
      </section>

      {/* User Welcome */}
      {user && (
        <section className="bg-white border-b border-gray-200">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold text-gray-900 mb-2">
                    Xin ch√†o, {user.firstName}! üëã
                  </h2>
                  <p className="text-gray-600">
                    S·∫µn s√†ng kh√°m ph√° nh·ªØng s·∫£n ph·∫©m m·ªõi h√¥m nay?
                  </p>
                </div>
                {(user.role === 'admin' || user.role === 'manager') && (
                  <Link
                    to="/admin"
                    className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-purple-700 transition-all"
                  >
                    üöÄ Admin Panel
                  </Link>
                )}
              </div>
            </div>
          </div>
        </section>
      )}

      {/* Features Grid */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              T√≠nh nƒÉng n·ªïi b·∫≠t
            </h2>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Kh√°m ph√° ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng c·ªßa SmartShop ƒë·ªÉ c√≥ tr·∫£i nghi·ªám mua s·∫Øm tuy·ªát v·ªùi nh·∫•t
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature) => (
              <Link
                key={feature.name}
                to={feature.href}
                className="group bg-white rounded-xl p-6 shadow-sm border border-gray-200 hover:shadow-md transition-all duration-200 hover:scale-105"
              >
                <div className={`w-12 h-12 rounded-lg flex items-center justify-center mb-4 transition-colors ${getColorClasses(feature.color)}`}>
                  <feature.icon className="h-6 w-6" />
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                  {feature.name}
                </h3>
                <p className="text-gray-600 text-sm">
                  {feature.description}
                </p>
                <div className="mt-4 flex items-center text-blue-600 text-sm font-medium">
                  Xem ngay
                  <span className="ml-1 group-hover:translate-x-1 transition-transform">‚Üí</span>
                </div>
              </Link>
            ))}
          </div>
        </div>
      </section>

      {/* Benefits */}
      <section className="py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              T·∫°i sao ch·ªçn SmartShop?
            </h2>
            <p className="text-gray-600">
              Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn tr·∫£i nghi·ªám mua s·∫Øm t·ªët nh·∫•t
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {benefits.map((benefit, index) => (
              <div key={index} className="text-center">
                <div className="w-16 h-16 bg-gradient-to-r from-blue-100 to-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">{benefit.icon}</span>
                </div>
                <h3 className="font-semibold text-gray-900 mb-2">
                  {benefit.title}
                </h3>
                <p className="text-gray-600 text-sm">
                  {benefit.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-gradient-to-r from-gray-900 to-gray-800 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl font-bold mb-4">
            B·∫Øt ƒë·∫ßu mua s·∫Øm ngay h√¥m nay!
          </h2>
          <p className="text-gray-300 mb-8 max-w-2xl mx-auto">
            Tham gia c√πng h√†ng tri·ªáu kh√°ch h√†ng ƒë√£ tin t∆∞·ªüng SmartShop. 
            ƒêƒÉng k√Ω ngay ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i ƒë·∫∑c bi·ªát cho th√†nh vi√™n m·ªõi.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link
              to="/products"
              className="px-8 py-4 bg-blue-600 text-white rounded-xl font-semibold hover:bg-blue-700 transition-colors"
            >
              Mua s·∫Øm ngay
            </Link>
            {!user && (
              <Link
                to="/register"
                className="px-8 py-4 bg-transparent border-2 border-white text-white rounded-xl font-semibold hover:bg-white hover:text-gray-900 transition-colors"
              >
                ƒêƒÉng k√Ω mi·ªÖn ph√≠
              </Link>
            )}
          </div>
        </div>
      </section>
    </Layout>
  );
};

export default HomePage;
===== ProductSearch copy.jsx =====
// src/components/products/ProductSearch.jsx
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  MagnifyingGlassIcon, 
  XMarkIcon,
  ClockIcon,
  TrendingUpIcon 
} from '@heroicons/react/24/outline';
import { useSearchProducts } from '../../hooks/useProducts';
import { formatPrice, getImageUrl } from '../../lib/utils';

const ProductSearch = ({ 
  placeholder = "T√¨m ki·∫øm s·∫£n ph·∫©m...",
  className = "",
  showSuggestions = true,
  onSearchSubmit
}) => {
  const navigate = useNavigate();
  const { searchResults, isSearching, search, clearSearch } = useSearchProducts();
  
  const [query, setQuery] = useState('');
  const [showResults, setShowResults] = useState(false);
  const [recentSearches, setRecentSearches] = useState([]);
  const [trendingSearches] = useState([
    'iPhone 15', 'MacBook Pro', 'Samsung Galaxy', 'AirPods', 'iPad'
  ]);

  const searchRef = useRef(null);
  const resultsRef = useRef(null);

  // Load recent searches from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('smartshop_recent_searches');
    if (saved) {
      try {
        setRecentSearches(JSON.parse(saved));
      } catch (error) {
        console.error('Error loading recent searches:', error);
      }
    }
  }, []);

  // Save recent searches to localStorage
  const saveRecentSearch = (searchQuery) => {
    if (!searchQuery.trim()) return;
    
    const updated = [
      searchQuery,
      ...recentSearches.filter(item => item !== searchQuery)
    ].slice(0, 5); // Keep only 5 recent searches
    
    setRecentSearches(updated);
    localStorage.setItem('smartshop_recent_searches', JSON.stringify(updated));
  };

  // Handle search input change
  const handleInputChange = (e) => {
    const value = e.target.value;
    setQuery(value);
    
    if (value.trim().length > 2) {
      search(value, { first: 5 }); // Search with limit for suggestions
      setShowResults(true);
    } else {
      clearSearch();
      setShowResults(value.length > 0);
    }
  };

  // Handle search submission
  const handleSubmit = (e) => {
    e.preventDefault();
    performSearch(query);
  };

  const performSearch = (searchQuery) => {
    if (!searchQuery.trim()) return;
    
    saveRecentSearch(searchQuery.trim());
    setShowResults(false);
    setQuery(searchQuery);
    
    if (onSearchSubmit) {
      onSearchSubmit(searchQuery);
    } else {
      navigate(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
    }
  };

  // Handle click outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        searchRef.current && 
        !searchRef.current.contains(event.target) &&
        resultsRef.current &&
        !resultsRef.current.contains(event.target)
      ) {
        setShowResults(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Clear search
  const handleClear = () => {
    setQuery('');
    clearSearch();
    setShowResults(false);
  };

  // Remove recent search item
  const removeRecentSearch = (item) => {
    const updated = recentSearches.filter(search => search !== item);
    setRecentSearches(updated);
    localStorage.setItem('smartshop_recent_searches', JSON.stringify(updated));
  };

  return (
    <div className={`relative ${className}`}>
      {/* Search Input */}
      <form onSubmit={handleSubmit} className="relative">
        <div className="relative">
          <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
          <input
            ref={searchRef}
            type="text"
            value={query}
            onChange={handleInputChange}
            onFocus={() => setShowResults(true)}
            placeholder={placeholder}
            className="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900 placeholder-gray-500"
            autoComplete="off"
          />
          
          {/* Clear button */}
          {query && (
            <button
              type="button"
              onClick={handleClear}
              className="absolute right-3 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600 transition-colors"
            >
              <XMarkIcon className="h-4 w-4" />
            </button>
          )}
        </div>
      </form>

      {/* Search Results Dropdown */}
      {showSuggestions && showResults && (
        <div
          ref={resultsRef}
          className="absolute top-full left-0 right-0 mt-2 bg-white rounded-xl shadow-lg border border-gray-200 z-50 max-h-96 overflow-y-auto"
        >
          {/* Loading */}
          {isSearching && query.length > 2 && (
            <div className="p-4 text-center">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto"></div>
              <p className="text-sm text-gray-500 mt-2">ƒêang t√¨m ki·∫øm...</p>
            </div>
          )}

          {/* Search Results */}
          {searchResults.length > 0 && query.length > 2 && (
            <div>
              <div className="px-4 py-2 border-b border-gray-100">
                <h3 className="text-sm font-medium text-gray-900">S·∫£n ph·∫©m</h3>
              </div>
              <div className="max-h-64 overflow-y-auto">
                {searchResults.map((product) => (
                  <button
                    key={product._id}
                    onClick={() => navigate(`/products/${product._id}`)}
                    className="w-full px-4 py-3 flex items-center space-x-3 hover:bg-gray-50 transition-colors text-left"
                  >
                    <img
                      src={getImageUrl(product.images?.[0])}
                      alt={product.name}
                      className="w-12 h-12 object-cover rounded-lg bg-gray-100"
                      onError={(e) => {
                        e.target.src = '/placeholder-product.jpg';
                      }}
                    />
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {product.name}
                      </p>
                      <p className="text-sm text-gray-500 truncate">
                        {product.brand?.name} ‚Ä¢ {product.category?.name}
                      </p>
                      <p className="text-sm font-semibold text-red-600">
                        {formatPrice(product.price)}
                      </p>
                    </div>
                  </button>
                ))}
              </div>
              
              {/* View all results */}
              <div className="border-t border-gray-100">
                <button
                  onClick={() => performSearch(query)}
                  className="w-full px-4 py-3 text-sm font-medium text-blue-600 hover:bg-blue-50 transition-colors"
                >
                  Xem t·∫•t c·∫£ k·∫øt qu·∫£ cho "{query}"
                </button>
              </div>
            </div>
          )}

          {/* No Results */}
          {searchResults.length === 0 && query.length > 2 && !isSearching && (
            <div className="p-4 text-center">
              <p className="text-sm text-gray-500">
                Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o cho "{query}"
              </p>
            </div>
          )}

          {/* Recent Searches */}
          {(!query || query.length <= 2) && recentSearches.length > 0 && (
            <div>
              <div className="px-4 py-2 border-b border-gray-100">
                <h3 className="text-sm font-medium text-gray-900 flex items-center">
                  <ClockIcon className="h-4 w-4 mr-2" />
                  T√¨m ki·∫øm g·∫ßn ƒë√¢y
                </h3>
              </div>
              <div>
                {recentSearches.map((item, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between px-4 py-2 hover:bg-gray-50"
                  >
                    <button
                      onClick={() => {
                        setQuery(item);
                        performSearch(item);
                      }}
                      className="flex-1 text-left text-sm text-gray-700 hover:text-gray-900"
                    >
                      {item}
                    </button>
                    <button
                      onClick={() => removeRecentSearch(item)}
                      className="p-1 text-gray-400 hover:text-gray-600"
                    >
                      <XMarkIcon className="h-3 w-3" />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Trending Searches */}
          {(!query || query.length <= 2) && trendingSearches.length > 0 && (
            <div>
              <div className="px-4 py-2 border-b border-gray-100">
                <h3 className="text-sm font-medium text-gray-900 flex items-center">
                  <TrendingUpIcon className="h-4 w-4 mr-2" />
                  T√¨m ki·∫øm ph·ªï bi·∫øn
                </h3>
              </div>
              <div>
                {trendingSearches.map((item, index) => (
                  <button
                    key={index}
                    onClick={() => {
                      setQuery(item);
                      performSearch(item);
                    }}
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 hover:text-gray-900"
                  >
                    {item}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Empty state */}
          {(!query || query.length <= 2) && recentSearches.length === 0 && (
            <div className="p-6 text-center">
              <MagnifyingGlassIcon className="h-12 w-12 text-gray-300 mx-auto mb-2" />
              <p className="text-sm text-gray-500">
                Nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ProductSearch;
===== LoginForm.jsx =====
// src/components/auth/LoginForm.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { EyeIcon, EyeSlashIcon, UserIcon, LockClosedIcon } from '@heroicons/react/24/outline';
import { useLogin } from '../../hooks/useAuth';

const LoginForm = () => {
  const [formData, setFormData] = useState({
    username: '',
    password: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState({});

  const { login, loading } = useLogin();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.username.trim()) {
      newErrors.username = 'T√™n ƒëƒÉng nh·∫≠p l√† b·∫Øt bu·ªôc';
    }

    if (!formData.password) {
      newErrors.password = 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.password.length < 6) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    await login(formData);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        {/* Header */}
        <div className="text-center">
          <div className="flex justify-center mb-6">
            <div className="w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl flex items-center justify-center">
              <span className="text-white font-bold text-2xl">S</span>
            </div>
          </div>
          <h2 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Ch√†o m·ª´ng tr·ªü l·∫°i!
          </h2>
          <p className="mt-2 text-gray-600">
            ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n SmartShop c·ªßa b·∫°n
          </p>
        </div>

        {/* Form */}
        <div className="bg-white rounded-2xl shadow-xl p-8 border border-gray-100">
          <form className="space-y-6" onSubmit={handleSubmit}>
            {/* Username Field */}
            <div className="space-y-2">
              <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                T√™n ƒëƒÉng nh·∫≠p
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <UserIcon className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="username"
                  name="username"
                  type="text"
                  autoComplete="username"
                  required
                  className={`appearance-none relative block w-full pl-10 pr-3 py-3 border ${
                    errors.username ? 'border-red-300' : 'border-gray-300'
                  } rounded-xl placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors`}
                  placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                  value={formData.username}
                  onChange={handleChange}
                />
              </div>
              {errors.username && (
                <p className="text-red-500 text-sm flex items-center">
                  <span className="mr-1">‚ö†Ô∏è</span>
                  {errors.username}
                </p>
              )}
            </div>

            {/* Password Field */}
            <div className="space-y-2">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                M·∫≠t kh·∫©u
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <LockClosedIcon className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="password"
                  name="password"
                  type={showPassword ? 'text' : 'password'}
                  autoComplete="current-password"
                  required
                  className={`appearance-none relative block w-full pl-10 pr-12 py-3 border ${
                    errors.password ? 'border-red-300' : 'border-gray-300'
                  } rounded-xl placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors`}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                  value={formData.password}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeSlashIcon className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                  ) : (
                    <EyeIcon className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                  )}
                </button>
              </div>
              {errors.password && (
                <p className="text-red-500 text-sm flex items-center">
                  <span className="mr-1">‚ö†Ô∏è</span>
                  {errors.password}
                </p>
              )}
            </div>

            {/* Remember & Forgot */}
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-700">
                  Ghi nh·ªõ ƒëƒÉng nh·∫≠p
                </label>
              </div>

              <div className="text-sm">
                <a href="#" className="font-medium text-blue-600 hover:text-blue-500 transition-colors">
                  Qu√™n m·∫≠t kh·∫©u?
                </a>
              </div>
            </div>

            {/* Submit Button */}
            <div>
              <button
                type="submit"
                disabled={loading}
                className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-xl text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-[1.02]"
              >
                {loading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    ƒêang ƒëƒÉng nh·∫≠p...
                  </>
                ) : (
                  'ƒêƒÉng nh·∫≠p'
                )}
              </button>
            </div>

            {/* Register Link */}
            <div className="text-center">
              <p className="text-sm text-gray-600">
                Ch∆∞a c√≥ t√†i kho·∫£n?{' '}
                <Link
                  to="/register"
                  className="font-medium text-blue-600 hover:text-blue-500 transition-colors"
                >
                  T·∫°o t√†i kho·∫£n m·ªõi
                </Link>
              </p>
            </div>
          </form>
        </div>

        {/* Demo Accounts */}
        <div className="bg-blue-50 rounded-xl p-4 border border-blue-200">
          <h3 className="text-sm font-medium text-blue-900 mb-2">üéØ T√†i kho·∫£n demo:</h3>
          <div className="text-xs text-blue-700 space-y-1">
            <p><strong>Admin:</strong> admin / 1234</p>
            <p><strong>Manager:</strong> john / 1234</p>
            <p><strong>Customer:</strong> alice / 1234</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginForm;
===== BrandsPage.jsx =====

===== ProductCard copy.jsx =====
// src/components/products/ProductCard.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { 
  HeartIcon, 
  ShoppingCartIcon, 
  EyeIcon,
  StarIcon 
} from '@heroicons/react/24/outline';
import { HeartIcon as HeartSolidIcon } from '@heroicons/react/24/solid';
import { formatPrice, getImageUrl, calculateDiscountPercentage } from '../../lib/utils';

const ProductCard = ({ 
  product, 
  viewMode = 'grid', // 'grid' or 'list'
  showQuickActions = true,
  className = '' 
}) => {
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [imageError, setImageError] = useState(false);

  if (!product) return null;

  const {
    _id,
    name,
    description,
    price,
    originalPrice,
    images = [],
    stock,
    category,
    brand,
    isFeatured
  } = product;

  const discount = originalPrice && originalPrice > price 
    ? calculateDiscountPercentage(originalPrice, price) 
    : 0;

  const mainImage = images.length > 0 ? getImageUrl(images[0]) : '/placeholder-product.jpg';

  const handleAddToWishlist = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsWishlisted(!isWishlisted);
    // TODO: Implement wishlist functionality
  };

  const handleAddToCart = (e) => {
    e.preventDefault();
    e.stopPropagation();
    // TODO: Implement add to cart functionality
    console.log('Add to cart:', product);
  };

  const handleQuickView = (e) => {
    e.preventDefault();
    e.stopPropagation();
    // TODO: Implement quick view modal
    console.log('Quick view:', product);
  };

  // Grid view layout
  if (viewMode === 'grid') {
    return (
      <div className={`group bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-all duration-200 ${className}`}>
        {/* Image Container */}
        <Link to={`/products/${_id}`} className="block relative overflow-hidden bg-gray-100">
          <div className="aspect-square">
            <img
              src={imageError ? '/placeholder-product.jpg' : mainImage}
              alt={name}
              className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              onError={() => setImageError(true)}
              loading="lazy"
            />
          </div>

          {/* Overlays */}
          <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200" />

          {/* Badges */}
          <div className="absolute top-3 left-3 flex flex-col gap-2">
            {isFeatured && (
              <span className="px-2 py-1 bg-blue-500 text-white text-xs font-semibold rounded-lg">
                N·ªïi b·∫≠t
              </span>
            )}
            {discount > 0 && (
              <span className="px-2 py-1 bg-red-500 text-white text-xs font-semibold rounded-lg">
                -{discount}%
              </span>
            )}
            {stock === 0 && (
              <span className="px-2 py-1 bg-gray-500 text-white text-xs font-semibold rounded-lg">
                H·∫øt h√†ng
              </span>
            )}
          </div>

          {/* Quick Actions */}
          {showQuickActions && (
            <div className="absolute top-3 right-3 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
              <button
                onClick={handleAddToWishlist}
                className="w-9 h-9 bg-white rounded-full flex items-center justify-center shadow-md hover:bg-red-50 transition-colors"
                title={isWishlisted ? 'B·ªè y√™u th√≠ch' : 'Th√™m v√†o y√™u th√≠ch'}
              >
                {isWishlisted ? (
                  <HeartSolidIcon className="w-4 h-4 text-red-500" />
                ) : (
                  <HeartIcon className="w-4 h-4 text-gray-600" />
                )}
              </button>
              <button
                onClick={handleQuickView}
                className="w-9 h-9 bg-white rounded-full flex items-center justify-center shadow-md hover:bg-blue-50 transition-colors"
                title="Xem nhanh"
              >
                <EyeIcon className="w-4 h-4 text-gray-600" />
              </button>
            </div>
          )}

          {/* Quick Add to Cart (Bottom overlay) */}
          {showQuickActions && stock > 0 && (
            <div className="absolute bottom-0 left-0 right-0 p-3 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-200">
              <button
                onClick={handleAddToCart}
                className="w-full btn btn-primary text-sm py-2"
              >
                <ShoppingCartIcon className="w-4 h-4 mr-2" />
                Th√™m v√†o gi·ªè
              </button>
            </div>
          )}
        </Link>

        {/* Product Info */}
        <div className="p-4">
          {/* Category & Brand */}
          <div className="flex items-center justify-between text-xs text-gray-500 mb-2">
            <span>{category?.name}</span>
            <span>{brand?.name}</span>
          </div>

          {/* Product Name */}
          <Link 
            to={`/products/${_id}`}
            className="block"
          >
            <h3 className="font-semibold text-gray-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors">
              {name}
            </h3>
          </Link>

          {/* Rating (Mock for now) */}
          <div className="flex items-center mb-3">
            <div className="flex items-center">
              {[...Array(5)].map((_, i) => (
                <StarIcon
                  key={i}
                  className={`w-4 h-4 ${i < 4 ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
                />
              ))}
            </div>
            <span className="text-sm text-gray-500 ml-1">(4.2)</span>
          </div>

          {/* Price */}
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-2">
              <span className="text-lg font-bold text-red-600">
                {formatPrice(price)}
              </span>
              {originalPrice && originalPrice > price && (
                <span className="text-sm text-gray-500 line-through">
                  {formatPrice(originalPrice)}
                </span>
              )}
            </div>
          </div>

          {/* Stock Status */}
          <div className="flex items-center justify-between">
            <span className={`text-xs px-2 py-1 rounded-full ${
              stock > 10 
                ? 'bg-green-100 text-green-700' 
                : stock > 0 
                  ? 'bg-yellow-100 text-yellow-700'
                  : 'bg-red-100 text-red-700'
            }`}>
              {stock > 10 ? 'C√≤n h√†ng' : stock > 0 ? `C√≤n ${stock}` : 'H·∫øt h√†ng'}
            </span>
          </div>
        </div>
      </div>
    );
  }

  // List view layout
  return (
    <div className={`group bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-all duration-200 ${className}`}>
      <div className="flex">
        {/* Image */}
        <Link to={`/products/${_id}`} className="block relative overflow-hidden bg-gray-100 w-48 flex-shrink-0">
          <div className="aspect-square">
            <img
              src={imageError ? '/placeholder-product.jpg' : mainImage}
              alt={name}
              className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              onError={() => setImageError(true)}
              loading="lazy"
            />
          </div>

          {/* Badges */}
          <div className="absolute top-2 left-2 flex flex-col gap-1">
            {isFeatured && (
              <span className="px-2 py-1 bg-blue-500 text-white text-xs font-semibold rounded">
                N·ªïi b·∫≠t
              </span>
            )}
            {discount > 0 && (
              <span className="px-2 py-1 bg-red-500 text-white text-xs font-semibold rounded">
                -{discount}%
              </span>
            )}
          </div>
        </Link>

        {/* Content */}
        <div className="flex-1 p-6 flex flex-col justify-between">
          <div>
            {/* Category & Brand */}
            <div className="flex items-center text-sm text-gray-500 mb-2">
              <span>{category?.name}</span>
              <span className="mx-2">‚Ä¢</span>
              <span>{brand?.name}</span>
            </div>

            {/* Product Name */}
            <Link to={`/products/${_id}`}>
              <h3 className="text-xl font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                {name}
              </h3>
            </Link>

            {/* Description */}
            {description && (
              <p className="text-gray-600 text-sm mb-4 line-clamp-2">
                {description}
              </p>
            )}

            {/* Rating */}
            <div className="flex items-center mb-4">
              <div className="flex items-center">
                {[...Array(5)].map((_, i) => (
                  <StarIcon
                    key={i}
                    className={`w-4 h-4 ${i < 4 ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
                  />
                ))}
              </div>
              <span className="text-sm text-gray-500 ml-2">(4.2) ‚Ä¢ 156 ƒë√°nh gi√°</span>
            </div>
          </div>

          {/* Bottom section */}
          <div className="flex items-center justify-between">
            {/* Price */}
            <div className="flex items-center space-x-3">
              <span className="text-2xl font-bold text-red-600">
                {formatPrice(price)}
              </span>
              {originalPrice && originalPrice > price && (
                <span className="text-lg text-gray-500 line-through">
                  {formatPrice(originalPrice)}
                </span>
              )}
            </div>

            {/* Actions */}
            <div className="flex items-center space-x-3">
              {/* Stock */}
              <span className={`text-sm px-3 py-1 rounded-full ${
                stock > 10 
                  ? 'bg-green-100 text-green-700' 
                  : stock > 0 
                    ? 'bg-yellow-100 text-yellow-700'
                    : 'bg-red-100 text-red-700'
              }`}>
                {stock > 10 ? 'C√≤n h√†ng' : stock > 0 ? `C√≤n ${stock}` : 'H·∫øt h√†ng'}
              </span>

              {/* Action Buttons */}
              <div className="flex items-center space-x-2">
                <button
                  onClick={handleAddToWishlist}
                  className="p-2 text-gray-600 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors"
                  title={isWishlisted ? 'B·ªè y√™u th√≠ch' : 'Th√™m v√†o y√™u th√≠ch'}
                >
                  {isWishlisted ? (
                    <HeartSolidIcon className="w-5 h-5 text-red-500" />
                  ) : (
                    <HeartIcon className="w-5 h-5" />
                  )}
                </button>

                {stock > 0 && (
                  <button
                    onClick={handleAddToCart}
                    className="btn btn-primary"
                  >
                    <ShoppingCartIcon className="w-4 h-4 mr-2" />
                    Th√™m v√†o gi·ªè
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductCard;
===== ProductFilter.jsx =====
// src/components/products/ProductFilter.jsx
import React, { useState, useEffect } from 'react';
import { useCategories, useBrands } from '../../hooks/useProducts';
import { 
  FunnelIcon, 
  XMarkIcon,
  ChevronDownIcon,
  ChevronUpIcon 
} from '@heroicons/react/24/outline';

const ProductFilter = ({ 
  onFilterChange, 
  initialFilters = {},
  className = '' 
}) => {
  const { categories, loading: categoriesLoading } = useCategories();
  const { brands, loading: brandsLoading } = useBrands();
  
  const [filters, setFilters] = useState({
    priceRange: { min: '', max: '' },
    categories: [],
    brands: [],
    rating: '',
    inStock: false,
    isFeatured: false,
    ...initialFilters
  });

  const [expandedSections, setExpandedSections] = useState({
    price: true,
    categories: true,
    brands: true,
    features: true
  });

  // Predefined price ranges
  const priceRanges = [
    { label: 'D∆∞·ªõi 1 tri·ªáu', min: 0, max: 1000000 },
    { label: '1 - 5 tri·ªáu', min: 1000000, max: 5000000 },
    { label: '5 - 10 tri·ªáu', min: 5000000, max: 10000000 },
    { label: '10 - 20 tri·ªáu', min: 10000000, max: 20000000 },
    { label: 'Tr√™n 20 tri·ªáu', min: 20000000, max: null }
  ];

  const ratings = [
    { label: '5 sao', value: 5 },
    { label: '4 sao tr·ªü l√™n', value: 4 },
    { label: '3 sao tr·ªü l√™n', value: 3 },
    { label: '2 sao tr·ªü l√™n', value: 2 }
  ];

  useEffect(() => {
    onFilterChange?.(filters);
  }, [filters, onFilterChange]);

  const toggleSection = (section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const handlePriceRangeSelect = (range) => {
    setFilters(prev => ({
      ...prev,
      priceRange: { min: range.min || '', max: range.max || '' }
    }));
  };

  const handleCustomPriceChange = (field, value) => {
    setFilters(prev => ({
      ...prev,
      priceRange: {
        ...prev.priceRange,
        [field]: value
      }
    }));
  };

  const handleCategoryToggle = (categoryId) => {
    setFilters(prev => ({
      ...prev,
      categories: prev.categories.includes(categoryId)
        ? prev.categories.filter(id => id !== categoryId)
        : [...prev.categories, categoryId]
    }));
  };

  const handleBrandToggle = (brandId) => {
    setFilters(prev => ({
      ...prev,
      brands: prev.brands.includes(brandId)
        ? prev.brands.filter(id => id !== brandId)
        : [...prev.brands, brandId]
    }));
  };

  const handleFeatureToggle = (feature) => {
    setFilters(prev => ({
      ...prev,
      [feature]: !prev[feature]
    }));
  };

  const handleRatingChange = (rating) => {
    setFilters(prev => ({
      ...prev,
      rating: prev.rating === rating ? '' : rating
    }));
  };

  const clearFilters = () => {
    setFilters({
      priceRange: { min: '', max: '' },
      categories: [],
      brands: [],
      rating: '',
      inStock: false,
      isFeatured: false
    });
  };

  const hasActiveFilters = () => {
    return (
      filters.priceRange.min || 
      filters.priceRange.max || 
      filters.categories.length > 0 || 
      filters.brands.length > 0 || 
      filters.rating || 
      filters.inStock || 
      filters.isFeatured
    );
  };

  const FilterSection = ({ title, children, sectionKey, count = 0 }) => (
    <div className="border-b border-gray-200 last:border-b-0">
      <button
        onClick={() => toggleSection(sectionKey)}
        className="w-full flex items-center justify-between py-4 text-left"
      >
        <div className="flex items-center">
          <span className="font-medium text-gray-900">{title}</span>
          {count > 0 && (
            <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
              {count}
            </span>
          )}
        </div>
        {expandedSections[sectionKey] ? (
          <ChevronUpIcon className="h-4 w-4 text-gray-500" />
        ) : (
          <ChevronDownIcon className="h-4 w-4 text-gray-500" />
        )}
      </button>
      
      {expandedSections[sectionKey] && (
        <div className="pb-4">
          {children}
        </div>
      )}
    </div>
  );

  return (
    <div className={`bg-white rounded-lg shadow-sm border border-gray-200 ${className}`}>
      {/* Header */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <FunnelIcon className="h-5 w-5 text-gray-500 mr-2" />
            <h3 className="font-semibold text-gray-900">B·ªô l·ªçc</h3>
          </div>
          
          {hasActiveFilters() && (
            <button
              onClick={clearFilters}
              className="text-sm text-blue-600 hover:text-blue-700 font-medium"
            >
              X√≥a t·∫•t c·∫£
            </button>
          )}
        </div>
      </div>

      <div className="p-4">
        {/* Price Range Filter */}
        <FilterSection 
          title="Kho·∫£ng gi√°" 
          sectionKey="price"
          count={filters.priceRange.min || filters.priceRange.max ? 1 : 0}
        >
          <div className="space-y-3">
            {/* Predefined ranges */}
            <div className="space-y-2">
              {priceRanges.map((range, index) => (
                <label key={index} className="flex items-center">
                  <input
                    type="radio"
                    name="priceRange"
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    checked={
                      filters.priceRange.min === range.min && 
                      filters.priceRange.max === range.max
                    }
                    onChange={() => handlePriceRangeSelect(range)}
                  />
                  <span className="ml-2 text-sm text-gray-700">{range.label}</span>
                </label>
              ))}
            </div>

            {/* Custom range */}
            <div className="pt-3 border-t border-gray-100">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                T√πy ch·ªânh (VNƒê)
              </label>
              <div className="flex items-center space-x-2">
                <input
                  type="number"
                  placeholder="T·ª´"
                  value={filters.priceRange.min}
                  onChange={(e) => handleCustomPriceChange('min', e.target.value)}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <span className="text-gray-500">-</span>
                <input
                  type="number"
                  placeholder="ƒê·∫øn"
                  value={filters.priceRange.max}
                  onChange={(e) => handleCustomPriceChange('max', e.target.value)}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>
          </div>
        </FilterSection>

        {/* Categories Filter */}
        <FilterSection 
          title="Danh m·ª•c" 
          sectionKey="categories"
          count={filters.categories.length}
        >
          <div className="space-y-2 max-h-48 overflow-y-auto">
            {categoriesLoading ? (
              <div className="space-y-2">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="h-6 bg-gray-200 rounded animate-pulse"></div>
                ))}
              </div>
            ) : (
              categories.map((category) => (
                <label key={category._id} className="flex items-center">
                  <input
                    type="checkbox"
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    checked={filters.categories.includes(category._id)}
                    onChange={() => handleCategoryToggle(category._id)}
                  />
                  <span className="ml-2 text-sm text-gray-700">{category.name}</span>
                </label>
              ))
            )}
          </div>
        </FilterSection>

        {/* Brands Filter */}
        <FilterSection 
          title="Th∆∞∆°ng hi·ªáu" 
          sectionKey="brands"
          count={filters.brands.length}
        >
          <div className="space-y-2 max-h-48 overflow-y-auto">
            {brandsLoading ? (
              <div className="space-y-2">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="h-6 bg-gray-200 rounded animate-pulse"></div>
                ))}
              </div>
            ) : (
              brands.map((brand) => (
                <label key={brand._id} className="flex items-center">
                  <input
                    type="checkbox"
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    checked={filters.brands.includes(brand._id)}
                    onChange={() => handleBrandToggle(brand._id)}
                  />
                  <span className="ml-2 text-sm text-gray-700">{brand.name}</span>
                </label>
              ))
            )}
          </div>
        </FilterSection>

        {/* Rating Filter */}
        <FilterSection 
          title="ƒê√°nh gi√°" 
          sectionKey="rating"
          count={filters.rating ? 1 : 0}
        >
          <div className="space-y-2">
            {ratings.map((rating) => (
              <label key={rating.value} className="flex items-center">
                <input
                  type="radio"
                  name="rating"
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  checked={filters.rating === rating.value}
                  onChange={() => handleRatingChange(rating.value)}
                />
                <span className="ml-2 text-sm text-gray-700 flex items-center">
                  {rating.label}
                  <span className="ml-1 text-yellow-400">
                    {'‚òÖ'.repeat(Math.floor(rating.value))}
                  </span>
                </span>
              </label>
            ))}
          </div>
        </FilterSection>

        {/* Features Filter */}
        <FilterSection 
          title="T√≠nh nƒÉng" 
          sectionKey="features"
          count={(filters.inStock ? 1 : 0) + (filters.isFeatured ? 1 : 0)}
        >
          <div className="space-y-2">
            <label className="flex items-center">
              <input
                type="checkbox"
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                checked={filters.inStock}
                onChange={() => handleFeatureToggle('inStock')}
              />
              <span className="ml-2 text-sm text-gray-700">C√≤n h√†ng</span>
            </label>
            
            <label className="flex items-center">
              <input
                type="checkbox"
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                checked={filters.isFeatured}
                onChange={() => handleFeatureToggle('isFeatured')}
              />
              <span className="ml-2 text-sm text-gray-700">S·∫£n ph·∫©m n·ªïi b·∫≠t</span>
            </label>
          </div>
        </FilterSection>
      </div>

      {/* Apply Button */}
      <div className="p-4 border-t border-gray-200">
        <button
          onClick={() => onFilterChange?.(filters)}
          className="w-full btn btn-primary"
        >
          √Åp d·ª•ng b·ªô l·ªçc
        </button>
      </div>
    </div>
  );
};

export default ProductFilter;
===== apollo.js =====
// src/lib/apollo.js
import { ApolloClient, InMemoryCache, createHttpLink, from } from '@apollo/client';
import { setContext } from '@apollo/client/link/context';
import { onError } from '@apollo/client/link/error';

// HTTP link t·ªõi GraphQL server
const httpLink = createHttpLink({
  uri: import.meta.env.VITE_GRAPHQL_URL || 'http://localhost:4000/',
});

// Auth link ƒë·ªÉ th√™m JWT token v√†o headers
const authLink = setContext((_, { headers }) => {
  const token = localStorage.getItem('smartshop_token');
  
  return {
    headers: {
      ...headers,
      authorization: token ? `Bearer ${token}` : "",
      // Lo·∫°i b·ªè secret header ƒë·ªÉ tr√°nh CORS error
      // secret s·∫Ω ƒë∆∞·ª£c g·ª≠i qua variables trong queries khi c·∫ßn
    }
  };
});

// Error link ƒë·ªÉ handle errors
const errorLink = onError(({ graphQLErrors, networkError, operation, forward }) => {
  if (graphQLErrors) {
    graphQLErrors.forEach(({ message, locations, path }) => {
      console.error(`GraphQL error: Message: ${message}, Location: ${locations}, Path: ${path}`);
      
      // N·∫øu token expired, redirect to login
      if (message.includes('Authentication required') || message.includes('jwt')) {
        localStorage.removeItem('smartshop_token');
        localStorage.removeItem('smartshop_user');
        window.location.href = '/login';
      }
    });
  }

  if (networkError) {
    console.error(`Network error: ${networkError}`);
  }
});

// Apollo Client instance
export const client = new ApolloClient({
  link: from([errorLink, authLink, httpLink]),
  cache: new InMemoryCache({
    typePolicies: {
      Query: {
        fields: {
          // Cache policies cho pagination
          products: {
            keyArgs: ['condition', 'orderBy'],
            merge(existing = { nodes: [], totalCount: 0 }, incoming) {
              return {
                ...incoming,
                nodes: [...(existing.nodes || []), ...incoming.nodes],
              };
            },
          },
          categories: {
            keyArgs: ['condition', 'orderBy'],
            merge(existing = { nodes: [], totalCount: 0 }, incoming) {
              return {
                ...incoming,
                nodes: [...(existing.nodes || []), ...incoming.nodes],
              };
            },
          },
        },
      },
    },
  }),
  defaultOptions: {
    watchQuery: {
      errorPolicy: 'all',
    },
    query: {
      errorPolicy: 'all',
    },
  },
});
===== CategoriesPage.jsx =====

===== LoginPage.jsx =====
import React from 'react';
import LoginForm from '../components/auth/LoginForm';
import { GuestRoute } from '../components/auth/ProtectedRoute';
import { AuthLayout } from '../components/common/Layout';

const LoginPage = () => {
  return (
    <GuestRoute>
      <AuthLayout>
        <LoginForm />
      </AuthLayout>
    </GuestRoute>
  );
};

export default LoginPage;

===== NotFoundPage.jsx =====
// src/pages/NotFoundPage.jsx
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const NotFoundPage = () => {
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();

  const handleGoBack = () => {
    navigate(-1);
  };

  const handleGoHome = () => {
    navigate(isAuthenticated ? '/' : '/login');
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center items-center px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full text-center">
        {/* 404 Illustration */}
        <div className="mb-8">
          <div className="text-8xl">üîç</div>
          <h1 className="mt-4 text-6xl font-bold text-gray-900">404</h1>
        </div>

        {/* Error Message */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            Oops! Trang kh√¥ng t·ªìn t·∫°i
          </h2>
          <p className="text-gray-600 mb-6">
            Trang b·∫°n ƒëang t√¨m ki·∫øm c√≥ th·ªÉ ƒë√£ b·ªã x√≥a, ƒë·ªïi t√™n ho·∫∑c t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng.
          </p>
        </div>

        {/* Action Buttons */}
        <div className="space-y-4">
          <button
            onClick={handleGoHome}
            className="btn btn-primary w-full"
          >
            üè† V·ªÅ trang ch·ªß
          </button>
          
          <button
            onClick={handleGoBack}
            className="btn btn-secondary w-full"
          >
            ‚Üê Quay l·∫°i trang tr∆∞·ªõc
          </button>
        </div>

        {/* Additional Links */}
        <div className="mt-8 pt-6 border-t border-gray-200">
          <p className="text-sm text-gray-500 mb-4">
            Ho·∫∑c b·∫°n c√≥ th·ªÉ:
          </p>
          
          <div className="space-y-2">
            {isAuthenticated ? (
              <>
                <Link
                  to="/"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  üì± Trang ch·ªß SmartShop
                </Link>
                <Link
                  to="/products"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  üõçÔ∏è Xem s·∫£n ph·∫©m
                </Link>
                <Link
                  to="/cart"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  üõí Gi·ªè h√†ng c·ªßa t√¥i
                </Link>
              </>
            ) : (
              <>
                <Link
                  to="/login"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  üîê ƒêƒÉng nh·∫≠p
                </Link>
                <Link
                  to="/register"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  üìù T·∫°o t√†i kho·∫£n m·ªõi
                </Link>
              </>
            )}
          </div>
        </div>

        {/* Help Text */}
        <div className="mt-8 p-4 bg-blue-50 rounded-lg">
          <p className="text-sm text-blue-700">
            üí° <strong>M·∫πo:</strong> Ki·ªÉm tra l·∫°i URL ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu b·∫°n nghƒ© ƒë√¢y l√† l·ªói h·ªá th·ªëng.
          </p>
        </div>
      </div>
    </div>
  );
};

export default NotFoundPage;
===== AuthContext.jsx =====
// src/contexts/AuthContext.jsx
import React, { createContext, useContext, useReducer, useEffect } from 'react';

// Auth utilities functions
const getToken = () => {
  return localStorage.getItem('smartshop_token');
};

const getUser = () => {
  const userStr = localStorage.getItem('smartshop_user');
  try {
    return userStr ? JSON.parse(userStr) : null;
  } catch {
    return null;
  }
};

const setAuth = (token, user) => {
  localStorage.setItem('smartshop_token', token);
  localStorage.setItem('smartshop_user', JSON.stringify(user));
};

const clearAuth = () => {
  localStorage.removeItem('smartshop_token');
  localStorage.removeItem('smartshop_user');
};

// Create Auth Context
const AuthContext = createContext();

// Auth reducer
const authReducer = (state, action) => {
  switch (action.type) {
    case 'LOGIN':
      return {
        ...state,
        isAuthenticated: true,
        user: action.payload.user,
        token: action.payload.token,
        loading: false,
      };
    case 'LOGOUT':
      return {
        ...state,
        isAuthenticated: false,
        user: null,
        token: null,
        loading: false,
      };
    case 'SET_LOADING':
      return {
        ...state,
        loading: action.payload,
      };
    case 'INIT':
      return {
        ...state,
        isAuthenticated: !!action.payload.token,
        user: action.payload.user,
        token: action.payload.token,
        loading: false,
      };
    default:
      return state;
  }
};

// Initial state
const initialState = {
  isAuthenticated: false,
  user: null,
  token: null,
  loading: true,
};

// Auth Provider Component
export const AuthProvider = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState);

  // Initialize auth state t·ª´ localStorage
  useEffect(() => {
    const token = getToken();
    const user = getUser();
    
    dispatch({
      type: 'INIT',
      payload: { token, user }
    });
  }, []);

  // Login function
  const login = (token, user) => {
    setAuth(token, user);
    dispatch({
      type: 'LOGIN',
      payload: { token, user }
    });
  };

  // Logout function
  const logout = () => {
    clearAuth();
    dispatch({ type: 'LOGOUT' });
  };

  // Set loading function
  const setLoading = (loading) => {
    dispatch({ type: 'SET_LOADING', payload: loading });
  };

  // Context value
  const value = {
    ...state,
    login,
    logout,
    setLoading,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// Custom hook to use Auth context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};
===== useAuth.js =====
// src/hooks/useAuth.js
import { useMutation, useQuery } from '@apollo/client';
import { useNavigate } from 'react-router-dom';
import toast from 'react-hot-toast';
import { LOGIN_MUTATION, REGISTER_MUTATION, ME_QUERY } from '../graphql/auth';
import { useAuth as useAuthContext } from '../contexts/AuthContext';

export const useLogin = () => {
  const navigate = useNavigate();
  const { login } = useAuthContext();
  
  const [loginMutation, { loading, error }] = useMutation(LOGIN_MUTATION, {
    onCompleted: (data) => {
      if (data.login.success) {
        const { jwt, user } = data.login.data;
        login(jwt, user);
        toast.success(`Ch√†o m·ª´ng ${user.firstName || user.username}!`);
        
        // Redirect based on role
        if (user.role === 'admin' || user.role === 'manager') {
          navigate('/admin');
        } else {
          navigate('/');
        }
      } else {
        toast.error(data.login.message);
      }
    },
    onError: (error) => {
      console.error('Login error:', error);
      toast.error('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!');
    }
  });

  const handleLogin = async (formData) => {
    try {
      await loginMutation({
        variables: {
          input: {
            username: formData.username,
            password: formData.password
          }
        }
      });
    } catch (err) {
      console.error('Login submission error:', err);
    }
  };

  return {
    login: handleLogin,
    loading,
    error
  };
};

export const useRegister = () => {
  const navigate = useNavigate();
  
  const [registerMutation, { loading, error }] = useMutation(REGISTER_MUTATION, {
    onCompleted: (data) => {
      if (data.register.success) {
        toast.success('ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.');
        navigate('/login');
      } else {
        toast.error(data.register.message);
      }
    },
    onError: (error) => {
      console.error('Register error:', error);
      toast.error('ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!');
    }
  });

  const handleRegister = async (formData) => {
    try {
      await registerMutation({
        variables: {
          input: {
            username: formData.username,
            email: formData.email,
            password: formData.password,
            firstName: formData.firstName,
            lastName: formData.lastName,
            phone: formData.phone || ''
          }
        }
      });
    } catch (err) {
      console.error('Register submission error:', err);
    }
  };

  return {
    register: handleRegister,
    loading,
    error
  };
};

export const useCurrentUser = () => {
  const { isAuthenticated } = useAuthContext();
  
  const { data, loading, error, refetch } = useQuery(ME_QUERY, {
    skip: !isAuthenticated,
    errorPolicy: 'all'
  });

  return {
    user: data?.me,
    loading,
    error,
    refetch
  };
};
===== brands.js =====
// src/graphql/brands.js
import { gql } from '@apollo/client';

// Fragment cho Brand data
export const BRAND_FRAGMENT = gql`
  fragment BrandData on Brand {
    _id
    name
    slug
    description
    logo
    banner
    website
    country
    foundedYear
    isActive
    isFeatured
    createdAt
    updatedAt
    categories {
      _id
      name
    }
  }
`;

// Query ƒë·ªÉ l·∫•y danh s√°ch brands v·ªõi pagination
export const GET_BRANDS = gql`
  query GetBrands(
    $first: Int = 20,
    $offset: Int = 0,
    $orderBy: BrandsOrderBy = NAME_ASC,
    $condition: BrandConditionInput
  ) {
    brands(
      first: $first,
      offset: $offset,
      orderBy: $orderBy,
      condition: $condition
    ) {
      nodes {
        ...BrandData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y t·∫•t c·∫£ brands (simple)
export const GET_ALL_BRANDS = gql`
  query GetAllBrands {
    allBrands {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y featured brands
export const GET_FEATURED_BRANDS = gql`
  query GetFeaturedBrands {
    featuredBrands {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y chi ti·∫øt 1 brand
export const GET_BRAND = gql`
  query GetBrand($id: ID, $slug: String) {
    brand(id: $id, slug: $slug) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y brands theo category
export const GET_BRANDS_BY_CATEGORY = gql`
  query GetBrandsByCategory($categoryId: ID!) {
    brandsByCategory(categoryId: $categoryId) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Mutations
export const CREATE_BRAND = gql`
  mutation CreateBrand($input: BrandInput!) {
    createBrand(input: $input) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

export const UPDATE_BRAND = gql`
  mutation UpdateBrand($id: ID!, $input: BrandInput!) {
    updateBrand(id: $id, input: $input) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

export const DELETE_BRAND = gql`
  mutation DeleteBrand($id: ID!) {
    deleteBrand(id: $id)
  }
`;
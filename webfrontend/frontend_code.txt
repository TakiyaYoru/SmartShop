
==================================================
File: .\postcss.config.js
==================================================

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


==================================================
File: .\eslint.config.js
==================================================

import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);

==================================================
File: .\vite.config.js
==================================================

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
}); 

==================================================
File: .\package.json
==================================================

{
  "name": "smartshop-ecommerce",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@apollo/client": "^3.13.8",
    "@heroicons/react": "^2.2.0",
    "apollo-upload-client": "^18.0.1",
    "clsx": "^2.1.1",
    "cors": "^2.8.5",
    "extract-files": "^13.0.0",
    "graphql": "^16.11.0",
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hot-toast": "^2.5.2",
    "react-router-dom": "^6.22.3",
    "tailwind-merge": "^3.3.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "vite": "^5.4.2"
  }
}


==================================================
File: .\index.html
==================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SmartShop - E-commerce Platform</title>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

==================================================
File: .\tailwind.config.js
==================================================

/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};


==================================================
File: .\src\App.css
==================================================

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


==================================================
File: .\src\router.jsx
==================================================

import { createBrowserRouter, createRoutesFromElements, Route } from 'react-router-dom';

// Pages
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import HomePage from './pages/HomePage';
import ProductsPage from './pages/ProductsPage';
import NotFoundPage from './pages/NotFoundPage';
import AdminLayout from './components/admin/AdminLayout';
import DashboardPage from './pages/admin/DashboardPage';
import ProductsManagementPage from './pages/admin/ProductsManagementPage';
import CreateProductPage from './pages/admin/CreateProductPage';
import EditProductPage from './pages/admin/EditProductPage';

// Protected Routes
import ProtectedRoute, { AdminRoute, ManagerRoute } from './components/auth/ProtectedRoute';

// Router configuration with future flags
const routerConfig = {
  future: {
    v7_startTransition: true,
    v7_relativeSplatPath: true
  }
};

// Create routes
const routes = createRoutesFromElements(
  <Route>
    {/* Public Routes */}
    <Route path="/login" element={<LoginPage />} />
    <Route path="/register" element={<RegisterPage />} />
    
    {/* Protected Routes */}
    <Route path="/" element={<ProtectedRoute><HomePage /></ProtectedRoute>} />
    <Route path="/products" element={<ProtectedRoute><ProductsPage /></ProtectedRoute>} />
    
    {/* Admin Routes */}
    <Route path="/admin/*" element={<AdminRoute><AdminLayout /></AdminRoute>}>
      <Route index element={<DashboardPage />} />
      <Route path="products" element={<ProductsPage />} />
      <Route path="products/create" element={<CreateProductPage />} />
      <Route path="products/edit/:id" element={<EditProductPage />} />
    </Route>
    
    {/* Manager Routes */}
    <Route path="/manager/*" element={<ManagerRoute>
      <div className="min-h-screen bg-gray-100 p-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-6">
          Manager Dashboard
        </h1>
        <div className="bg-white rounded-lg shadow p-6">
          <p className="text-gray-600">
            Welcome to SmartShop Manager Panel! üìä
          </p>
          <p className="text-sm text-gray-500 mt-2">
            Manager features will be implemented here.
          </p>
        </div>
      </div>
    </ManagerRoute>} />
    
    {/* 404 Page */}
    <Route path="*" element={<NotFoundPage />} />
  </Route>
);

// Create router with configuration
export const router = createBrowserRouter(routes, routerConfig); 

==================================================
File: .\src\App.jsx
==================================================

// src/App.jsx
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import { useAuth } from './contexts/AuthContext';

// Pages
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import HomePage from './pages/HomePage';
import ProductsPage from './pages/ProductsPage';
import NotFoundPage from './pages/NotFoundPage';
import AdminLayout from './components/admin/AdminLayout';
import DashboardPage from './pages/admin/DashboardPage';
import ProductsManagementPage  from './pages/admin/ProductsManagementPage';
import CreateProductPage from './pages/admin/CreateProductPage';
import EditProductPage from './pages/admin/EditProductPage';



// Protected Routes
import ProtectedRoute, { AdminRoute, ManagerRoute } from './components/auth/ProtectedRoute';

function App() {
  const { loading } = useAuth();

  // Show loading while initializing auth
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">ƒêang kh·ªüi t·∫°o SmartShop...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="App">
      <Routes>
        {/* Public Routes */}
        <Route path="/login" element={<LoginPage />} />
        <Route path="/register" element={<RegisterPage />} />
        
        {/* Protected Routes */}
        <Route 
          path="/" 
          element={
            <ProtectedRoute>
              <HomePage />
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/products" 
          element={
            <ProtectedRoute>
              <ProductsPage />
            </ProtectedRoute>
          } 
        />
        
        {/* Placeholder pages */}
        <Route 
          path="/categories" 
          element={
            <ProtectedRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <div className="max-w-7xl mx-auto">
                  <h1 className="text-3xl font-bold text-gray-900 mb-6">Danh m·ª•c s·∫£n ph·∫©m</h1>
                  <div className="bg-white rounded-lg shadow p-6">
                    <p className="text-gray-600">Trang danh m·ª•c s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn ·ªü ph·∫ßn ti·∫øp theo! üìÇ</p>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/brands" 
          element={
            <ProtectedRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <div className="max-w-7xl mx-auto">
                  <h1 className="text-3xl font-bold text-gray-900 mb-6">Th∆∞∆°ng hi·ªáu</h1>
                  <div className="bg-white rounded-lg shadow p-6">
                    <p className="text-gray-600">Trang th∆∞∆°ng hi·ªáu s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn ·ªü ph·∫ßn ti·∫øp theo! üè™</p>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          } 
        />
        
        <Route 
          path="/cart" 
          element={
            <ProtectedRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <div className="max-w-7xl mx-auto">
                  <h1 className="text-3xl font-bold text-gray-900 mb-6">Gi·ªè h√†ng</h1>
                  <div className="bg-white rounded-lg shadow p-6">
                    <p className="text-gray-600">T√≠nh nƒÉng gi·ªè h√†ng s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn ·ªü ph·∫ßn ti·∫øp theo! üõí</p>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          } 
        />
        
        {/* Admin Routes */}

        <Route 
          path="/admin/*" 
          element={
            <AdminRoute>
              <Routes>
                <Route path="/" element={<AdminLayout />}>
                  <Route index element={<DashboardPage />} />
                  <Route path="products" element={<ProductsPage />} />
                  <Route path="products/create" element={<CreateProductPage />} />
                  <Route path="products/edit/:id" element={<EditProductPage />} />
                </Route>
              </Routes>
            </AdminRoute>
          } 
        />
          
        {/* Manager Routes */}
        <Route 
          path="/manager/*" 
          element={
            <ManagerRoute>
              <div className="min-h-screen bg-gray-100 p-8">
                <h1 className="text-3xl font-bold text-gray-900 mb-6">
                  Manager Dashboard
                </h1>
                <div className="bg-white rounded-lg shadow p-6">
                  <p className="text-gray-600">
                    Welcome to SmartShop Manager Panel! üìä
                  </p>
                  <p className="text-sm text-gray-500 mt-2">
                    Manager features will be implemented here.
                  </p>
                </div>
              </div>
            </ManagerRoute>
          } 
        />
        
        {/* 404 Page */}
        <Route path="*" element={<NotFoundPage />} />
      </Routes>
    </div>
  );
}

export default App;

==================================================
File: .\src\index.css
==================================================

/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  * {
    box-sizing: border-box;
  }
  
  body {
    font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    @apply bg-gray-50 text-gray-900;
  }

  html {
    scroll-behavior: smooth;
  }
}

@layer components {
  /* Button Components */
  .btn {
    @apply inline-flex items-center justify-center px-4 py-2 rounded-lg font-medium text-sm transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;
  }
  
  .btn-primary {
    @apply bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700 focus:ring-blue-500 shadow-lg hover:shadow-xl transform hover:scale-[1.02];
  }
  
  .btn-secondary {
    @apply bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-gray-500 shadow-sm hover:shadow-md;
  }
  
  .btn-danger {
    @apply bg-gradient-to-r from-red-500 to-red-600 text-white hover:from-red-600 hover:to-red-700 focus:ring-red-500 shadow-lg hover:shadow-xl;
  }

  .btn-ghost {
    @apply text-gray-600 hover:text-gray-900 hover:bg-gray-100 focus:ring-gray-500;
  }

  /* Input Components */
  .input {
    @apply w-full px-4 py-3 border border-gray-300 rounded-xl placeholder-gray-500 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200;
  }
  
  .input-error {
    @apply border-red-300 focus:ring-red-500 bg-red-50;
  }

  .input-success {
    @apply border-green-300 focus:ring-green-500 bg-green-50;
  }

  /* Form Components */
  .form-group {
    @apply space-y-2;
  }
  
  .form-label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
  
  .form-error {
    @apply text-red-500 text-sm mt-1 flex items-center;
  }

  .form-help {
    @apply text-gray-500 text-sm mt-1;
  }

  /* Card Components */
  .card {
    @apply bg-white rounded-xl shadow-sm border border-gray-100 p-6 hover:shadow-md transition-all duration-200;
  }

  .card-header {
    @apply border-b border-gray-100 pb-4 mb-4;
  }

  .card-footer {
    @apply border-t border-gray-100 pt-4 mt-4;
  }

  /* Badge Components */
  .badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }

  .badge-primary {
    @apply bg-blue-100 text-blue-800;
  }

  .badge-secondary {
    @apply bg-gray-100 text-gray-800;
  }

  .badge-success {
    @apply bg-green-100 text-green-800;
  }

  .badge-warning {
    @apply bg-yellow-100 text-yellow-800;
  }

  .badge-danger {
    @apply bg-red-100 text-red-800;
  }

  /* Alert Components */
  .alert {
    @apply p-4 rounded-xl border-l-4;
  }

  .alert-info {
    @apply bg-blue-50 border-blue-400 text-blue-700;
  }

  .alert-success {
    @apply bg-green-50 border-green-400 text-green-700;
  }

  .alert-warning {
    @apply bg-yellow-50 border-yellow-400 text-yellow-700;
  }

  .alert-error {
    @apply bg-red-50 border-red-400 text-red-700;
  }

  /* Loading Components */
  .loading-spinner {
    @apply animate-spin rounded-full border-2 border-gray-300 border-t-blue-600;
  }

  .loading-pulse {
    @apply animate-pulse bg-gray-200 rounded;
  }

  /* Navigation Components */
  .nav-link {
    @apply px-3 py-2 rounded-lg text-sm font-medium transition-colors;
  }

  .nav-link-active {
    @apply bg-blue-100 text-blue-700;
  }

  .nav-link-inactive {
    @apply text-gray-600 hover:text-gray-900 hover:bg-gray-100;
  }

  /* Table Components */
  .table {
    @apply min-w-full divide-y divide-gray-200;
  }

  .table-header {
    @apply bg-gray-50;
  }

  .table-header-cell {
    @apply px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider;
  }

  .table-body {
    @apply bg-white divide-y divide-gray-200;
  }

  .table-row {
    @apply hover:bg-gray-50 transition-colors;
  }

  .table-cell {
    @apply px-6 py-4 whitespace-nowrap text-sm text-gray-900;
  }

  /* Modal Components */
  .modal-overlay {
    @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50;
  }

  .modal-content {
    @apply bg-white rounded-xl shadow-xl max-w-md w-full p-6;
  }

  /* Dropdown Components */
  .dropdown {
    @apply relative inline-block text-left;
  }

  .dropdown-menu {
    @apply absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-lg border border-gray-200 py-1 z-50;
  }

  .dropdown-item {
    @apply block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors;
  }
}

@layer utilities {
  /* Custom Scrollbar */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  .scrollbar-thin {
    scrollbar-width: thin;
  }

  .scrollbar-thin::-webkit-scrollbar {
    width: 6px;
  }

  .scrollbar-thin::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  /* Glass Effect */
  .glass {
    @apply bg-white/80 backdrop-blur-md border border-white/20;
  }

  .glass-dark {
    @apply bg-gray-900/80 backdrop-blur-md border border-gray-700/20;
  }

  /* Text Gradients */
  .text-gradient {
    @apply bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent;
  }

  .text-gradient-success {
    @apply bg-gradient-to-r from-green-500 to-emerald-600 bg-clip-text text-transparent;
  }

  .text-gradient-warning {
    @apply bg-gradient-to-r from-yellow-500 to-orange-500 bg-clip-text text-transparent;
  }

  .text-gradient-danger {
    @apply bg-gradient-to-r from-red-500 to-pink-600 bg-clip-text text-transparent;
  }

  /* Animations */
  .animate-fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }

  .animate-slide-up {
    animation: slideUp 0.3s ease-out;
  }

  .animate-slide-down {
    animation: slideDown 0.3s ease-out;
  }

  .animate-scale-in {
    animation: scaleIn 0.2s ease-out;
  }

  /* Hover Effects */
  .hover-lift {
    @apply transition-transform duration-200 hover:scale-105;
  }

  .hover-glow {
    @apply transition-shadow duration-200 hover:shadow-lg hover:shadow-blue-500/25;
  }

  /* Focus Effects */
  .focus-ring {
    @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2;
  }

  .focus-ring-inset {
    @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset;
  }
}

/* Custom Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* React Hot Toast Custom Styles */
.Toaster__toast {
  @apply rounded-xl shadow-lg;
}

.Toaster__toast--success {
  @apply bg-green-500;
}

.Toaster__toast--error {
  @apply bg-red-500;
}

.Toaster__toast--loading {
  @apply bg-blue-500;
}

/* Selection Styles */
::selection {
  @apply bg-blue-200 text-blue-900;
}

::-moz-selection {
  @apply bg-blue-200 text-blue-900;
}

/* Focus Visible for Accessibility */
*:focus-visible {
  @apply outline-none ring-2 ring-blue-500 ring-offset-2;
}

/* Print Styles */
@media print {
  .no-print {
    display: none !important;
  }
  
  .print-break {
    page-break-after: always;
  }
}

==================================================
File: .\src\main.jsx
==================================================

// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { RouterProvider } from 'react-router-dom';
import { ApolloProvider } from '@apollo/client';
import { Toaster } from 'react-hot-toast';

import { router } from './router';
import { client } from './lib/apollo';
import { AuthProvider } from './contexts/AuthContext';

import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ApolloProvider client={client}>
      <AuthProvider>
        <RouterProvider router={router} />
        <Toaster position="top-right" />
      </AuthProvider>
    </ApolloProvider>
  </React.StrictMode>
);

==================================================
File: .\src\components\admin\AdminLayout.jsx
==================================================

// src/components/admin/AdminLayout.jsx
import React, { useState } from 'react';
import { Outlet } from 'react-router-dom';
import Sidebar from '../common/Sidebar';
import { useAuth } from '../../contexts/AuthContext';
import {
  Bars3Icon,
  XMarkIcon,
  BellIcon,
  UserCircleIcon
} from '@heroicons/react/24/outline';

const AdminLayout = () => {
  const { user, logout } = useAuth();
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [showUserMenu, setShowUserMenu] = useState(false);

  const handleLogout = () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?')) {
      logout();
    }
  };

  const getRoleColor = (role) => {
    switch (role) {
      case 'admin': return 'bg-red-100 text-red-800';
      case 'manager': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <Sidebar 
        isOpen={sidebarOpen} 
        onToggle={() => setSidebarOpen(!sidebarOpen)}
        type="admin"
      />

      {/* Main Content Area */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Top Header */}
        <header className="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
          <div className="flex items-center justify-between">
            {/* Left: Mobile menu button + Page title */}
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className="p-2 rounded-lg hover:bg-gray-100 transition-colors lg:hidden"
              >
                {sidebarOpen ? (
                  <XMarkIcon className="h-5 w-5 text-gray-600" />
                ) : (
                  <Bars3Icon className="h-5 w-5 text-gray-600" />
                )}
              </button>

              <div>
                <h1 className="text-xl font-semibold text-gray-900">
                  SmartShop Admin
                </h1>
                <p className="text-sm text-gray-500">
                  Qu·∫£n l√Ω h·ªá th·ªëng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠
                </p>
              </div>
            </div>

            {/* Right: User info + Actions */}
            <div className="flex items-center space-x-4">
              {/* Notifications */}
              <button className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors">
                <BellIcon className="h-5 w-5" />
                <span className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                  3
                </span>
              </button>

              {/* User Menu */}
              <div className="relative">
                <button
                  onClick={() => setShowUserMenu(!showUserMenu)}
                  className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 transition-colors"
                >
                  <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
                    {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}
                  </div>
                  <div className="hidden md:block text-left">
                    <p className="text-sm font-medium text-gray-900">
                      {user?.firstName} {user?.lastName}
                    </p>
                    <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${getRoleColor(user?.role)}`}>
                      {user?.role}
                    </span>
                  </div>
                </button>

                {/* User Dropdown */}
                {showUserMenu && (
                  <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
                    <div className="px-4 py-3 border-b border-gray-100">
                      <p className="text-sm font-medium text-gray-900">
                        {user?.firstName} {user?.lastName}
                      </p>
                      <p className="text-xs text-gray-500">{user?.email}</p>
                    </div>
                    
                    <div className="py-1">
                      <button
                        onClick={() => {
                          setShowUserMenu(false);
                          // Navigate to profile
                        }}
                        className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                      >
                        <UserCircleIcon className="h-4 w-4 mr-3" />
                        Th√¥ng tin c√° nh√¢n
                      </button>
                      
                      <button
                        onClick={() => {
                          setShowUserMenu(false);
                          handleLogout();
                        }}
                        className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                      >
                        <span className="w-4 h-4 mr-3 text-center">üö™</span>
                        ƒêƒÉng xu·∫•t
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="flex-1 overflow-y-auto bg-gray-50">
          <div className="p-6">
            {/* Breadcrumb */}
            <nav className="flex mb-6" aria-label="Breadcrumb">
              <ol className="inline-flex items-center space-x-1 md:space-x-3">
                <li className="inline-flex items-center">
                  <span className="text-sm font-medium text-gray-500">Admin</span>
                </li>
                <li>
                  <div className="flex items-center">
                    <span className="text-gray-400">/</span>
                    <span className="ml-1 text-sm font-medium text-gray-900">
                      Dashboard
                    </span>
                  </div>
                </li>
              </ol>
            </nav>

            {/* Page Content */}
            <div className="space-y-6">
              <Outlet />
            </div>
          </div>
        </main>
      </div>

      {/* Overlay for mobile */}
      {sidebarOpen && (
        <div 
          className="fixed inset-0 z-40 lg:hidden" 
          onClick={() => setSidebarOpen(false)}
        />
      )}

      {/* Click outside to close user menu */}
      {showUserMenu && (
        <div 
          className="fixed inset-0 z-40" 
          onClick={() => setShowUserMenu(false)}
        />
      )}
    </div>
  );
};

export default AdminLayout;

==================================================
File: .\src\components\auth\ProtectedRoute.jsx
==================================================

// src/components/auth/ProtectedRoute.jsx
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const ProtectedRoute = ({ 
  children, 
  requireAuth = true, 
  requiredRole = null,
  fallback = null 
}) => {
  const { isAuthenticated, user, loading } = useAuth();
  const location = useLocation();

  // Show loading while checking auth
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  // If authentication is required but user is not authenticated
  if (requireAuth && !isAuthenticated) {
    // Redirect to login with return url
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // If user is authenticated but shouldn't be (e.g., login page)
  if (!requireAuth && isAuthenticated) {
    // Redirect based on user role
    const redirectPath = user?.role === 'admin' || user?.role === 'manager' 
      ? '/admin' 
      : '/';
    return <Navigate to={redirectPath} replace />;
  }

  // Check role-based access
  if (requireAuth && requiredRole) {
    if (Array.isArray(requiredRole)) {
      // Multiple roles allowed
      if (!requiredRole.includes(user?.role)) {
        return fallback || (
          <div className="min-h-screen flex items-center justify-center">
            <div className="text-center">
              <h1 className="text-2xl font-bold text-gray-900 mb-4">
                Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
              </h1>
              <p className="text-gray-600 mb-6">
                B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o trang n√†y.
              </p>
              <button
                onClick={() => window.history.back()}
                className="btn btn-primary"
              >
                Quay l·∫°i
              </button>
            </div>
          </div>
        );
      }
    } else {
      // Single role required
      if (user?.role !== requiredRole) {
        return fallback || (
          <div className="min-h-screen flex items-center justify-center">
            <div className="text-center">
              <h1 className="text-2xl font-bold text-gray-900 mb-4">
                Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
              </h1>
              <p className="text-gray-600 mb-6">
                Trang n√†y y√™u c·∫ßu quy·ªÅn {requiredRole}.
              </p>
              <button
                onClick={() => window.history.back()}
                className="btn btn-primary"
              >
                Quay l·∫°i
              </button>
            </div>
          </div>
        );
      }
    }
  }

  // All checks passed, render children
  return children;
};

// Convenience components for different access levels
export const AdminRoute = ({ children, ...props }) => (
  <ProtectedRoute requiredRole="admin" {...props}>
    {children}
  </ProtectedRoute>
);

export const ManagerRoute = ({ children, ...props }) => (
  <ProtectedRoute requiredRole={['admin', 'manager']} {...props}>
    {children}
  </ProtectedRoute>
);

export const CustomerRoute = ({ children, ...props }) => (
  <ProtectedRoute requiredRole="customer" {...props}>
    {children}
  </ProtectedRoute>
);

export const GuestRoute = ({ children, ...props }) => (
  <ProtectedRoute requireAuth={false} {...props}>
    {children}
  </ProtectedRoute>
);

export default ProtectedRoute;

==================================================
File: .\src\components\auth\RegisterForm.jsx
==================================================

// src/components/auth/RegisterForm.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline';
import { useRegister } from '../../hooks/useAuth';

const RegisterForm = () => {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
    firstName: '',
    lastName: '',
    phone: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [errors, setErrors] = useState({});

  const { register, loading } = useRegister();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    // Username validation
    if (!formData.username.trim()) {
      newErrors.username = 'T√™n ƒëƒÉng nh·∫≠p l√† b·∫Øt bu·ªôc';
    } else if (formData.username.length < 3) {
      newErrors.username = 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±';
    }

    // Email validation
    if (!formData.email.trim()) {
      newErrors.email = 'Email l√† b·∫Øt bu·ªôc';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
    }

    // Password validation
    if (!formData.password) {
      newErrors.password = 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.password.length < 6) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }

    // Confirm password validation
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'X√°c nh·∫≠n m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp';
    }

    // First name validation
    if (!formData.firstName.trim()) {
      newErrors.firstName = 'H·ªç l√† b·∫Øt bu·ªôc';
    }

    // Last name validation
    if (!formData.lastName.trim()) {
      newErrors.lastName = 'T√™n l√† b·∫Øt bu·ªôc';
    }

    // Phone validation (optional)
    if (formData.phone && !/^[0-9]{10,11}$/.test(formData.phone)) {
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    // Remove confirmPassword before sending
    const { confirmPassword, ...registerData } = formData;
    await register(registerData);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            T·∫°o t√†i kho·∫£n SmartShop
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Ho·∫∑c{' '}
            <Link
              to="/login"
              className="font-medium text-blue-600 hover:text-blue-500"
            >
              ƒëƒÉng nh·∫≠p t√†i kho·∫£n c√≥ s·∫µn
            </Link>
          </p>
        </div>

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            {/* Username Field */}
            <div className="form-group">
              <label htmlFor="username" className="form-label">
                T√™n ƒëƒÉng nh·∫≠p *
              </label>
              <input
                id="username"
                name="username"
                type="text"
                autoComplete="username"
                required
                className={`input ${errors.username ? 'input-error' : ''}`}
                placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                value={formData.username}
                onChange={handleChange}
              />
              {errors.username && (
                <p className="form-error">{errors.username}</p>
              )}
            </div>

            {/* Email Field */}
            <div className="form-group">
              <label htmlFor="email" className="form-label">
                Email *
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                className={`input ${errors.email ? 'input-error' : ''}`}
                placeholder="Nh·∫≠p email"
                value={formData.email}
                onChange={handleChange}
              />
              {errors.email && (
                <p className="form-error">{errors.email}</p>
              )}
            </div>

            {/* First Name & Last Name */}
            <div className="grid grid-cols-2 gap-4">
              <div className="form-group">
                <label htmlFor="firstName" className="form-label">
                  H·ªç *
                </label>
                <input
                  id="firstName"
                  name="firstName"
                  type="text"
                  autoComplete="given-name"
                  required
                  className={`input ${errors.firstName ? 'input-error' : ''}`}
                  placeholder="H·ªç"
                  value={formData.firstName}
                  onChange={handleChange}
                />
                {errors.firstName && (
                  <p className="form-error">{errors.firstName}</p>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="lastName" className="form-label">
                  T√™n *
                </label>
                <input
                  id="lastName"
                  name="lastName"
                  type="text"
                  autoComplete="family-name"
                  required
                  className={`input ${errors.lastName ? 'input-error' : ''}`}
                  placeholder="T√™n"
                  value={formData.lastName}
                  onChange={handleChange}
                />
                {errors.lastName && (
                  <p className="form-error">{errors.lastName}</p>
                )}
              </div>
            </div>

            {/* Phone Field */}
            <div className="form-group">
              <label htmlFor="phone" className="form-label">
                S·ªë ƒëi·ªán tho·∫°i
              </label>
              <input
                id="phone"
                name="phone"
                type="tel"
                autoComplete="tel"
                className={`input ${errors.phone ? 'input-error' : ''}`}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (t√πy ch·ªçn)"
                value={formData.phone}
                onChange={handleChange}
              />
              {errors.phone && (
                <p className="form-error">{errors.phone}</p>
              )}
            </div>

            {/* Password Field */}
            <div className="form-group">
              <label htmlFor="password" className="form-label">
                M·∫≠t kh·∫©u *
              </label>
              <div className="relative">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? 'text' : 'password'}
                  autoComplete="new-password"
                  required
                  className={`input pr-10 ${errors.password ? 'input-error' : ''}`}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                  value={formData.password}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeSlashIcon className="h-5 w-5 text-gray-400" />
                  ) : (
                    <EyeIcon className="h-5 w-5 text-gray-400" />
                  )}
                </button>
              </div>
              {errors.password && (
                <p className="form-error">{errors.password}</p>
              )}
            </div>

            {/* Confirm Password Field */}
            <div className="form-group">
              <label htmlFor="confirmPassword" className="form-label">
                X√°c nh·∫≠n m·∫≠t kh·∫©u *
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? 'text' : 'password'}
                  autoComplete="new-password"
                  required
                  className={`input pr-10 ${errors.confirmPassword ? 'input-error' : ''}`}
                  placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                >
                  {showConfirmPassword ? (
                    <EyeSlashIcon className="h-5 w-5 text-gray-400" />
                  ) : (
                    <EyeIcon className="h-5 w-5 text-gray-400" />
                  )}
                </button>
              </div>
              {errors.confirmPassword && (
                <p className="form-error">{errors.confirmPassword}</p>
              )}
            </div>
          </div>

          {/* Terms Agreement */}
          <div className="flex items-center">
            <input
              id="agree-terms"
              name="agree-terms"
              type="checkbox"
              required
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="agree-terms" className="ml-2 block text-sm text-gray-900">
              T√¥i ƒë·ªìng √Ω v·ªõi{' '}
              <a href="#" className="text-blue-600 hover:text-blue-500">
                ƒêi·ªÅu kho·∫£n d·ªãch v·ª•
              </a>{' '}
              v√†{' '}
              <a href="#" className="text-blue-600 hover:text-blue-500">
                Ch√≠nh s√°ch b·∫£o m·∫≠t
              </a>
            </label>
          </div>

          {/* Submit Button */}
          <div>
            <button
              type="submit"
              disabled={loading}
              className="btn btn-primary w-full flex justify-center items-center"
            >
              {loading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  ƒêang t·∫°o t√†i kho·∫£n...
                </>
              ) : (
                'T·∫°o t√†i kho·∫£n'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default RegisterForm;

==================================================
File: .\src\components\auth\LoginForm.jsx
==================================================

// src/components/auth/LoginForm.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { EyeIcon, EyeSlashIcon, UserIcon, LockClosedIcon } from '@heroicons/react/24/outline';
import { useLogin } from '../../hooks/useAuth';

const LoginForm = () => {
  const [formData, setFormData] = useState({
    username: '',
    password: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState({});

  const { login, loading } = useLogin();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.username.trim()) {
      newErrors.username = 'T√™n ƒëƒÉng nh·∫≠p l√† b·∫Øt bu·ªôc';
    }

    if (!formData.password) {
      newErrors.password = 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.password.length < 6) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    await login(formData);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        {/* Header */}
        <div className="text-center">
          <div className="flex justify-center mb-6">
            <div className="w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl flex items-center justify-center">
              <span className="text-white font-bold text-2xl">S</span>
            </div>
          </div>
          <h2 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Ch√†o m·ª´ng tr·ªü l·∫°i!
          </h2>
          <p className="mt-2 text-gray-600">
            ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n SmartShop c·ªßa b·∫°n
          </p>
        </div>

        {/* Form */}
        <div className="bg-white rounded-2xl shadow-xl p-8 border border-gray-100">
          <form className="space-y-6" onSubmit={handleSubmit}>
            {/* Username Field */}
            <div className="space-y-2">
              <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                T√™n ƒëƒÉng nh·∫≠p
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <UserIcon className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="username"
                  name="username"
                  type="text"
                  autoComplete="username"
                  required
                  className={`appearance-none relative block w-full pl-10 pr-3 py-3 border ${
                    errors.username ? 'border-red-300' : 'border-gray-300'
                  } rounded-xl placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors`}
                  placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                  value={formData.username}
                  onChange={handleChange}
                />
              </div>
              {errors.username && (
                <p className="text-red-500 text-sm flex items-center">
                  <span className="mr-1">‚ö†Ô∏è</span>
                  {errors.username}
                </p>
              )}
            </div>

            {/* Password Field */}
            <div className="space-y-2">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                M·∫≠t kh·∫©u
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <LockClosedIcon className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="password"
                  name="password"
                  type={showPassword ? 'text' : 'password'}
                  autoComplete="current-password"
                  required
                  className={`appearance-none relative block w-full pl-10 pr-12 py-3 border ${
                    errors.password ? 'border-red-300' : 'border-gray-300'
                  } rounded-xl placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors`}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                  value={formData.password}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeSlashIcon className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                  ) : (
                    <EyeIcon className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                  )}
                </button>
              </div>
              {errors.password && (
                <p className="text-red-500 text-sm flex items-center">
                  <span className="mr-1">‚ö†Ô∏è</span>
                  {errors.password}
                </p>
              )}
            </div>

            {/* Remember & Forgot */}
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-700">
                  Ghi nh·ªõ ƒëƒÉng nh·∫≠p
                </label>
              </div>

              <div className="text-sm">
                <a href="#" className="font-medium text-blue-600 hover:text-blue-500 transition-colors">
                  Qu√™n m·∫≠t kh·∫©u?
                </a>
              </div>
            </div>

            {/* Submit Button */}
            <div>
              <button
                type="submit"
                disabled={loading}
                className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-xl text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-[1.02]"
              >
                {loading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    ƒêang ƒëƒÉng nh·∫≠p...
                  </>
                ) : (
                  'ƒêƒÉng nh·∫≠p'
                )}
              </button>
            </div>

            {/* Register Link */}
            <div className="text-center">
              <p className="text-sm text-gray-600">
                Ch∆∞a c√≥ t√†i kho·∫£n?{' '}
                <Link
                  to="/register"
                  className="font-medium text-blue-600 hover:text-blue-500 transition-colors"
                >
                  T·∫°o t√†i kho·∫£n m·ªõi
                </Link>
              </p>
            </div>
          </form>
        </div>

        {/* Demo Accounts */}
        <div className="bg-blue-50 rounded-xl p-4 border border-blue-200">
          <h3 className="text-sm font-medium text-blue-900 mb-2">üéØ T√†i kho·∫£n demo:</h3>
          <div className="text-xs text-blue-700 space-y-1">
            <p><strong>Admin:</strong> admin / 1234</p>
            <p><strong>Manager:</strong> john / 1234</p>
            <p><strong>Customer:</strong> alice / 1234</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginForm;

==================================================
File: .\src\components\products\ProductSearch.jsx
==================================================

// src/components/products/ProductSearch.jsx
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  MagnifyingGlassIcon, 
  XMarkIcon,
  ClockIcon,
  FireIcon // Thay th·∫ø TrendingUpIcon b·∫±ng FireIcon
} from '@heroicons/react/24/outline';
import { useSearchProducts } from '../../hooks/useProducts';
import { formatPrice, getImageUrl } from '../../lib/utils';

const ProductSearch = ({ 
  placeholder = "T√¨m ki·∫øm s·∫£n ph·∫©m...",
  className = "",
  showSuggestions = true,
  onSearchSubmit
}) => {
  const navigate = useNavigate();
  const { searchResults, isSearching, search, clearSearch } = useSearchProducts();
  
  const [query, setQuery] = useState('');
  const [showResults, setShowResults] = useState(false);
  const [recentSearches, setRecentSearches] = useState([]);
  const [trendingSearches] = useState([
    'iPhone 15', 'MacBook Pro', 'Samsung Galaxy', 'AirPods', 'iPad'
  ]);

  const searchRef = useRef(null);
  const resultsRef = useRef(null);

  // Load recent searches from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('smartshop_recent_searches');
    if (saved) {
      try {
        setRecentSearches(JSON.parse(saved));
      } catch (error) {
        console.error('Error loading recent searches:', error);
      }
    }
  }, []);

  // Save recent searches to localStorage
  const saveRecentSearch = (searchQuery) => {
    if (!searchQuery.trim()) return;
    
    const updated = [
      searchQuery,
      ...recentSearches.filter(item => item !== searchQuery)
    ].slice(0, 5); // Keep only 5 recent searches
    
    setRecentSearches(updated);
    localStorage.setItem('smartshop_recent_searches', JSON.stringify(updated));
  };

  // Handle search input change
  const handleInputChange = (e) => {
    const value = e.target.value;
    setQuery(value);
    
    if (value.trim().length > 2) {
      search(value, { first: 5 }); // Search with limit for suggestions
      setShowResults(true);
    } else {
      clearSearch();
      setShowResults(value.length > 0);
    }
  };

  // Handle search submission
  const handleSubmit = (e) => {
    e.preventDefault();
    performSearch(query);
  };

  const performSearch = (searchQuery) => {
    if (!searchQuery.trim()) return;
    
    saveRecentSearch(searchQuery.trim());
    setShowResults(false);
    setQuery(searchQuery);
    
    if (onSearchSubmit) {
      onSearchSubmit(searchQuery);
    } else {
      navigate(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
    }
  };

  // Handle click outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        searchRef.current && 
        !searchRef.current.contains(event.target) &&
        resultsRef.current &&
        !resultsRef.current.contains(event.target)
      ) {
        setShowResults(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Clear search
  const handleClear = () => {
    setQuery('');
    clearSearch();
    setShowResults(false);
  };

  // Remove recent search item
  const removeRecentSearch = (item) => {
    const updated = recentSearches.filter(search => search !== item);
    setRecentSearches(updated);
    localStorage.setItem('smartshop_recent_searches', JSON.stringify(updated));
  };

  return (
    <div className={`relative ${className}`}>
      {/* Search Input */}
      <form onSubmit={handleSubmit} className="relative">
        <div className="relative">
          <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
          <input
            ref={searchRef}
            type="text"
            value={query}
            onChange={handleInputChange}
            onFocus={() => setShowResults(true)}
            placeholder={placeholder}
            className="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900 placeholder-gray-500"
            autoComplete="off"
          />
          
          {/* Clear button */}
          {query && (
            <button
              type="button"
              onClick={handleClear}
              className="absolute right-3 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600 transition-colors"
            >
              <XMarkIcon className="h-4 w-4" />
            </button>
          )}
        </div>
      </form>

      {/* Search Results Dropdown */}
      {showSuggestions && showResults && (
        <div
          ref={resultsRef}
          className="absolute top-full left-0 right-0 mt-2 bg-white rounded-xl shadow-lg border border-gray-200 z-50 max-h-96 overflow-y-auto"
        >
          {/* Loading */}
          {isSearching && query.length > 2 && (
            <div className="p-4 text-center">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto"></div>
              <p className="text-sm text-gray-500 mt-2">ƒêang t√¨m ki·∫øm...</p>
            </div>
          )}

          {/* Search Results */}
          {searchResults.length > 0 && query.length > 2 && (
            <div>
              <div className="px-4 py-2 border-b border-gray-100">
                <h3 className="text-sm font-medium text-gray-900">S·∫£n ph·∫©m</h3>
              </div>
              <div className="max-h-64 overflow-y-auto">
                {searchResults.map((product) => (
                  <button
                    key={product._id}
                    onClick={() => navigate(`/products/${product._id}`)}
                    className="w-full px-4 py-3 flex items-center space-x-3 hover:bg-gray-50 transition-colors text-left"
                  >
                    <img
                      src={getImageUrl(product.images?.[0])}
                      alt={product.name}
                      className="w-12 h-12 object-cover rounded-lg bg-gray-100"
                      onError={(e) => {
                        e.target.src = '/placeholder-product.jpg';
                      }}
                    />
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {product.name}
                      </p>
                      <p className="text-sm text-gray-500 truncate">
                        {product.brand?.name} ‚Ä¢ {product.category?.name}
                      </p>
                      <p className="text-sm font-semibold text-red-600">
                        {formatPrice(product.price)}
                      </p>
                    </div>
                  </button>
                ))}
              </div>
              
              {/* View all results */}
              <div className="border-t border-gray-100">
                <button
                  onClick={() => performSearch(query)}
                  className="w-full px-4 py-3 text-sm font-medium text-blue-600 hover:bg-blue-50 transition-colors"
                >
                  Xem t·∫•t c·∫£ k·∫øt qu·∫£ cho "{query}"
                </button>
              </div>
            </div>
          )}

          {/* No Results */}
          {searchResults.length === 0 && query.length > 2 && !isSearching && (
            <div className="p-4 text-center">
              <p className="text-sm text-gray-500">
                Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o cho "{query}"
              </p>
            </div>
          )}

          {/* Recent Searches */}
          {(!query || query.length <= 2) && recentSearches.length > 0 && (
            <div>
              <div className="px-4 py-2 border-b border-gray-100">
                <h3 className="text-sm font-medium text-gray-900 flex items-center">
                  <ClockIcon className="h-4 w-4 mr-2" />
                  T√¨m ki·∫øm g·∫ßn ƒë√¢y
                </h3>
              </div>
              <div>
                {recentSearches.map((item, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between px-4 py-2 hover:bg-gray-50"
                  >
                    <button
                      onClick={() => {
                        setQuery(item);
                        performSearch(item);
                      }}
                      className="flex-1 text-left text-sm text-gray-700 hover:text-gray-900"
                    >
                      {item}
                    </button>
                    <button
                      onClick={() => removeRecentSearch(item)}
                      className="p-1 text-gray-400 hover:text-gray-600"
                    >
                      <XMarkIcon className="h-3 w-3" />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Trending Searches */}
          {(!query || query.length <= 2) && trendingSearches.length > 0 && (
            <div>
              <div className="px-4 py-2 border-b border-gray-100">
                <h3 className="text-sm font-medium text-gray-900 flex items-center">
                  <FireIcon className="h-4 w-4 mr-2" />
                  T√¨m ki·∫øm ph·ªï bi·∫øn
                </h3>
              </div>
              <div>
                {trendingSearches.map((item, index) => (
                  <button
                    key={index}
                    onClick={() => {
                      setQuery(item);
                      performSearch(item);
                    }}
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 hover:text-gray-900"
                  >
                    {item}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Empty state */}
          {(!query || query.length <= 2) && recentSearches.length === 0 && (
            <div className="p-6 text-center">
              <MagnifyingGlassIcon className="h-12 w-12 text-gray-300 mx-auto mb-2" />
              <p className="text-sm text-gray-500">
                Nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ProductSearch;

==================================================
File: .\src\components\products\ProductCard.jsx
==================================================

// src/components/products/ProductCard.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { 
  HeartIcon, 
  ShoppingCartIcon, 
  EyeIcon,
  StarIcon 
} from '@heroicons/react/24/outline';
import { HeartIcon as HeartSolidIcon } from '@heroicons/react/24/solid';
import { formatPrice, getImageUrl, calculateDiscountPercentage } from '../../lib/utils';

const ProductCard = ({ 
  product, 
  viewMode = 'grid', // 'grid' or 'list'
  showQuickActions = true,
  className = '' 
}) => {
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [imageError, setImageError] = useState(false);

  if (!product) return null;

  const {
    _id,
    name,
    description,
    price,
    originalPrice,
    images = [],
    stock = 0,
    category,
    brand,
    isFeatured
  } = product;

  // Safe fallbacks for missing data
  const categoryName = category?.name || 'Ch∆∞a ph√¢n lo·∫°i';
  const brandName = brand?.name || 'Kh√¥ng x√°c ƒë·ªãnh';
  const productStock = typeof stock === 'number' ? stock : 0;
  const productPrice = typeof price === 'number' ? price : 0;

  const discount = originalPrice && originalPrice > productPrice 
    ? calculateDiscountPercentage(originalPrice, productPrice) 
    : 0;

  const mainImage = images.length > 0 ? getImageUrl(images[0]) : '/placeholder-product.jpg';

  const handleAddToWishlist = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsWishlisted(!isWishlisted);
    // TODO: Implement wishlist functionality
  };

  const handleAddToCart = (e) => {
    e.preventDefault();
    e.stopPropagation();
    // TODO: Implement add to cart functionality
    console.log('Add to cart:', product);
  };

  const handleQuickView = (e) => {
    e.preventDefault();
    e.stopPropagation();
    // TODO: Implement quick view modal
    console.log('Quick view:', product);
  };

  // Grid view layout
  if (viewMode === 'grid') {
    return (
      <div className={`group bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-all duration-200 ${className}`}>
        {/* Image Container */}
        <Link to={`/products/${_id}`} className="block relative overflow-hidden bg-gray-100">
          <div className="aspect-square">
            <img
              src={imageError ? '/placeholder-product.jpg' : mainImage}
              alt={name}
              className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              onError={() => setImageError(true)}
              loading="lazy"
            />
          </div>

          {/* Overlays */}
          <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200" />

          {/* Badges */}
          <div className="absolute top-3 left-3 flex flex-col gap-2">
            {isFeatured && (
              <span className="px-2 py-1 bg-blue-500 text-white text-xs font-semibold rounded-lg">
                N·ªïi b·∫≠t
              </span>
            )}
            {discount > 0 && (
              <span className="px-2 py-1 bg-red-500 text-white text-xs font-semibold rounded-lg">
                -{discount}%
              </span>
            )}
            {productStock === 0 && (
              <span className="px-2 py-1 bg-gray-500 text-white text-xs font-semibold rounded-lg">
                H·∫øt h√†ng
              </span>
            )}
          </div>

          {/* Quick Actions */}
          {showQuickActions && (
            <div className="absolute top-3 right-3 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
              <button
                onClick={handleAddToWishlist}
                className="w-9 h-9 bg-white rounded-full flex items-center justify-center shadow-md hover:bg-red-50 transition-colors"
                title={isWishlisted ? 'B·ªè y√™u th√≠ch' : 'Th√™m v√†o y√™u th√≠ch'}
              >
                {isWishlisted ? (
                  <HeartSolidIcon className="w-4 h-4 text-red-500" />
                ) : (
                  <HeartIcon className="w-4 h-4 text-gray-600" />
                )}
              </button>
              <button
                onClick={handleQuickView}
                className="w-9 h-9 bg-white rounded-full flex items-center justify-center shadow-md hover:bg-blue-50 transition-colors"
                title="Xem nhanh"
              >
                <EyeIcon className="w-4 h-4 text-gray-600" />
              </button>
            </div>
          )}

          {/* Quick Add to Cart (Bottom overlay) */}
          {showQuickActions && productStock > 0 && (
            <div className="absolute bottom-0 left-0 right-0 p-3 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-200">
              <button
                onClick={handleAddToCart}
                className="w-full btn btn-primary text-sm py-2"
              >
                <ShoppingCartIcon className="w-4 h-4 mr-2" />
                Th√™m v√†o gi·ªè
              </button>
            </div>
          )}
        </Link>

        {/* Product Info */}
        <div className="p-4">
          {/* Category & Brand */}
          <div className="flex items-center justify-between text-xs text-gray-500 mb-2">
            <span title={categoryName}>{categoryName}</span>
            <span title={brandName}>{brandName}</span>
          </div>

          {/* Product Name */}
          <Link 
            to={`/products/${_id}`}
            className="block"
          >
            <h3 className="font-semibold text-gray-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors">
              {name}
            </h3>
          </Link>

          {/* Rating (Mock for now) */}
          <div className="flex items-center mb-3">
            <div className="flex items-center">
              {[...Array(5)].map((_, i) => (
                <StarIcon
                  key={i}
                  className={`w-4 h-4 ${i < 4 ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
                />
              ))}
            </div>
            <span className="text-sm text-gray-500 ml-1">(4.2)</span>
          </div>

          {/* Price */}
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-2">
              <span className="text-lg font-bold text-red-600">
                {formatPrice(productPrice)}
              </span>
              {originalPrice && originalPrice > productPrice && (
                <span className="text-sm text-gray-500 line-through">
                  {formatPrice(originalPrice)}
                </span>
              )}
            </div>
          </div>

          {/* Stock Status */}
          <div className="flex items-center justify-between">
            <span className={`text-xs px-2 py-1 rounded-full ${
              productStock > 10 
                ? 'bg-green-100 text-green-700' 
                : productStock > 0 
                  ? 'bg-yellow-100 text-yellow-700'
                  : 'bg-red-100 text-red-700'
            }`}>
              {productStock > 10 ? 'C√≤n h√†ng' : productStock > 0 ? `C√≤n ${productStock}` : 'H·∫øt h√†ng'}
            </span>
          </div>
        </div>
      </div>
    );
  }

  // List view layout
  return (
    <div className={`group bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-all duration-200 ${className}`}>
      <div className="flex">
        {/* Image */}
        <Link to={`/products/${_id}`} className="block relative overflow-hidden bg-gray-100 w-48 flex-shrink-0">
          <div className="aspect-square">
            <img
              src={imageError ? '/placeholder-product.jpg' : mainImage}
              alt={name}
              className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              onError={() => setImageError(true)}
              loading="lazy"
            />
          </div>

          {/* Badges */}
          <div className="absolute top-2 left-2 flex flex-col gap-1">
            {isFeatured && (
              <span className="px-2 py-1 bg-blue-500 text-white text-xs font-semibold rounded">
                N·ªïi b·∫≠t
              </span>
            )}
            {discount > 0 && (
              <span className="px-2 py-1 bg-red-500 text-white text-xs font-semibold rounded">
                -{discount}%
              </span>
            )}
          </div>
        </Link>

        {/* Content */}
        <div className="flex-1 p-6 flex flex-col justify-between">
          <div>
            {/* Category & Brand */}
            <div className="flex items-center text-sm text-gray-500 mb-2">
              <span title={categoryName}>{categoryName}</span>
              <span className="mx-2">‚Ä¢</span>
              <span title={brandName}>{brandName}</span>
            </div>

            {/* Product Name */}
            <Link to={`/products/${_id}`}>
              <h3 className="text-xl font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                {name}
              </h3>
            </Link>

            {/* Description */}
            {description && (
              <p className="text-gray-600 text-sm mb-4 line-clamp-2">
                {description}
              </p>
            )}

            {/* Rating */}
            <div className="flex items-center mb-4">
              <div className="flex items-center">
                {[...Array(5)].map((_, i) => (
                  <StarIcon
                    key={i}
                    className={`w-4 h-4 ${i < 4 ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
                  />
                ))}
              </div>
              <span className="text-sm text-gray-500 ml-2">(4.2) ‚Ä¢ 156 ƒë√°nh gi√°</span>
            </div>
          </div>

          {/* Bottom section */}
          <div className="flex items-center justify-between">
            {/* Price */}
            <div className="flex items-center space-x-3">
              <span className="text-2xl font-bold text-red-600">
                {formatPrice(productPrice)}
              </span>
              {originalPrice && originalPrice > productPrice && (
                <span className="text-lg text-gray-500 line-through">
                  {formatPrice(originalPrice)}
                </span>
              )}
            </div>

            {/* Actions */}
            <div className="flex items-center space-x-3">
              {/* Stock */}
              <span className={`text-sm px-3 py-1 rounded-full ${
                productStock > 10 
                  ? 'bg-green-100 text-green-700' 
                  : productStock > 0 
                    ? 'bg-yellow-100 text-yellow-700'
                    : 'bg-red-100 text-red-700'
              }`}>
                {productStock > 10 ? 'C√≤n h√†ng' : productStock > 0 ? `C√≤n ${productStock}` : 'H·∫øt h√†ng'}
              </span>

              {/* Action Buttons */}
              <div className="flex items-center space-x-2">
                <button
                  onClick={handleAddToWishlist}
                  className="p-2 text-gray-600 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors"
                  title={isWishlisted ? 'B·ªè y√™u th√≠ch' : 'Th√™m v√†o y√™u th√≠ch'}
                >
                  {isWishlisted ? (
                    <HeartSolidIcon className="w-5 h-5 text-red-500" />
                  ) : (
                    <HeartIcon className="w-5 h-5" />
                  )}
                </button>

                {productStock > 0 && (
                  <button
                    onClick={handleAddToCart}
                    className="btn btn-primary"
                  >
                    <ShoppingCartIcon className="w-4 h-4 mr-2" />
                    Th√™m v√†o gi·ªè
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductCard;

==================================================
File: .\src\components\products\ProductList.jsx
==================================================

// src/components/products/ProductList.jsx
import React from 'react';
import ProductCard from './ProductCard';

const ProductList = ({ 
  products = [], 
  loading = false, 
  viewMode = 'grid',
  showLoadMore = false,
  onLoadMore,
  hasNextPage = false,
  loadingMore = false 
}) => {
  
  // Filter out null/undefined products and validate data
  const validProducts = products.filter(product => {
    return product && 
           product._id && 
           product.name && 
           typeof product.price === 'number';
  });

  if (loading && validProducts.length === 0) {
    return (
      <div className={`grid gap-6 ${
        viewMode === 'grid' 
          ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
          : 'grid-cols-1'
      }`}>
        {[...Array(6)].map((_, index) => (
          <ProductCardSkeleton key={index} viewMode={viewMode} />
        ))}
      </div>
    );
  }

  if (validProducts.length === 0 && !loading) {
    return (
      <div className="text-center py-12">
        <div className="w-24 h-24 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
          <span className="text-4xl">üì¶</span>
        </div>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
        </h3>
        <p className="text-gray-600 mb-6">
          {products.length > validProducts.length 
            ? `C√≥ ${products.length - validProducts.length} s·∫£n ph·∫©m b·ªã l·ªói d·ªØ li·ªáu. Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c.`
            : 'Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c'
          }
        </p>
        <button 
          onClick={() => window.location.reload()}
          className="btn btn-primary"
        >
          L√†m m·ªõi trang
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Data Quality Warning */}
      {products.length > validProducts.length && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
          <div className="flex items-center">
            <div className="text-yellow-600 mr-3">‚ö†Ô∏è</div>
            <div>
              <h3 className="text-sm font-medium text-yellow-800">
                C·∫£nh b√°o d·ªØ li·ªáu
              </h3>
              <p className="text-sm text-yellow-700 mt-1">
                {products.length - validProducts.length} s·∫£n ph·∫©m c√≥ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá v√† ƒë√£ ƒë∆∞·ª£c ·∫©n.
                C√≥ th·ªÉ do thi·∫øu th√¥ng tin brand ho·∫∑c category.
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Products Grid/List */}
      <div className={`grid gap-6 ${
        viewMode === 'grid' 
          ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
          : 'grid-cols-1'
      }`}>
        {validProducts.map((product) => (
          <ProductCard 
            key={product._id} 
            product={product} 
            viewMode={viewMode}
          />
        ))}
      </div>

      {/* Load More Button */}
      {showLoadMore && hasNextPage && (
        <div className="text-center py-8">
          <button
            onClick={onLoadMore}
            disabled={loadingMore}
            className="btn btn-secondary px-8 py-3"
          >
            {loadingMore ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600 mr-2"></div>
                ƒêang t·∫£i...
              </>
            ) : (
              'Xem th√™m s·∫£n ph·∫©m'
            )}
          </button>
        </div>
      )}

      {/* Loading More Indicator */}
      {loadingMore && (
        <div className={`grid gap-6 ${
          viewMode === 'grid' 
            ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
            : 'grid-cols-1'
        }`}>
          {[...Array(3)].map((_, index) => (
            <ProductCardSkeleton key={`loading-${index}`} viewMode={viewMode} />
          ))}
        </div>
      )}
    </div>
  );
};

// Skeleton Loading Component
const ProductCardSkeleton = ({ viewMode }) => {
  if (viewMode === 'grid') {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden animate-pulse">
        {/* Image Skeleton */}
        <div className="aspect-square bg-gray-200"></div>
        
        {/* Content Skeleton */}
        <div className="p-4 space-y-3">
          {/* Category & Brand */}
          <div className="flex justify-between">
            <div className="h-3 bg-gray-200 rounded w-16"></div>
            <div className="h-3 bg-gray-200 rounded w-12"></div>
          </div>
          
          {/* Title */}
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded w-full"></div>
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
          </div>
          
          {/* Rating */}
          <div className="flex items-center space-x-1">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="w-4 h-4 bg-gray-200 rounded"></div>
            ))}
            <div className="h-3 bg-gray-200 rounded w-8 ml-2"></div>
          </div>
          
          {/* Price */}
          <div className="flex items-center space-x-2">
            <div className="h-5 bg-gray-200 rounded w-20"></div>
            <div className="h-4 bg-gray-200 rounded w-16"></div>
          </div>
          
          {/* Stock */}
          <div className="h-6 bg-gray-200 rounded w-16"></div>
        </div>
      </div>
    );
  }

  // List view skeleton
  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden animate-pulse">
      <div className="flex">
        {/* Image Skeleton */}
        <div className="w-48 aspect-square bg-gray-200 flex-shrink-0"></div>
        
        {/* Content Skeleton */}
        <div className="flex-1 p-6 space-y-4">
          {/* Category & Brand */}
          <div className="flex items-center space-x-4">
            <div className="h-3 bg-gray-200 rounded w-16"></div>
            <div className="h-3 bg-gray-200 rounded w-12"></div>
          </div>
          
          {/* Title */}
          <div className="space-y-2">
            <div className="h-6 bg-gray-200 rounded w-3/4"></div>
            <div className="h-6 bg-gray-200 rounded w-1/2"></div>
          </div>
          
          {/* Description */}
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded w-full"></div>
            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
          </div>
          
          {/* Rating */}
          <div className="flex items-center space-x-1">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="w-4 h-4 bg-gray-200 rounded"></div>
            ))}
            <div className="h-3 bg-gray-200 rounded w-20 ml-2"></div>
          </div>
          
          {/* Bottom section */}
          <div className="flex items-center justify-between pt-4">
            <div className="flex items-center space-x-3">
              <div className="h-7 bg-gray-200 rounded w-24"></div>
              <div className="h-6 bg-gray-200 rounded w-20"></div>
            </div>
            <div className="flex items-center space-x-3">
              <div className="h-6 bg-gray-200 rounded w-16"></div>
              <div className="h-9 bg-gray-200 rounded w-24"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductList;

==================================================
File: .\src\components\products\ProductFilter.jsx
==================================================

// src/components/products/ProductFilter.jsx
import React, { useState, useEffect } from 'react';
import { useCategories, useBrands } from '../../hooks/useProducts';
import { 
  FunnelIcon, 
  XMarkIcon,
  ChevronDownIcon,
  ChevronUpIcon 
} from '@heroicons/react/24/outline';

const ProductFilter = ({ 
  onFilterChange, 
  initialFilters = {},
  className = '' 
}) => {
  const { categories, loading: categoriesLoading } = useCategories();
  const { brands, loading: brandsLoading } = useBrands();
  
  const [filters, setFilters] = useState({
    priceRange: { min: '', max: '' },
    categories: [],
    brands: [],
    rating: '',
    inStock: false,
    isFeatured: false,
    ...initialFilters
  });

  const [expandedSections, setExpandedSections] = useState({
    price: true,
    categories: true,
    brands: true,
    features: true
  });

  // Predefined price ranges
  const priceRanges = [
    { label: 'D∆∞·ªõi 1 tri·ªáu', min: 0, max: 1000000 },
    { label: '1 - 5 tri·ªáu', min: 1000000, max: 5000000 },
    { label: '5 - 10 tri·ªáu', min: 5000000, max: 10000000 },
    { label: '10 - 20 tri·ªáu', min: 10000000, max: 20000000 },
    { label: 'Tr√™n 20 tri·ªáu', min: 20000000, max: null }
  ];

  const ratings = [
    { label: '5 sao', value: 5 },
    { label: '4 sao tr·ªü l√™n', value: 4 },
    { label: '3 sao tr·ªü l√™n', value: 3 },
    { label: '2 sao tr·ªü l√™n', value: 2 }
  ];

  useEffect(() => {
    onFilterChange?.(filters);
  }, [filters, onFilterChange]);

  const toggleSection = (section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const handlePriceRangeSelect = (range) => {
    setFilters(prev => ({
      ...prev,
      priceRange: { min: range.min || '', max: range.max || '' }
    }));
  };

  const handleCustomPriceChange = (field, value) => {
    setFilters(prev => ({
      ...prev,
      priceRange: {
        ...prev.priceRange,
        [field]: value
      }
    }));
  };

  const handleCategoryToggle = (categoryId) => {
    setFilters(prev => ({
      ...prev,
      categories: prev.categories.includes(categoryId)
        ? prev.categories.filter(id => id !== categoryId)
        : [...prev.categories, categoryId]
    }));
  };

  const handleBrandToggle = (brandId) => {
    setFilters(prev => ({
      ...prev,
      brands: prev.brands.includes(brandId)
        ? prev.brands.filter(id => id !== brandId)
        : [...prev.brands, brandId]
    }));
  };

  const handleFeatureToggle = (feature) => {
    setFilters(prev => ({
      ...prev,
      [feature]: !prev[feature]
    }));
  };

  const handleRatingChange = (rating) => {
    setFilters(prev => ({
      ...prev,
      rating: prev.rating === rating ? '' : rating
    }));
  };

  const clearFilters = () => {
    setFilters({
      priceRange: { min: '', max: '' },
      categories: [],
      brands: [],
      rating: '',
      inStock: false,
      isFeatured: false
    });
  };

  const hasActiveFilters = () => {
    return (
      filters.priceRange.min || 
      filters.priceRange.max || 
      filters.categories.length > 0 || 
      filters.brands.length > 0 || 
      filters.rating || 
      filters.inStock || 
      filters.isFeatured
    );
  };

  const FilterSection = ({ title, children, sectionKey, count = 0 }) => (
    <div className="border-b border-gray-200 last:border-b-0">
      <button
        onClick={() => toggleSection(sectionKey)}
        className="w-full flex items-center justify-between py-4 text-left"
      >
        <div className="flex items-center">
          <span className="font-medium text-gray-900">{title}</span>
          {count > 0 && (
            <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
              {count}
            </span>
          )}
        </div>
        {expandedSections[sectionKey] ? (
          <ChevronUpIcon className="h-4 w-4 text-gray-500" />
        ) : (
          <ChevronDownIcon className="h-4 w-4 text-gray-500" />
        )}
      </button>
      
      {expandedSections[sectionKey] && (
        <div className="pb-4">
          {children}
        </div>
      )}
    </div>
  );

  return (
    <div className={`bg-white rounded-lg shadow-sm border border-gray-200 ${className}`}>
      {/* Header */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <FunnelIcon className="h-5 w-5 text-gray-500 mr-2" />
            <h3 className="font-semibold text-gray-900">B·ªô l·ªçc</h3>
          </div>
          
          {hasActiveFilters() && (
            <button
              onClick={clearFilters}
              className="text-sm text-blue-600 hover:text-blue-700 font-medium"
            >
              X√≥a t·∫•t c·∫£
            </button>
          )}
        </div>
      </div>

      <div className="p-4">
        {/* Price Range Filter */}
        <FilterSection 
          title="Kho·∫£ng gi√°" 
          sectionKey="price"
          count={filters.priceRange.min || filters.priceRange.max ? 1 : 0}
        >
          <div className="space-y-3">
            {/* Predefined ranges */}
            <div className="space-y-2">
              {priceRanges.map((range, index) => (
                <label key={index} className="flex items-center">
                  <input
                    type="radio"
                    name="priceRange"
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    checked={
                      filters.priceRange.min === range.min && 
                      filters.priceRange.max === range.max
                    }
                    onChange={() => handlePriceRangeSelect(range)}
                  />
                  <span className="ml-2 text-sm text-gray-700">{range.label}</span>
                </label>
              ))}
            </div>

            {/* Custom range */}
            <div className="pt-3 border-t border-gray-100">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                T√πy ch·ªânh (VNƒê)
              </label>
              <div className="flex items-center space-x-2">
                <input
                  type="number"
                  placeholder="T·ª´"
                  value={filters.priceRange.min}
                  onChange={(e) => handleCustomPriceChange('min', e.target.value)}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <span className="text-gray-500">-</span>
                <input
                  type="number"
                  placeholder="ƒê·∫øn"
                  value={filters.priceRange.max}
                  onChange={(e) => handleCustomPriceChange('max', e.target.value)}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>
          </div>
        </FilterSection>

        {/* Categories Filter */}
        <FilterSection 
          title="Danh m·ª•c" 
          sectionKey="categories"
          count={filters.categories.length}
        >
          <div className="space-y-2 max-h-48 overflow-y-auto">
            {categoriesLoading ? (
              <div className="space-y-2">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="h-6 bg-gray-200 rounded animate-pulse"></div>
                ))}
              </div>
            ) : (
              categories.map((category) => (
                <label key={category._id} className="flex items-center">
                  <input
                    type="checkbox"
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    checked={filters.categories.includes(category._id)}
                    onChange={() => handleCategoryToggle(category._id)}
                  />
                  <span className="ml-2 text-sm text-gray-700">{category.name}</span>
                </label>
              ))
            )}
          </div>
        </FilterSection>

        {/* Brands Filter */}
        <FilterSection 
          title="Th∆∞∆°ng hi·ªáu" 
          sectionKey="brands"
          count={filters.brands.length}
        >
          <div className="space-y-2 max-h-48 overflow-y-auto">
            {brandsLoading ? (
              <div className="space-y-2">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="h-6 bg-gray-200 rounded animate-pulse"></div>
                ))}
              </div>
            ) : (
              brands.map((brand) => (
                <label key={brand._id} className="flex items-center">
                  <input
                    type="checkbox"
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    checked={filters.brands.includes(brand._id)}
                    onChange={() => handleBrandToggle(brand._id)}
                  />
                  <span className="ml-2 text-sm text-gray-700">{brand.name}</span>
                </label>
              ))
            )}
          </div>
        </FilterSection>

        {/* Rating Filter */}
        <FilterSection 
          title="ƒê√°nh gi√°" 
          sectionKey="rating"
          count={filters.rating ? 1 : 0}
        >
          <div className="space-y-2">
            {ratings.map((rating) => (
              <label key={rating.value} className="flex items-center">
                <input
                  type="radio"
                  name="rating"
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  checked={filters.rating === rating.value}
                  onChange={() => handleRatingChange(rating.value)}
                />
                <span className="ml-2 text-sm text-gray-700 flex items-center">
                  {rating.label}
                  <span className="ml-1 text-yellow-400">
                    {'‚òÖ'.repeat(Math.floor(rating.value))}
                  </span>
                </span>
              </label>
            ))}
          </div>
        </FilterSection>

        {/* Features Filter */}
        <FilterSection 
          title="T√≠nh nƒÉng" 
          sectionKey="features"
          count={(filters.inStock ? 1 : 0) + (filters.isFeatured ? 1 : 0)}
        >
          <div className="space-y-2">
            <label className="flex items-center">
              <input
                type="checkbox"
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                checked={filters.inStock}
                onChange={() => handleFeatureToggle('inStock')}
              />
              <span className="ml-2 text-sm text-gray-700">C√≤n h√†ng</span>
            </label>
            
            <label className="flex items-center">
              <input
                type="checkbox"
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                checked={filters.isFeatured}
                onChange={() => handleFeatureToggle('isFeatured')}
              />
              <span className="ml-2 text-sm text-gray-700">S·∫£n ph·∫©m n·ªïi b·∫≠t</span>
            </label>
          </div>
        </FilterSection>
      </div>

      {/* Apply Button */}
      <div className="p-4 border-t border-gray-200">
        <button
          onClick={() => onFilterChange?.(filters)}
          className="w-full btn btn-primary"
        >
          √Åp d·ª•ng b·ªô l·ªçc
        </button>
      </div>
    </div>
  );
};

export default ProductFilter;

==================================================
File: .\src\components\common\Footer.jsx
==================================================

// src/components/common/Footer.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const Footer = () => {
  const currentYear = new Date().getFullYear();

  const footerSections = [
    {
      title: 'S·∫£n ph·∫©m',
      links: [
        { name: 'T·∫•t c·∫£ s·∫£n ph·∫©m', href: '/products' },
        { name: 'S·∫£n ph·∫©m m·ªõi', href: '/products?sort=newest' },
        { name: 'S·∫£n ph·∫©m b√°n ch·∫°y', href: '/products?sort=bestseller' },
        { name: 'S·∫£n ph·∫©m gi·∫£m gi√°', href: '/products?discount=true' },
      ]
    },
    {
      title: 'Danh m·ª•c',
      links: [
        { name: 'ƒêi·ªán tho·∫°i', href: '/categories/phones' },
        { name: 'Laptop', href: '/categories/laptops' },
        { name: 'Tablet', href: '/categories/tablets' },
        { name: 'Ph·ª• ki·ªán', href: '/categories/accessories' },
      ]
    },
    {
      title: 'H·ªó tr·ª£',
      links: [
        { name: 'Li√™n h·ªá', href: '/contact' },
        { name: 'H∆∞·ªõng d·∫´n mua h√†ng', href: '/help/shopping' },
        { name: 'Ch√≠nh s√°ch ƒë·ªïi tr·∫£', href: '/policies/return' },
        { name: 'B·∫£o h√†nh', href: '/policies/warranty' },
      ]
    },
    {
      title: 'C√¥ng ty',
      links: [
        { name: 'V·ªÅ ch√∫ng t√¥i', href: '/about' },
        { name: 'Tuy·ªÉn d·ª•ng', href: '/careers' },
        { name: 'Tin t·ª©c', href: '/news' },
        { name: 'ƒê·ªëi t√°c', href: '/partners' },
      ]
    }
  ];

  const socialLinks = [
    { name: 'Facebook', href: '#', icon: 'üìò' },
    { name: 'Instagram', href: '#', icon: 'üì∑' },
    { name: 'Twitter', href: '#', icon: 'üê¶' },
    { name: 'YouTube', href: '#', icon: 'üì∫' },
  ];

  return (
    <footer className="bg-gray-900 text-white">
      {/* Main Footer */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8">
          {/* Brand Section */}
          <div className="lg:col-span-1">
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl flex items-center justify-center">
                <span className="text-white font-bold text-lg">S</span>
              </div>
              <div>
                <h3 className="text-xl font-bold">SmartShop</h3>
                <p className="text-gray-400 text-sm">E-commerce Platform</p>
              </div>
            </div>
            <p className="text-gray-400 text-sm mb-6">
              N·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ h√†ng ƒë·∫ßu Vi·ªát Nam, mang ƒë·∫øn tr·∫£i nghi·ªám mua s·∫Øm tuy·ªát v·ªùi v·ªõi h√†ng tri·ªáu s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng.
            </p>
            
            {/* Social Links */}
            <div className="flex space-x-4">
              {socialLinks.map((social) => (
                <a
                  key={social.name}
                  href={social.href}
                  className="w-10 h-10 bg-gray-800 rounded-lg flex items-center justify-center hover:bg-gray-700 transition-colors"
                  title={social.name}
                >
                  <span className="text-lg">{social.icon}</span>
                </a>
              ))}
            </div>
          </div>

          {/* Footer Sections */}
          {footerSections.map((section) => (
            <div key={section.title}>
              <h4 className="font-semibold text-white mb-4">{section.title}</h4>
              <ul className="space-y-3">
                {section.links.map((link) => (
                  <li key={link.name}>
                    <Link
                      to={link.href}
                      className="text-gray-400 hover:text-white transition-colors text-sm"
                    >
                      {link.name}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>

        {/* Newsletter */}
        <div className="border-t border-gray-800 mt-12 pt-8">
          <div className="lg:flex lg:items-center lg:justify-between">
            <div className="lg:w-1/2">
              <h4 className="text-lg font-semibold text-white mb-2">
                ƒêƒÉng k√Ω nh·∫≠n tin khuy·∫øn m√£i
              </h4>
              <p className="text-gray-400 text-sm">
                Nh·∫≠n th√¥ng tin v·ªÅ s·∫£n ph·∫©m m·ªõi v√† ∆∞u ƒë√£i ƒë·∫∑c bi·ªát qua email
              </p>
            </div>
            <div className="mt-4 lg:mt-0 lg:w-1/2 lg:ml-8">
              <form className="sm:flex">
                <input
                  type="email"
                  placeholder="Nh·∫≠p email c·ªßa b·∫°n"
                  className="w-full px-4 py-3 rounded-lg bg-gray-800 border border-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <button
                  type="submit"
                  className="mt-3 sm:mt-0 sm:ml-3 w-full sm:w-auto btn btn-primary"
                >
                  ƒêƒÉng k√Ω
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>

      {/* Bottom Footer */}
      <div className="border-t border-gray-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="md:flex md:items-center md:justify-between">
            <div className="flex flex-col md:flex-row md:items-center space-y-2 md:space-y-0 md:space-x-6">
              <p className="text-gray-400 text-sm">
                ¬© {currentYear} SmartShop. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
              </p>
              <div className="flex space-x-6">
                <Link to="/policies/privacy" className="text-gray-400 hover:text-white text-sm transition-colors">
                  Ch√≠nh s√°ch b·∫£o m·∫≠t
                </Link>
                <Link to="/policies/terms" className="text-gray-400 hover:text-white text-sm transition-colors">
                  ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng
                </Link>
                <Link to="/policies/cookie" className="text-gray-400 hover:text-white text-sm transition-colors">
                  Ch√≠nh s√°ch Cookie
                </Link>
              </div>
            </div>
            
            <div className="mt-4 md:mt-0">
              <div className="flex items-center space-x-4">
                <span className="text-gray-400 text-sm">Ph∆∞∆°ng th·ª©c thanh to√°n:</span>
                <div className="flex space-x-2">
                  <div className="w-8 h-6 bg-gradient-to-r from-blue-600 to-blue-800 rounded flex items-center justify-center">
                    <span className="text-white text-xs font-bold">V</span>
                  </div>
                  <div className="w-8 h-6 bg-gradient-to-r from-red-600 to-orange-600 rounded flex items-center justify-center">
                    <span className="text-white text-xs font-bold">MC</span>
                  </div>
                  <div className="w-8 h-6 bg-gradient-to-r from-purple-600 to-pink-600 rounded flex items-center justify-center">
                    <span className="text-white text-xs font-bold">PP</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

==================================================
File: .\src\components\common\Sidebar.jsx
==================================================

// src/components/common/Sidebar.jsx
import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import {
  HomeIcon,
  CubeIcon,
  TagIcon,
  BuildingStorefrontIcon,
  ShoppingCartIcon,
  UserGroupIcon,
  ChartBarIcon,
  Cog6ToothIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  ChevronDownIcon,
  ChevronUpIcon
} from '@heroicons/react/24/outline';

const Sidebar = ({ 
  isOpen = true, 
  onToggle, 
  type = 'admin' // 'admin', 'filter', 'mobile'
}) => {
  const location = useLocation();
  const { user } = useAuth();
  const [expandedMenus, setExpandedMenus] = useState({});

  const toggleSubmenu = (menuKey) => {
    setExpandedMenus(prev => ({
      ...prev,
      [menuKey]: !prev[menuKey]
    }));
  };

  // Admin Navigation
  const adminNavigation = [
    {
      name: 'Dashboard',
      href: '/admin',
      icon: HomeIcon,
      current: location.pathname === '/admin'
    },
    {
      name: 'S·∫£n ph·∫©m',
      icon: CubeIcon,
      children: [
        { name: 'T·∫•t c·∫£ s·∫£n ph·∫©m', href: '/admin/products' },
        { name: 'Th√™m s·∫£n ph·∫©m', href: '/admin/products/create' },
        { name: 'Qu·∫£n l√Ω kho', href: '/admin/inventory' },
      ]
    },
    {
      name: 'Danh m·ª•c',
      icon: TagIcon,
      children: [
        { name: 'T·∫•t c·∫£ danh m·ª•c', href: '/admin/categories' },
        { name: 'Th√™m danh m·ª•c', href: '/admin/categories/create' },
      ]
    },
    {
      name: 'Th∆∞∆°ng hi·ªáu',
      icon: BuildingStorefrontIcon,
      children: [
        { name: 'T·∫•t c·∫£ th∆∞∆°ng hi·ªáu', href: '/admin/brands' },
        { name: 'Th√™m th∆∞∆°ng hi·ªáu', href: '/admin/brands/create' },
      ]
    },
    {
      name: 'ƒê∆°n h√†ng',
      href: '/admin/orders',
      icon: ShoppingCartIcon,
      current: location.pathname.startsWith('/admin/orders')
    },
    {
      name: 'Ng∆∞·ªùi d√πng',
      href: '/admin/users',
      icon: UserGroupIcon,
      current: location.pathname.startsWith('/admin/users')
    },
    {
      name: 'B√°o c√°o',
      icon: ChartBarIcon,
      children: [
        { name: 'Doanh thu', href: '/admin/reports/revenue' },
        { name: 'S·∫£n ph·∫©m b√°n ch·∫°y', href: '/admin/reports/bestsellers' },
        { name: 'Kh√°ch h√†ng', href: '/admin/reports/customers' },
      ]
    },
    {
      name: 'C√†i ƒë·∫∑t',
      href: '/admin/settings',
      icon: Cog6ToothIcon,
      current: location.pathname.startsWith('/admin/settings')
    },
  ];

  // Filter Sidebar (cho trang products)
  const FilterSidebar = () => (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
      <h3 className="font-semibold text-gray-900 mb-4">B·ªô l·ªçc</h3>
      
      {/* Price Range */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-700 mb-3">Kho·∫£ng gi√°</h4>
        <div className="space-y-2">
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">D∆∞·ªõi 1 tri·ªáu</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">1 - 5 tri·ªáu</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">5 - 10 tri·ªáu</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Tr√™n 10 tri·ªáu</span>
          </label>
        </div>
      </div>

      {/* Categories */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-700 mb-3">Danh m·ª•c</h4>
        <div className="space-y-2">
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">ƒêi·ªán tho·∫°i</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Laptop</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Tablet</span>
          </label>
        </div>
      </div>

      {/* Brands */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-700 mb-3">Th∆∞∆°ng hi·ªáu</h4>
        <div className="space-y-2">
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Apple</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Samsung</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">Xiaomi</span>
          </label>
        </div>
      </div>

      {/* Rating */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-700 mb-3">ƒê√°nh gi√°</h4>
        <div className="space-y-2">
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5 sao</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">‚≠ê‚≠ê‚≠ê‚≠ê 4 sao tr·ªü l√™n</span>
          </label>
          <label className="flex items-center">
            <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
            <span className="ml-2 text-sm text-gray-600">‚≠ê‚≠ê‚≠ê 3 sao tr·ªü l√™n</span>
          </label>
        </div>
      </div>

      <button className="w-full btn btn-primary">
        √Åp d·ª•ng b·ªô l·ªçc
      </button>
    </div>
  );

  // Admin Sidebar
  const AdminSidebar = () => (
    <div className={`${isOpen ? 'w-64' : 'w-16'} bg-white border-r border-gray-200 transition-all duration-300 flex flex-col`}>
      {/* Header */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          {isOpen && (
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">S</span>
              </div>
              <div>
                <h2 className="font-semibold text-gray-900">Admin Panel</h2>
                <p className="text-xs text-gray-500">SmartShop</p>
              </div>
            </div>
          )}
          
          {onToggle && (
            <button
              onClick={onToggle}
              className="p-1 rounded-lg hover:bg-gray-100 transition-colors"
            >
              {isOpen ? (
                <ChevronLeftIcon className="h-4 w-4 text-gray-500" />
              ) : (
                <ChevronRightIcon className="h-4 w-4 text-gray-500" />
              )}
            </button>
          )}
        </div>
      </div>

      {/* User Info */}
      {isOpen && (
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
              {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}
            </div>
            <div className="flex-1 min-w-0">
              <p className="font-medium text-gray-900 text-sm truncate">
                {user?.firstName} {user?.lastName}
              </p>
              <p className="text-xs text-gray-500 truncate">{user?.email}</p>
              <span className="inline-block px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full mt-1">
                {user?.role}
              </span>
            </div>
          </div>
        </div>
      )}

      {/* Navigation */}
      <nav className="flex-1 overflow-y-auto py-4">
        <div className="space-y-1 px-2">
          {adminNavigation.map((item) => {
            if (item.children) {
              const isExpanded = expandedMenus[item.name];
              return (
                <div key={item.name}>
                  <button
                    onClick={() => toggleSubmenu(item.name)}
                    className={`w-full flex items-center justify-between px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                      isExpanded 
                        ? 'bg-gray-100 text-gray-900' 
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                    }`}
                  >
                    <div className="flex items-center">
                      <item.icon className="h-5 w-5 mr-3" />
                      {isOpen && <span>{item.name}</span>}
                    </div>
                    {isOpen && (
                      isExpanded ? (
                        <ChevronUpIcon className="h-4 w-4" />
                      ) : (
                        <ChevronDownIcon className="h-4 w-4" />
                      )
                    )}
                  </button>
                  
                  {isOpen && isExpanded && (
                    <div className="mt-1 space-y-1">
                      {item.children.map((child) => (
                        <Link
                          key={child.name}
                          to={child.href}
                          className={`block px-6 py-2 text-sm rounded-lg transition-colors ${
                            location.pathname === child.href
                              ? 'bg-blue-100 text-blue-700'
                              : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                          }`}
                        >
                          {child.name}
                        </Link>
                      ))}
                    </div>
                  )}
                </div>
              );
            }

            return (
              <Link
                key={item.name}
                to={item.href}
                className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                  item.current
                    ? 'bg-blue-100 text-blue-700'
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                }`}
              >
                <item.icon className="h-5 w-5 mr-3" />
                {isOpen && <span>{item.name}</span>}
              </Link>
            );
          })}
        </div>
      </nav>

      {/* Footer */}
      {isOpen && (
        <div className="p-4 border-t border-gray-200">
          <div className="text-xs text-gray-500 text-center">
            SmartShop Admin v1.0.0
          </div>
        </div>
      )}
    </div>
  );

  // Render based on type
  switch (type) {
    case 'filter':
      return <FilterSidebar />;
    case 'admin':
      return <AdminSidebar />;
    default:
      return <AdminSidebar />;
  }
};

export default Sidebar;

==================================================
File: .\src\components\common\Layout.jsx
==================================================

// src/components/common/Layout.jsx
import React from 'react';
import Header from './Header';
import Footer from './Footer';

const Layout = ({ 
  children, 
  showHeader = true, 
  showFooter = true, 
  containerClass = "min-h-screen bg-gray-50",
  contentClass = "flex-1" 
}) => {
  return (
    <div className={containerClass}>
      {showHeader && <Header />}
      
      <main className={contentClass}>
        {children}
      </main>
      
      {showFooter && <Footer />}
    </div>
  );
};

// Specialized Layout variants
export const AuthLayout = ({ children }) => (
  <Layout 
    showHeader={false} 
    showFooter={false}
    containerClass="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50"
    contentClass="flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8"
  >
    {children}
  </Layout>
);

export const AdminLayout = ({ children }) => (
  <Layout 
    showFooter={false}
    containerClass="min-h-screen bg-gray-100"
    contentClass="flex-1"
  >
    {children}
  </Layout>
);

export const ShopLayout = ({ children }) => (
  <Layout 
    containerClass="min-h-screen bg-white"
    contentClass="flex-1"
  >
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {children}
    </div>
  </Layout>
);

export const CheckoutLayout = ({ children }) => (
  <Layout 
    showFooter={false}
    containerClass="min-h-screen bg-gray-50"
    contentClass="flex-1"
  >
    {children}
  </Layout>
);

export default Layout;

==================================================
File: .\src\components\common\Header.jsx
==================================================

// src/components/common/Header.jsx
import React, { useState } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import {
  MagnifyingGlassIcon,
  ShoppingCartIcon,
  UserIcon,
  BellIcon,
  Bars3Icon,
  XMarkIcon,
  HeartIcon,
  Cog6ToothIcon,
  ArrowRightOnRectangleIcon,
  ChartBarIcon
} from '@heroicons/react/24/outline';

const Header = () => {
  const { user, logout, isAuthenticated } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const [showUserMenu, setShowUserMenu] = useState(false);
  const [showMobileMenu, setShowMobileMenu] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  const handleLogout = () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?')) {
      logout();
      setShowUserMenu(false);
    }
  };

  const handleSearch = (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      navigate(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
      setSearchQuery('');
    }
  };

  const getRoleColor = (role) => {
    switch (role) {
      case 'admin': return 'bg-red-100 text-red-800';
      case 'manager': return 'bg-blue-100 text-blue-800';
      case 'customer': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getRoleIcon = (role) => {
    switch (role) {
      case 'admin': return 'üëë';
      case 'manager': return 'üë®‚Äçüíº';
      case 'customer': return 'üë§';
      default: return 'üë§';
    }
  };

  const navigation = [
    { name: 'Trang ch·ªß', href: '/', current: location.pathname === '/' },
    { name: 'S·∫£n ph·∫©m', href: '/products', current: location.pathname === '/products' },
    { name: 'Danh m·ª•c', href: '/categories', current: location.pathname === '/categories' },
    { name: 'Th∆∞∆°ng hi·ªáu', href: '/brands', current: location.pathname === '/brands' },
  ];

  return (
    <header className="bg-white/95 backdrop-blur-md shadow-sm border-b border-gray-200/50 sticky top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo & Brand */}
          <div className="flex items-center">
            <Link to="/" className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">S</span>
              </div>
              <div className="hidden sm:block">
                <h1 className="text-xl font-bold text-gradient">SmartShop</h1>
              </div>
            </Link>
          </div>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex space-x-8">
            {navigation.map((item) => (
              <Link
                key={item.name}
                to={item.href}
                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                  item.current
                    ? 'bg-blue-100 text-blue-700'
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                }`}
              >
                {item.name}
              </Link>
            ))}
          </nav>

          {/* Search Bar */}
          <div className="hidden lg:flex flex-1 max-w-lg mx-8">
            <form onSubmit={handleSearch} className="w-full">
              <div className="relative">
                <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50/80 text-sm"
                />
              </div>
            </form>
          </div>

          {/* Right Section */}
          <div className="flex items-center space-x-4">
            {isAuthenticated ? (
              <>
                {/* Cart Icon */}
                <Link
                  to="/cart"
                  className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <ShoppingCartIcon className="h-5 w-5" />
                  <span className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                    3
                  </span>
                </Link>

                {/* Wishlist Icon */}
                <Link
                  to="/wishlist"
                  className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <HeartIcon className="h-5 w-5" />
                  <span className="absolute -top-1 -right-1 h-4 w-4 bg-pink-500 text-white text-xs rounded-full flex items-center justify-center">
                    5
                  </span>
                </Link>

                {/* Notifications */}
                <button className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors">
                  <BellIcon className="h-5 w-5" />
                  <span className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                    2
                  </span>
                </button>

                {/* User Menu */}
                <div className="relative">
                  <button
                    onClick={() => setShowUserMenu(!showUserMenu)}
                    className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 transition-colors"
                  >
                    <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
                      {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}
                    </div>
                    <div className="hidden md:block text-left">
                      <p className="text-sm font-medium text-gray-900">
                        {user?.firstName} {user?.lastName}
                      </p>
                    </div>
                  </button>

                  {/* User Dropdown */}
                  {showUserMenu && (
                    <div className="absolute right-0 mt-2 w-64 bg-white rounded-xl shadow-lg border border-gray-200 py-2 z-50">
                      {/* User Info */}
                      <div className="px-4 py-3 border-b border-gray-100">
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white font-semibold">
                            {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}
                          </div>
                          <div className="flex-1">
                            <p className="font-medium text-gray-900 text-sm">
                              {user?.firstName} {user?.lastName}
                            </p>
                            <p className="text-xs text-gray-500">{user?.email}</p>
                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${getRoleColor(user?.role)}`}>
                              {getRoleIcon(user?.role)} {user?.role}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* Menu Items */}
                      <div className="py-1">
                        <Link
                          to="/profile"
                          className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                          onClick={() => setShowUserMenu(false)}
                        >
                          <UserIcon className="h-4 w-4 mr-3" />
                          Th√¥ng tin c√° nh√¢n
                        </Link>
                        <Link
                          to="/orders"
                          className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                          onClick={() => setShowUserMenu(false)}
                        >
                          <span className="w-4 h-4 mr-3 text-center">üì¶</span>
                          ƒê∆°n h√†ng c·ªßa t√¥i
                        </Link>
                        <Link
                          to="/settings"
                          className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                          onClick={() => setShowUserMenu(false)}
                        >
                          <Cog6ToothIcon className="h-4 w-4 mr-3" />
                          C√†i ƒë·∫∑t
                        </Link>
                        {(user?.role === 'admin' || user?.role === 'manager') && (
                          <Link
                            to="/admin"
                            className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                            onClick={() => setShowUserMenu(false)}
                          >
                            <ChartBarIcon className="h-4 w-4 mr-3" />
                            Qu·∫£n tr·ªã
                          </Link>
                        )}
                      </div>

                      {/* Logout */}
                      <div className="border-t border-gray-100 py-1">
                        <button
                          onClick={handleLogout}
                          className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                        >
                          <ArrowRightOnRectangleIcon className="h-4 w-4 mr-3" />
                          ƒêƒÉng xu·∫•t
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </>
            ) : (
              /* Auth Links */
              <div className="flex items-center space-x-4">
                <Link
                  to="/login"
                  className="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
                >
                  ƒêƒÉng nh·∫≠p
                </Link>
                <Link
                  to="/register"
                  className="btn btn-primary"
                >
                  ƒêƒÉng k√Ω
                </Link>
              </div>
            )}

            {/* Mobile menu button */}
            <button
              onClick={() => setShowMobileMenu(!showMobileMenu)}
              className="md:hidden p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg"
            >
              {showMobileMenu ? (
                <XMarkIcon className="h-5 w-5" />
              ) : (
                <Bars3Icon className="h-5 w-5" />
              )}
            </button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {showMobileMenu && (
          <div className="md:hidden border-t border-gray-200 py-4">
            {/* Mobile Search */}
            <div className="mb-4">
              <form onSubmit={handleSearch}>
                <div className="relative">
                  <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <input
                    type="text"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="T√¨m ki·∫øm..."
                    className="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50"
                  />
                </div>
              </form>
            </div>

            {/* Mobile Menu Items */}
            <div className="space-y-2">
              {navigation.map((item) => (
                <Link
                  key={item.name}
                  to={item.href}
                  className={`block px-3 py-2 rounded-md text-base font-medium ${
                    item.current
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                  }`}
                  onClick={() => setShowMobileMenu(false)}
                >
                  {item.name}
                </Link>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Click outside to close menus */}
      {(showUserMenu || showMobileMenu) && (
        <div 
          className="fixed inset-0 z-40" 
          onClick={() => {
            setShowUserMenu(false);
            setShowMobileMenu(false);
          }}
        />
      )}
    </header>
  );
};

export default Header;

==================================================
File: .\src\assets\react.svg
==================================================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

==================================================
File: .\src\pages\ProductsPage.jsx
==================================================

// src/pages/ProductsPage.jsx
import React, { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import Layout from '../components/common/Layout';
import ProductList from '../components/products/ProductList';
import ProductFilter from '../components/products/ProductFilter';
import ProductSearch from '../components/products/ProductSearch';
import ProtectedRoute from '../components/auth/ProtectedRoute';
import { useProducts } from '../hooks/useProducts';



import { 
  FunnelIcon, 
  Squares2X2Icon, 
  ListBulletIcon,
  AdjustmentsHorizontalIcon,
  XMarkIcon 
} from '@heroicons/react/24/outline';

const ProductsPage = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  
  // State management
  const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'list'
  const [sortBy, setSortBy] = useState('CREATED_DESC');
  const [showFilters, setShowFilters] = useState(false);
  const [showMobileSearch, setShowMobileSearch] = useState(false);
  const [filters, setFilters] = useState({
    priceRange: { min: '', max: '' },
    categories: [],
    brands: [],
    rating: '',
    inStock: false,
    isFeatured: false
  });

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(12);

  // Get initial search from URL
  const initialSearch = searchParams.get('q') || '';
  
  // Build GraphQL condition t·ª´ filters
  const buildCondition = () => {
    const condition = {};
    
    // Price range
    if (filters.priceRange.min || filters.priceRange.max) {
      condition.price = {};
      if (filters.priceRange.min) condition.price.min = parseFloat(filters.priceRange.min);
      if (filters.priceRange.max) condition.price.max = parseFloat(filters.priceRange.max);
    }
    
    // Categories
    if (filters.categories.length > 0) {
      condition.category = filters.categories[0]; // Single category for now
    }
    
    // Brands  
    if (filters.brands.length > 0) {
      condition.brand = filters.brands[0]; // Single brand for now
    }
    
    // Features
    if (filters.isFeatured) {
      condition.isFeatured = true;
    }
    
    // Search term
    if (initialSearch) {
      condition.name = initialSearch;
    }
    
    return Object.keys(condition).length > 0 ? condition : null;
  };

  // Fetch products v·ªõi GraphQL
  const {
    products,
    totalCount,
    hasNextPage,
    hasPreviousPage,
    loading,
    error,
    loadMore,
    refetch
  } = useProducts({
    first: itemsPerPage,
    offset: (currentPage - 1) * itemsPerPage,
    orderBy: sortBy,
    condition: buildCondition(),
    skip: false
  });

  // Sort options
  const sortOptions = [
    { value: 'CREATED_DESC', label: 'M·ªõi nh·∫•t' },
    { value: 'CREATED_ASC', label: 'C≈© nh·∫•t' },
    { value: 'PRICE_ASC', label: 'Gi√° th·∫•p ƒë·∫øn cao' },
    { value: 'PRICE_DESC', label: 'Gi√° cao ƒë·∫øn th·∫•p' },
    { value: 'NAME_ASC', label: 'T√™n A-Z' },
    { value: 'NAME_DESC', label: 'T√™n Z-A' },
  ];

  // Handle filter changes
  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
    setCurrentPage(1); // Reset to first page
  };

  // Handle sort change
  const handleSortChange = (newSort) => {
    setSortBy(newSort);
    setCurrentPage(1); // Reset to first page
  };

  // Handle search from search component
  const handleSearchSubmit = (query) => {
    // Update URL with search params
    if (query.trim()) {
      setSearchParams({ q: query.trim() });
    } else {
      setSearchParams({});
    }
    setCurrentPage(1); // Reset to first page
    setShowMobileSearch(false);
  };

  // Calculate pagination
  const totalPages = Math.ceil(totalCount / itemsPerPage);
  const startItem = ((currentPage - 1) * itemsPerPage) + 1;
  const endItem = Math.min(currentPage * itemsPerPage, totalCount);

  // Handle pagination
  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  };

  // Load more for infinite scroll (alternative to pagination)
  const handleLoadMore = () => {
    if (hasNextPage && !loading) {
      loadMore();
    }
  };

  // Clear all filters
  const clearAllFilters = () => {
    setFilters({
      priceRange: { min: '', max: '' },
      categories: [],
      brands: [],
      rating: '',
      inStock: false,
      isFeatured: false
    });
    setSearchParams({});
    setCurrentPage(1);
  };

  // Check if any filters are active
  const hasActiveFilters = () => {
    return (
      filters.priceRange.min || 
      filters.priceRange.max || 
      filters.categories.length > 0 || 
      filters.brands.length > 0 || 
      filters.rating || 
      filters.inStock || 
      filters.isFeatured ||
      initialSearch
    );
  };

  // Refetch when dependencies change
  useEffect(() => {
    refetch();
  }, [sortBy, filters, currentPage, refetch]);

  return (
    <ProtectedRoute>
      <Layout>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Page Header */}
          <div className="mb-8">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">
                  {initialSearch ? `K·∫øt qu·∫£ t√¨m ki·∫øm: "${initialSearch}"` : 'S·∫£n ph·∫©m'}
                </h1>
                <p className="text-gray-600 mt-1">
                  {loading ? 'ƒêang t·∫£i...' : `T√¨m th·∫•y ${totalCount.toLocaleString()} s·∫£n ph·∫©m`}
                </p>
              </div>
              
              {/* Desktop Search */}
              <div className="hidden md:block w-96">
                <ProductSearch 
                  placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
                  onSearchSubmit={handleSearchSubmit}
                />
              </div>
            </div>

            {/* Mobile Search Toggle */}
            <div className="md:hidden mt-4">
              <button
                onClick={() => setShowMobileSearch(!showMobileSearch)}
                className="w-full btn btn-secondary justify-center"
              >
                üîç T√¨m ki·∫øm s·∫£n ph·∫©m
              </button>
              
              {showMobileSearch && (
                <div className="mt-4">
                  <ProductSearch 
                    placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
                    onSearchSubmit={handleSearchSubmit}
                  />
                </div>
              )}
            </div>
          </div>

          {/* Controls Bar */}
          <div className="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div className="flex items-center space-x-4">
              {/* Results Info */}
              <div className="text-sm text-gray-600">
                {totalCount > 0 && (
                  <span>
                    Hi·ªÉn th·ªã {startItem.toLocaleString()}-{endItem.toLocaleString()} 
                    trong s·ªë {totalCount.toLocaleString()} s·∫£n ph·∫©m
                  </span>
                )}
              </div>

              {/* Clear Filters */}
              {hasActiveFilters() && (
                <button
                  onClick={clearAllFilters}
                  className="flex items-center text-sm text-red-600 hover:text-red-700"
                >
                  <XMarkIcon className="h-4 w-4 mr-1" />
                  X√≥a b·ªô l·ªçc
                </button>
              )}
            </div>

            <div className="flex items-center space-x-4">
              {/* Sort Dropdown */}
              <div className="flex items-center space-x-2">
                <label className="text-sm font-medium text-gray-700 whitespace-nowrap">
                  S·∫Øp x·∫øp:
                </label>
                <select
                  value={sortBy}
                  onChange={(e) => handleSortChange(e.target.value)}
                  className="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white"
                >
                  {sortOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* View Mode Toggle */}
              <div className="flex items-center border border-gray-300 rounded-lg overflow-hidden">
                <button
                  onClick={() => setViewMode('grid')}
                  className={`p-2 ${viewMode === 'grid' 
                    ? 'bg-blue-100 text-blue-600' 
                    : 'text-gray-600 hover:bg-gray-50'
                  }`}
                  title="L∆∞·ªõi"
                >
                  <Squares2X2Icon className="h-4 w-4" />
                </button>
                <button
                  onClick={() => setViewMode('list')}
                  className={`p-2 ${viewMode === 'list' 
                    ? 'bg-blue-100 text-blue-600' 
                    : 'text-gray-600 hover:bg-gray-50'
                  }`}
                  title="Danh s√°ch"
                >
                  <ListBulletIcon className="h-4 w-4" />
                </button>
              </div>

              {/* Filter Toggle (Mobile) */}
              <button
                onClick={() => setShowFilters(!showFilters)}
                className="md:hidden flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50"
              >
                <FunnelIcon className="h-4 w-4" />
                <span>B·ªô l·ªçc</span>
                {hasActiveFilters() && (
                  <span className="ml-1 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                    ‚Ä¢
                  </span>
                )}
              </button>
            </div>
          </div>

          <div className="flex gap-8">
            {/* Sidebar Filters - Desktop */}
            <div className="hidden md:block w-64 flex-shrink-0">
              <div className="sticky top-8">
                <ProductFilter 
                  onFilterChange={handleFilterChange}
                  initialFilters={filters}
                />
              </div>
            </div>

            {/* Mobile Filters Modal */}
            {showFilters && (
              <div className="md:hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex">
                <div className="bg-white w-80 h-full overflow-y-auto">
                  <div className="p-4 border-b border-gray-200">
                    <div className="flex items-center justify-between">
                      <h3 className="text-lg font-semibold">B·ªô l·ªçc s·∫£n ph·∫©m</h3>
                      <button
                        onClick={() => setShowFilters(false)}
                        className="text-gray-500 hover:text-gray-700"
                      >
                        <XMarkIcon className="h-6 w-6" />
                      </button>
                    </div>
                  </div>
                  <ProductFilter 
                    onFilterChange={handleFilterChange}
                    initialFilters={filters}
                  />
                </div>
                <div 
                  className="flex-1" 
                  onClick={() => setShowFilters(false)} 
                />
              </div>
            )}

            {/* Main Content */}
            <div className="flex-1 min-w-0">
              {/* Error State */}
              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                  <div className="flex items-center">
                    <div className="text-red-600 mr-3">‚ö†Ô∏è</div>
                    <div>
                      <h3 className="text-sm font-medium text-red-800">
                        L·ªói khi t·∫£i s·∫£n ph·∫©m
                      </h3>
                      <p className="text-sm text-red-700 mt-1">
                        {error.message || 'Vui l√≤ng th·ª≠ l·∫°i sau'}
                      </p>
                    </div>
                    <button
                      onClick={() => refetch()}
                      className="ml-auto btn btn-sm btn-secondary"
                    >
                      Th·ª≠ l·∫°i
                    </button>
                  </div>
                </div>
              )}

              {/* Products List */}
              <ProductList
                products={products}
                loading={loading}
                viewMode={viewMode}
                showLoadMore={false} // We'll use pagination instead
                onLoadMore={handleLoadMore}
                hasNextPage={hasNextPage}
                loadingMore={false}
              />

              {/* Pagination */}
              {totalPages > 1 && !loading && (
                <div className="mt-12 flex justify-center">
                  <nav className="flex items-center space-x-2">
                    {/* Previous Button */}
                    <button
                      onClick={() => handlePageChange(currentPage - 1)}
                      disabled={currentPage === 1}
                      className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      Tr∆∞·ªõc
                    </button>

                    {/* Page Numbers */}
                    {Array.from({ length: Math.min(totalPages, 7) }, (_, i) => {
                      let pageNum;
                      if (totalPages <= 7) {
                        pageNum = i + 1;
                      } else if (currentPage <= 3) {
                        pageNum = i + 1;
                      } else if (currentPage >= totalPages - 2) {
                        pageNum = totalPages - 6 + i;
                      } else {
                        pageNum = currentPage - 3 + i;
                      }

                      return (
                        <button
                          key={pageNum}
                          onClick={() => handlePageChange(pageNum)}
                          className={`px-3 py-2 text-sm rounded-lg ${
                            currentPage === pageNum
                              ? 'bg-blue-600 text-white'
                              : 'border border-gray-300 hover:bg-gray-50'
                          }`}
                        >
                          {pageNum}
                        </button>
                      );
                    })}

                    {/* Next Button */}
                    <button
                      onClick={() => handlePageChange(currentPage + 1)}
                      disabled={currentPage === totalPages}
                      className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      Sau
                    </button>
                  </nav>
                </div>
              )}

              {/* Load More Button (Alternative) */}
              {hasNextPage && products.length > 0 && (
                <div className="mt-8 text-center">
                  <button
                    onClick={handleLoadMore}
                    disabled={loading}
                    className="btn btn-secondary px-8 py-3"
                  >
                    {loading ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600 mr-2"></div>
                        ƒêang t·∫£i...
                      </>
                    ) : (
                      'Xem th√™m s·∫£n ph·∫©m'
                    )}
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      </Layout>
    </ProtectedRoute>
  );
};

export default ProductsPage;

==================================================
File: .\src\pages\CartPage.jsx
==================================================



==================================================
File: .\src\pages\RegisterPage.jsx
==================================================

// src/pages/RegisterPage.jsx
import React from 'react';
import RegisterForm from '../components/auth/RegisterForm';
import { AuthLayout } from '../components/common/Layout';
import { GuestRoute } from '../components/auth/ProtectedRoute';

const RegisterPage = () => {
  return (
    <GuestRoute>
      <AuthLayout>
        <RegisterForm />
      </AuthLayout>
    </GuestRoute>
  );
};

export default RegisterPage;

==================================================
File: .\src\pages\HomePage.jsx
==================================================

// src/pages/HomePage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import Layout from '../components/common/Layout';
import { 
  CubeIcon, 
  ShoppingCartIcon, 
  ChartBarIcon,
  TagIcon,
  BuildingStorefrontIcon,
  HeartIcon,
  TruckIcon,
  ShieldCheckIcon
} from '@heroicons/react/24/outline';

const HomePage = () => {
  const { user } = useAuth();

  const features = [
    {
      name: 'S·∫£n ph·∫©m',
      description: 'Kh√°m ph√° h√†ng ngh√¨n s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao',
      icon: CubeIcon,
      href: '/products',
      color: 'blue'
    },
    {
      name: 'Danh m·ª•c',
      description: 'Duy·ªát theo c√°c danh m·ª•c s·∫£n ph·∫©m',
      icon: TagIcon,
      href: '/categories',
      color: 'purple'
    },
    {
      name: 'Th∆∞∆°ng hi·ªáu',
      description: 'C√°c th∆∞∆°ng hi·ªáu uy t√≠n h√†ng ƒë·∫ßu',
      icon: BuildingStorefrontIcon,
      href: '/brands',
      color: 'green'
    },
    {
      name: 'Gi·ªè h√†ng',
      description: 'Qu·∫£n l√Ω gi·ªè h√†ng c·ªßa b·∫°n',
      icon: ShoppingCartIcon,
      href: '/cart',
      color: 'yellow'
    },
    {
      name: 'Y√™u th√≠ch',
      description: 'S·∫£n ph·∫©m b·∫°n ƒë√£ l∆∞u',
      icon: HeartIcon,
      href: '/wishlist',
      color: 'pink'
    },
    {
      name: 'ƒê∆°n h√†ng',
      description: 'Theo d√µi tr·∫°ng th√°i ƒë∆°n h√†ng',
      icon: TruckIcon,
      href: '/orders',
      color: 'indigo'
    }
  ];

  const benefits = [
    {
      title: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn',
      description: 'Cho ƒë∆°n h√†ng tr√™n 500,000ƒë',
      icon: 'üöö'
    },
    {
      title: 'B·∫£o h√†nh ch√≠nh h√£ng',
      description: 'Cam k·∫øt 100% h√†ng ch√≠nh h√£ng',
      icon: 'üõ°Ô∏è'
    },
    {
      title: 'ƒê·ªïi tr·∫£ d·ªÖ d√†ng',
      description: 'Trong v√≤ng 30 ng√†y',
      icon: 'üîÑ'
    },
    {
      title: 'H·ªó tr·ª£ 24/7',
      description: 'T∆∞ v·∫•n m·ªçi l√∫c m·ªçi n∆°i',
      icon: 'üí¨'
    }
  ];

  const getColorClasses = (color) => {
    const colors = {
      blue: 'bg-blue-100 text-blue-600 hover:bg-blue-200',
      purple: 'bg-purple-100 text-purple-600 hover:bg-purple-200',
      green: 'bg-green-100 text-green-600 hover:bg-green-200',
      yellow: 'bg-yellow-100 text-yellow-600 hover:bg-yellow-200',
      pink: 'bg-pink-100 text-pink-600 hover:bg-pink-200',
      indigo: 'bg-indigo-100 text-indigo-600 hover:bg-indigo-200'
    };
    return colors[color] || colors.blue;
  };

  return (
    <Layout>
      {/* Hero Section */}
      <section className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <div className="text-center">
            <h1 className="text-4xl md:text-6xl font-bold mb-6">
              Ch√†o m·ª´ng ƒë·∫øn v·ªõi <span className="text-yellow-300">SmartShop</span>
            </h1>
            <p className="text-xl md:text-2xl mb-8 text-blue-100">
              N·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ hi·ªán ƒë·∫°i v·ªõi h√†ng tri·ªáu s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link
                to="/products"
                className="px-8 py-4 bg-white text-blue-600 rounded-xl font-semibold hover:bg-blue-50 transition-colors"
              >
                Kh√°m ph√° s·∫£n ph·∫©m
              </Link>
              <Link
                to="/register"
                className="px-8 py-4 bg-transparent border-2 border-white text-white rounded-xl font-semibold hover:bg-white hover:text-blue-600 transition-colors"
              >
                T·∫°o t√†i kho·∫£n mi·ªÖn ph√≠
              </Link>
            </div>
          </div>
        </div>
      </section>

      {/* User Welcome */}
      {user && (
        <section className="bg-white border-b border-gray-200">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold text-gray-900 mb-2">
                    Xin ch√†o, {user.firstName}! üëã
                  </h2>
                  <p className="text-gray-600">
                    S·∫µn s√†ng kh√°m ph√° nh·ªØng s·∫£n ph·∫©m m·ªõi h√¥m nay?
                  </p>
                </div>
                {(user.role === 'admin' || user.role === 'manager') && (
                  <Link
                    to="/admin"
                    className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-purple-700 transition-all"
                  >
                    üöÄ Admin Panel
                  </Link>
                )}
              </div>
            </div>
          </div>
        </section>
      )}

      {/* Features Grid */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              T√≠nh nƒÉng n·ªïi b·∫≠t
            </h2>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Kh√°m ph√° ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng c·ªßa SmartShop ƒë·ªÉ c√≥ tr·∫£i nghi·ªám mua s·∫Øm tuy·ªát v·ªùi nh·∫•t
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature) => (
              <Link
                key={feature.name}
                to={feature.href}
                className="group bg-white rounded-xl p-6 shadow-sm border border-gray-200 hover:shadow-md transition-all duration-200 hover:scale-105"
              >
                <div className={`w-12 h-12 rounded-lg flex items-center justify-center mb-4 transition-colors ${getColorClasses(feature.color)}`}>
                  <feature.icon className="h-6 w-6" />
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                  {feature.name}
                </h3>
                <p className="text-gray-600 text-sm">
                  {feature.description}
                </p>
                <div className="mt-4 flex items-center text-blue-600 text-sm font-medium">
                  Xem ngay
                  <span className="ml-1 group-hover:translate-x-1 transition-transform">‚Üí</span>
                </div>
              </Link>
            ))}
          </div>
        </div>
      </section>

      {/* Benefits */}
      <section className="py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              T·∫°i sao ch·ªçn SmartShop?
            </h2>
            <p className="text-gray-600">
              Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn tr·∫£i nghi·ªám mua s·∫Øm t·ªët nh·∫•t
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {benefits.map((benefit, index) => (
              <div key={index} className="text-center">
                <div className="w-16 h-16 bg-gradient-to-r from-blue-100 to-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">{benefit.icon}</span>
                </div>
                <h3 className="font-semibold text-gray-900 mb-2">
                  {benefit.title}
                </h3>
                <p className="text-gray-600 text-sm">
                  {benefit.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-gradient-to-r from-gray-900 to-gray-800 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl font-bold mb-4">
            B·∫Øt ƒë·∫ßu mua s·∫Øm ngay h√¥m nay!
          </h2>
          <p className="text-gray-300 mb-8 max-w-2xl mx-auto">
            Tham gia c√πng h√†ng tri·ªáu kh√°ch h√†ng ƒë√£ tin t∆∞·ªüng SmartShop. 
            ƒêƒÉng k√Ω ngay ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i ƒë·∫∑c bi·ªát cho th√†nh vi√™n m·ªõi.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link
              to="/products"
              className="px-8 py-4 bg-blue-600 text-white rounded-xl font-semibold hover:bg-blue-700 transition-colors"
            >
              Mua s·∫Øm ngay
            </Link>
            {!user && (
              <Link
                to="/register"
                className="px-8 py-4 bg-transparent border-2 border-white text-white rounded-xl font-semibold hover:bg-white hover:text-gray-900 transition-colors"
              >
                ƒêƒÉng k√Ω mi·ªÖn ph√≠
              </Link>
            )}
          </div>
        </div>
      </section>
    </Layout>
  );
};

export default HomePage;

==================================================
File: .\src\pages\BrandsPage.jsx
==================================================



==================================================
File: .\src\pages\CategoriesPage.jsx
==================================================



==================================================
File: .\src\pages\LoginPage.jsx
==================================================

import React from 'react';
import LoginForm from '../components/auth/LoginForm';
import { GuestRoute } from '../components/auth/ProtectedRoute';
import { AuthLayout } from '../components/common/Layout';

const LoginPage = () => {
  return (
    <GuestRoute>
      <AuthLayout>
        <LoginForm />
      </AuthLayout>
    </GuestRoute>
  );
};

export default LoginPage;


==================================================
File: .\src\pages\NotFoundPage.jsx
==================================================

// src/pages/NotFoundPage.jsx
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const NotFoundPage = () => {
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();

  const handleGoBack = () => {
    navigate(-1);
  };

  const handleGoHome = () => {
    navigate(isAuthenticated ? '/' : '/login');
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center items-center px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full text-center">
        {/* 404 Illustration */}
        <div className="mb-8">
          <div className="text-8xl">üîç</div>
          <h1 className="mt-4 text-6xl font-bold text-gray-900">404</h1>
        </div>

        {/* Error Message */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            Oops! Trang kh√¥ng t·ªìn t·∫°i
          </h2>
          <p className="text-gray-600 mb-6">
            Trang b·∫°n ƒëang t√¨m ki·∫øm c√≥ th·ªÉ ƒë√£ b·ªã x√≥a, ƒë·ªïi t√™n ho·∫∑c t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng.
          </p>
        </div>

        {/* Action Buttons */}
        <div className="space-y-4">
          <button
            onClick={handleGoHome}
            className="btn btn-primary w-full"
          >
            üè† V·ªÅ trang ch·ªß
          </button>
          
          <button
            onClick={handleGoBack}
            className="btn btn-secondary w-full"
          >
            ‚Üê Quay l·∫°i trang tr∆∞·ªõc
          </button>
        </div>

        {/* Additional Links */}
        <div className="mt-8 pt-6 border-t border-gray-200">
          <p className="text-sm text-gray-500 mb-4">
            Ho·∫∑c b·∫°n c√≥ th·ªÉ:
          </p>
          
          <div className="space-y-2">
            {isAuthenticated ? (
              <>
                <Link
                  to="/"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  üì± Trang ch·ªß SmartShop
                </Link>
                <Link
                  to="/products"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  üõçÔ∏è Xem s·∫£n ph·∫©m
                </Link>
                <Link
                  to="/cart"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  üõí Gi·ªè h√†ng c·ªßa t√¥i
                </Link>
              </>
            ) : (
              <>
                <Link
                  to="/login"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  üîê ƒêƒÉng nh·∫≠p
                </Link>
                <Link
                  to="/register"
                  className="block text-blue-600 hover:text-blue-500 text-sm"
                >
                  üìù T·∫°o t√†i kho·∫£n m·ªõi
                </Link>
              </>
            )}
          </div>
        </div>

        {/* Help Text */}
        <div className="mt-8 p-4 bg-blue-50 rounded-lg">
          <p className="text-sm text-blue-700">
            üí° <strong>M·∫πo:</strong> Ki·ªÉm tra l·∫°i URL ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu b·∫°n nghƒ© ƒë√¢y l√† l·ªói h·ªá th·ªëng.
          </p>
        </div>
      </div>
    </div>
  );
};

export default NotFoundPage;

==================================================
File: .\src\pages\admin\ProductsManagementPage.jsx
==================================================

// src/pages/admin/ProductsPage.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import {
  PlusIcon,
  MagnifyingGlassIcon,
  FunnelIcon,
  ViewColumnsIcon,
  Squares2X2Icon
} from '@heroicons/react/24/outline';
import { useProducts } from '../../hooks/useProducts';
import ProductTable from './products/ProductTable';
import ProductFilter from './products/ProductFilter';


const ProductsManagementPage = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [viewMode, setViewMode] = useState('table'); // 'table' or 'grid'
  const [filters, setFilters] = useState({
    condition: null,
    orderBy: 'CREATED_DESC'
  });

  // Fetch products with current filters
  const { 
    products, 
    totalCount, 
    hasNextPage, 
    loading, 
    error, 
    loadMore, 
    refetch 
  } = useProducts({
    first: 20,
    orderBy: filters.orderBy,
    condition: filters.condition
  });

  const handleSearch = (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      setFilters(prev => ({
        ...prev,
        condition: {
          ...prev.condition,
          name: searchQuery.trim()
        }
      }));
    } else {
      setFilters(prev => ({
        ...prev,
        condition: prev.condition ? { ...prev.condition, name: undefined } : null
      }));
    }
  };

  const handleFilterChange = (newFilters) => {
    setFilters(prev => ({
      ...prev,
      condition: newFilters
    }));
  };

  const handleSortChange = (orderBy) => {
    setFilters(prev => ({
      ...prev,
      orderBy
    }));
  };

  const clearFilters = () => {
    setSearchQuery('');
    setFilters({
      condition: null,
      orderBy: 'CREATED_DESC'
    });
  };

  const hasActiveFilters = () => {
    return searchQuery || filters.condition || filters.orderBy !== 'CREATED_DESC';
  };

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Qu·∫£n l√Ω s·∫£n ph·∫©m</h1>
          <p className="mt-1 text-sm text-gray-500">
            Qu·∫£n l√Ω to√†n b·ªô s·∫£n ph·∫©m trong h·ªá th·ªëng
          </p>
        </div>
        
        <div className="mt-4 sm:mt-0">
          <Link
            to="/admin/products/create"
            className="btn btn-primary"
          >
            <PlusIcon className="h-4 w-4 mr-2" />
            Th√™m s·∫£n ph·∫©m
          </Link>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-white rounded-lg shadow p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                <span className="text-blue-600 font-semibold text-sm">üì¶</span>
              </div>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">T·ªïng s·∫£n ph·∫©m</p>
              <p className="text-lg font-semibold text-gray-900">{totalCount}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                <span className="text-green-600 font-semibold text-sm">‚úÖ</span>
              </div>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">ƒêang b√°n</p>
              <p className="text-lg font-semibold text-gray-900">
                {products.filter(p => p.isActive).length}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">
                <span className="text-yellow-600 font-semibold text-sm">‚≠ê</span>
              </div>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">N·ªïi b·∫≠t</p>
              <p className="text-lg font-semibold text-gray-900">
                {products.filter(p => p.isFeatured).length}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
                <span className="text-red-600 font-semibold text-sm">‚ö†Ô∏è</span>
              </div>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">H·∫øt h√†ng</p>
              <p className="text-lg font-semibold text-gray-900">
                {products.filter(p => p.stock === 0).length}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="bg-white rounded-lg shadow">
        <div className="p-4 border-b border-gray-200">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0">
            {/* Search */}
            <form onSubmit={handleSearch} className="flex-1 max-w-md">
              <div className="relative">
                <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            </form>

            {/* Controls */}
            <div className="flex items-center space-x-3">
              {/* Sort */}
              <select
                value={filters.orderBy}
                onChange={(e) => handleSortChange(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="CREATED_DESC">M·ªõi nh·∫•t</option>
                <option value="CREATED_ASC">C≈© nh·∫•t</option>
                <option value="NAME_ASC">T√™n A-Z</option>
                <option value="NAME_DESC">T√™n Z-A</option>
                <option value="PRICE_ASC">Gi√° th·∫•p ƒë·∫øn cao</option>
                <option value="PRICE_DESC">Gi√° cao ƒë·∫øn th·∫•p</option>
                <option value="STOCK_ASC">T·ªìn kho √≠t nh·∫•t</option>
                <option value="STOCK_DESC">T·ªìn kho nhi·ªÅu nh·∫•t</option>
              </select>

              {/* Filter Toggle */}
              <button
                onClick={() => setShowFilters(!showFilters)}
                className={`px-3 py-2 border rounded-lg text-sm font-medium transition-colors ${
                  showFilters
                    ? 'bg-blue-50 border-blue-300 text-blue-700'
                    : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                }`}
              >
                <FunnelIcon className="h-4 w-4 mr-2" />
                L·ªçc
              </button>

              {/* View Mode Toggle */}
              <div className="flex border border-gray-300 rounded-lg">
                <button
                  onClick={() => setViewMode('table')}
                  className={`px-3 py-2 text-sm font-medium transition-colors ${
                    viewMode === 'table'
                      ? 'bg-blue-50 text-blue-700'
                      : 'text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <ViewColumnsIcon className="h-4 w-4" />
                </button>
                <button
                  onClick={() => setViewMode('grid')}
                  className={`px-3 py-2 text-sm font-medium transition-colors border-l border-gray-300 ${
                    viewMode === 'grid'
                      ? 'bg-blue-50 text-blue-700'
                      : 'text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <Squares2X2Icon className="h-4 w-4" />
                </button>
              </div>
            </div>
          </div>

          {/* Active Filters */}
          {hasActiveFilters() && (
            <div className="mt-3 flex flex-wrap items-center gap-2">
              <span className="text-sm text-gray-500">B·ªô l·ªçc ƒëang √°p d·ª•ng:</span>
              
              {searchQuery && (
                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  T√¨m ki·∫øm: "{searchQuery}"
                  <button
                    onClick={() => {
                      setSearchQuery('');
                      handleFilterChange(null);
                    }}
                    className="ml-1 text-blue-600 hover:text-blue-800"
                  >
                    √ó
                  </button>
                </span>
              )}

              {filters.orderBy !== 'CREATED_DESC' && (
                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  S·∫Øp x·∫øp: {filters.orderBy}
                </span>
              )}

              <button
                onClick={clearFilters}
                className="text-sm text-red-600 hover:text-red-800 font-medium"
              >
                X√≥a t·∫•t c·∫£
              </button>
            </div>
          )}
        </div>

        {/* Filters Panel */}
        {showFilters && (
          <div className="p-4 border-b border-gray-200 bg-gray-50">
            <ProductFilter 
              onFilterChange={handleFilterChange}
              className="max-w-4xl"
            />
          </div>
        )}
      </div>

      {/* Products Table/Grid */}
      <div className="bg-white rounded-lg shadow">
        {error ? (
          <div className="p-6 text-center">
            <div className="text-red-500 mb-2">‚ùå</div>
            <p className="text-gray-600">C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu</p>
            <button
              onClick={() => refetch()}
              className="mt-2 btn btn-secondary"
            >
              Th·ª≠ l·∫°i
            </button>
          </div>
        ) : (
          <>
            <ProductTable
              products={products}
              loading={loading}
              viewMode={viewMode}
            />

            {/* Load More */}
            {hasNextPage && (
              <div className="p-4 border-t border-gray-200 text-center">
                <button
                  onClick={loadMore}
                  disabled={loading}
                  className="btn btn-secondary"
                >
                  {loading ? 'ƒêang t·∫£i...' : 'T·∫£i th√™m'}
                </button>
              </div>
            )}

            {/* Empty State */}
            {!loading && products.length === 0 && (
              <div className="p-12 text-center">
                <div className="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
                  <span className="text-2xl">üì¶</span>
                </div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o
                </h3>
                <p className="text-gray-500 mb-6">
                  B·∫Øt ƒë·∫ßu b·∫±ng c√°ch th√™m s·∫£n ph·∫©m ƒë·∫ßu ti√™n c·ªßa b·∫°n
                </p>
                <Link
                  to="/admin/products/create"
                  className="btn btn-primary"
                >
                  <PlusIcon className="h-4 w-4 mr-2" />
                  Th√™m s·∫£n ph·∫©m ƒë·∫ßu ti√™n
                </Link>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default ProductsManagementPage;

==================================================
File: .\src\pages\admin\DashboardPage.jsx
==================================================

// src/pages/admin/DashboardPage.jsx
import React from 'react';
import {
  CubeIcon,
  TagIcon,
  BuildingStorefrontIcon,
  ShoppingCartIcon,
  UserGroupIcon,
  ChartBarIcon
} from '@heroicons/react/24/outline';

import ProductTable from './products/ProductTable';
import ProductFilter from './products/ProductFilter';

const DashboardPage = () => {
  // Mock data - s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·∫±ng real data sau
  const stats = [
    {
      name: 'T·ªïng s·∫£n ph·∫©m',
      value: '1,234',
      change: '+12%',
      changeType: 'positive',
      icon: CubeIcon,
      color: 'blue'
    },
    {
      name: 'ƒê∆°n h√†ng m·ªõi',
      value: '56',
      change: '+8%',
      changeType: 'positive',
      icon: ShoppingCartIcon,
      color: 'green'
    },
    {
      name: 'Kh√°ch h√†ng',
      value: '2,345',
      change: '+15%',
      changeType: 'positive',
      icon: UserGroupIcon,
      color: 'purple'
    },
    {
      name: 'Doanh thu',
      value: '‚Ç´234M',
      change: '-2%',
      changeType: 'negative',
      icon: ChartBarIcon,
      color: 'red'
    }
  ];

  const getColorClasses = (color, type = 'bg') => {
    const colors = {
      blue: type === 'bg' ? 'bg-blue-500' : 'text-blue-600',
      green: type === 'bg' ? 'bg-green-500' : 'text-green-600',
      purple: type === 'bg' ? 'bg-purple-500' : 'text-purple-600',
      red: type === 'bg' ? 'bg-red-500' : 'text-red-600',
    };
    return colors[color] || colors.blue;
  };

  return (
    <div className="space-y-6">
      {/* Welcome Section */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-6 text-white">
        <h1 className="text-2xl font-bold mb-2">
          Ch√†o m·ª´ng tr·ªü l·∫°i! üëã
        </h1>
        <p className="text-blue-100">
          ƒê√¢y l√† t·ªïng quan v·ªÅ ho·∫°t ƒë·ªông kinh doanh c·ªßa SmartShop
        </p>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <div key={stat.name} className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">{stat.name}</p>
                <p className="text-2xl font-bold text-gray-900">{stat.value}</p>
                <p className={`text-sm ${
                  stat.changeType === 'positive' ? 'text-green-600' : 'text-red-600'
                }`}>
                  {stat.change} t·ª´ th√°ng tr∆∞·ªõc
                </p>
              </div>
              <div className={`w-12 h-12 ${getColorClasses(stat.color)} rounded-lg flex items-center justify-center`}>
                <stat.icon className="h-6 w-6 text-white" />
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Quick Actions */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Orders */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">ƒê∆°n h√†ng g·∫ßn ƒë√¢y</h3>
          </div>
          <div className="p-6">
            <div className="text-center py-8">
              <ShoppingCartIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn</p>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">Thao t√°c nhanh</h3>
          </div>
          <div className="p-6 space-y-3">
            <button className="w-full btn btn-primary justify-start">
              <CubeIcon className="h-5 w-5 mr-3" />
              Th√™m s·∫£n ph·∫©m m·ªõi
            </button>
            <button className="w-full btn btn-secondary justify-start">
              <TagIcon className="h-5 w-5 mr-3" />
              Qu·∫£n l√Ω danh m·ª•c
            </button>
            <button className="w-full btn btn-secondary justify-start">
              <BuildingStorefrontIcon className="h-5 w-5 mr-3" />
              Qu·∫£n l√Ω th∆∞∆°ng hi·ªáu
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DashboardPage;

==================================================
File: .\src\pages\admin\EditProductPage.jsx
==================================================

// src/pages/admin/EditProductPage.jsx
import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import ProductForm from './products/ProductForm';
import { useProduct, useUpdateProduct } from '../../hooks/useProducts';

const EditProductPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { product, loading: productLoading } = useProduct(id);
  const { updateProduct, loading: updateLoading } = useUpdateProduct();

  const handleSubmit = async (productData) => {
    try {
      await updateProduct(id, productData);
      navigate('/admin/products');
    } catch (error) {
      console.error('Update product error:', error);
    }
  };

  const handleCancel = () => {
    navigate('/admin/products');
  };

  if (productLoading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/3 mb-2"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        </div>
        <div className="bg-white rounded-lg shadow p-6">
          <div className="animate-pulse space-y-4">
            <div className="h-10 bg-gray-200 rounded"></div>
            <div className="h-32 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="text-center py-12">
        <h1 className="text-2xl font-bold text-gray-900 mb-4">
          Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
        </h1>
        <button
          onClick={() => navigate('/admin/products')}
          className="btn btn-primary"
        >
          Quay l·∫°i danh s√°ch
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Ch·ªânh s·ª≠a s·∫£n ph·∫©m</h1>
        <p className="mt-1 text-sm text-gray-500">
          C·∫≠p nh·∫≠t th√¥ng tin cho: {product.name}
        </p>
      </div>

      <ProductForm 
        product={product}
        onSubmit={handleSubmit}
        onCancel={handleCancel}
        loading={updateLoading}
      />
    </div>
  );
};

export default EditProductPage;

==================================================
File: .\src\pages\admin\CreateProductPage.jsx
==================================================

// src/pages/admin/CreateProductPage.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import ProductForm from './products/ProductForm';
import { useCreateProductWithImages } from '../../hooks/useProducts';

const CreateProductPage = () => {
  const navigate = useNavigate();
  const { createProductWithImages, loading } = useCreateProductWithImages();

  const handleSubmit = async (productData, imageFiles) => {
    try {
      console.log('Submitting:', { productData, imageFiles });
      await createProductWithImages(productData, imageFiles);
      navigate('/admin/products');
    } catch (error) {
      console.error('Create product error:', error);
    }
  };

  const handleCancel = () => {
    navigate('/admin/products');
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Th√™m s·∫£n ph·∫©m m·ªõi</h1>
        <p className="mt-1 text-sm text-gray-500">
          T·∫°o s·∫£n ph·∫©m m·ªõi cho c·ª≠a h√†ng
        </p>
      </div>

      <ProductForm 
        onSubmit={handleSubmit}
        onCancel={handleCancel}
        loading={loading}
      />
    </div>
  );
};

export default CreateProductPage;

==================================================
File: .\src\pages\admin\products\ImageUpload.jsx
==================================================

// src/components/admin/products/ImageUpload.jsx
import React, { useState, useRef } from 'react';
import {
  PhotoIcon,
  XMarkIcon,
  CloudArrowUpIcon,
  PlusIcon
} from '@heroicons/react/24/outline';
import { useUploadProductImage, useRemoveProductImage } from '../../../hooks/useUpload';
import { getImageUrl } from '../../../lib/utils';

const ImageUpload = ({ 
  productId, 
  images = [], 
  onImagesChange, 
  maxImages = 5 
}) => {
  const fileInputRef = useRef(null);
  const [dragOver, setDragOver] = useState(false);
  const [uploading, setUploading] = useState(false);
  
  const { uploadImage, loading: uploadLoading } = useUploadProductImage();
  const { removeImage, loading: removeLoading } = useRemoveProductImage();

  const handleFileSelect = (files) => {
    if (!productId) {
      alert('Vui l√≤ng t·∫°o s·∫£n ph·∫©m tr∆∞·ªõc khi upload ·∫£nh');
      return;
    }

    if (images.length + files.length > maxImages) {
      alert(`Ch·ªâ ƒë∆∞·ª£c upload t·ªëi ƒëa ${maxImages} ·∫£nh`);
      return;
    }

    uploadFiles(files);
  };

  const uploadFiles = async (files) => {
    setUploading(true);
    const newImages = [...images];

    for (let file of files) {
      try {
        const result = await uploadImage(productId, file);
        if (result.success && result.filename) {
          newImages.push(result.filename);
        }
      } catch (error) {
        console.error('Upload error:', error);
      }
    }

    onImagesChange(newImages);
    setUploading(false);
  };

  const handleRemoveImage = async (filename, index) => {
    if (!productId) {
      // N·∫øu ch∆∞a c√≥ productId, ch·ªâ remove kh·ªèi state
      const newImages = images.filter((_, i) => i !== index);
      onImagesChange(newImages);
      return;
    }

    try {
      await removeImage(productId, filename);
      const newImages = images.filter((_, i) => i !== index);
      onImagesChange(newImages);
    } catch (error) {
      console.error('Remove image error:', error);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDragOver(false);
    
    const files = Array.from(e.dataTransfer.files).filter(
      file => file.type.startsWith('image/')
    );
    
    if (files.length > 0) {
      handleFileSelect(files);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setDragOver(false);
  };

  const openFileDialog = () => {
    fileInputRef.current?.click();
  };

  const handleFileInputChange = (e) => {
    const files = Array.from(e.target.files);
    if (files.length > 0) {
      handleFileSelect(files);
    }
    // Reset input
    e.target.value = '';
  };

  return (
    <div className="space-y-4">
      <label className="block text-sm font-medium text-gray-700">
        H√¨nh ·∫£nh s·∫£n ph·∫©m ({images.length}/{maxImages})
      </label>

      {/* Current Images */}
      {images.length > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {images.map((image, index) => (
            <div key={index} className="relative group">
              <img
                src={getImageUrl(image)}
                alt={`Product ${index + 1}`}
                className="w-full h-24 object-cover rounded-lg border border-gray-200"
                onError={(e) => {
                  e.target.src = '/placeholder-product.jpg';
                }}
              />
              <button
                type="button"
                onClick={() => handleRemoveImage(image, index)}
                disabled={removeLoading}
                className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity disabled:opacity-50"
              >
                <XMarkIcon className="h-3 w-3" />
              </button>
              {index === 0 && (
                <div className="absolute bottom-1 left-1 bg-blue-500 text-white text-xs px-1 py-0.5 rounded">
                  Ch√≠nh
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {/* Upload Area */}
      {images.length < maxImages && (
        <div
          onDrop={handleDrop}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onClick={openFileDialog}
          className={`border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors ${
            dragOver
              ? 'border-blue-400 bg-blue-50'
              : 'border-gray-300 hover:border-gray-400'
          }`}
        >
          <input
            ref={fileInputRef}
            type="file"
            multiple
            accept="image/*"
            onChange={handleFileInputChange}
            className="hidden"
          />

          {uploading || uploadLoading ? (
            <div className="space-y-2">
              <CloudArrowUpIcon className="h-12 w-12 text-blue-500 mx-auto animate-bounce" />
              <p className="text-sm text-blue-600 font-medium">ƒêang upload...</p>
            </div>
          ) : (
            <div className="space-y-2">
              <PhotoIcon className="h-12 w-12 text-gray-400 mx-auto" />
              <div>
                <p className="text-sm font-medium text-gray-900">
                  K√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c click ƒë·ªÉ ch·ªçn
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  PNG, JPG, GIF up to 10MB
                </p>
              </div>
              <button
                type="button"
                className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <PlusIcon className="h-4 w-4 mr-2" />
                Ch·ªçn ·∫£nh
              </button>
            </div>
          )}
        </div>
      )}

      {/* Info */}
      <div className="text-xs text-gray-500">
        <p>‚Ä¢ ·∫¢nh ƒë·∫ßu ti√™n s·∫Ω ƒë∆∞·ª£c l√†m ·∫£nh ch√≠nh</p>
        <p>‚Ä¢ K√≠ch th∆∞·ªõc t·ªëi ∆∞u: 800x800px</p>
        <p>‚Ä¢ ƒê·ªãnh d·∫°ng: JPG, PNG, GIF</p>
      </div>
    </div>
  );
};

export default ImageUpload;

==================================================
File: .\src\pages\admin\products\ProductForm.jsx
==================================================

// src/components/admin/products/ProductForm.jsx
import React, { useState, useEffect } from 'react';
import { PhotoIcon, XMarkIcon } from '@heroicons/react/24/outline';
import { useProductFormData } from '../../../hooks/useProducts';
import { formatPrice, getImageUrl } from '../../../lib/utils';

const ProductForm = ({ 
  product = null, 
  onSubmit, 
  onCancel, 
  loading = false 
}) => {
  const { categories, brands, loading: formDataLoading } = useProductFormData();
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    originalPrice: '',
    sku: '',
    category: '',
    brand: '',
    stock: '',
    images: [], // Existing images
    isActive: true,
    isFeatured: false
  });

  // Separate state for new image files to upload
  const [newImageFiles, setNewImageFiles] = useState([]);
  const [errors, setErrors] = useState({});

  // Populate form when editing
  useEffect(() => {
    if (product) {
      setFormData({
        name: product.name || '',
        description: product.description || '',
        price: product.price || '',
        originalPrice: product.originalPrice || '',
        sku: product.sku || '',
        category: product.category?._id || '',
        brand: product.brand?._id || '',
        stock: product.stock || '',
        images: product.images || [],
        isActive: product.isActive ?? true,
        isFeatured: product.isFeatured ?? false
      });
      setNewImageFiles([]); // Reset new files when editing
    }
  }, [product]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));

    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  // Handle new image files selection
  const handleImageFilesChange = (e) => {
    const files = Array.from(e.target.files);
    const validFiles = files.filter(file => file.type.startsWith('image/'));
    
    if (validFiles.length !== files.length) {
      alert('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPG, PNG, GIF)');
    }

    // Limit total images (existing + new)
    const totalImages = formData.images.length + newImageFiles.length + validFiles.length;
    if (totalImages > 5) {
      alert('T·ªëi ƒëa 5 ·∫£nh cho m·ªói s·∫£n ph·∫©m');
      return;
    }

    setNewImageFiles(prev => [...prev, ...validFiles]);
  };

  // Remove new image file
  const removeNewImageFile = (index) => {
    setNewImageFiles(prev => prev.filter((_, i) => i !== index));
  };

  // Remove existing image (for edit mode)
  const removeExistingImage = (index) => {
    setFormData(prev => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index)
    }));
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = 'T√™n s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc';
    }

    if (!formData.price || formData.price <= 0) {
      newErrors.price = 'Gi√° s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0';
    }

    if (!formData.sku.trim()) {
      newErrors.sku = 'SKU l√† b·∫Øt bu·ªôc';
    }

    if (!formData.category) {
      newErrors.category = 'Danh m·ª•c l√† b·∫Øt bu·ªôc';
    }

    if (!formData.brand) {
      newErrors.brand = 'Th∆∞∆°ng hi·ªáu l√† b·∫Øt bu·ªôc';
    }

    if (formData.stock === '' || formData.stock < 0) {
      newErrors.stock = 'S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë∆∞·ª£c √¢m';
    }

    if (formData.originalPrice && formData.originalPrice <= formData.price) {
      newErrors.originalPrice = 'Gi√° g·ªëc ph·∫£i l·ªõn h∆°n gi√° b√°n';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    // Convert string numbers to numbers
    const submitData = {
      ...formData,
      price: parseFloat(formData.price),
      originalPrice: formData.originalPrice ? parseFloat(formData.originalPrice) : null,
      stock: parseInt(formData.stock)
    };

    // Pass both product data and image files
    onSubmit(submitData, newImageFiles);
  };

  if (formDataLoading) {
    return (
      <div className="bg-white rounded-lg shadow p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-4 bg-gray-200 rounded w-1/4"></div>
          <div className="h-10 bg-gray-200 rounded"></div>
          <div className="h-32 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow">
      <div className="px-6 py-4 border-b border-gray-200">
        <h3 className="text-lg font-medium text-gray-900">
          {product ? 'Ch·ªânh s·ª≠a s·∫£n ph·∫©m' : 'Th√™m s·∫£n ph·∫©m m·ªõi'}
        </h3>
      </div>

      <form onSubmit={handleSubmit} className="p-6 space-y-6">
        {/* Basic Product Info - gi·ªØ nguy√™n nh∆∞ c≈© */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Product Name */}
          <div className="md:col-span-2">
            <label className="form-label">T√™n s·∫£n ph·∫©m *</label>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              className={`input ${errors.name ? 'input-error' : ''}`}
              placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m"
            />
            {errors.name && <p className="form-error">{errors.name}</p>}
          </div>

          {/* SKU */}
          <div>
            <label className="form-label">SKU *</label>
            <input
              type="text"
              name="sku"
              value={formData.sku}
              onChange={handleChange}
              className={`input ${errors.sku ? 'input-error' : ''}`}
              placeholder="VD: IPHONE15-128GB"
            />
            {errors.sku && <p className="form-error">{errors.sku}</p>}
          </div>

          {/* Stock */}
          <div>
            <label className="form-label">S·ªë l∆∞·ª£ng t·ªìn kho *</label>
            <input
              type="number"
              name="stock"
              value={formData.stock}
              onChange={handleChange}
              min="0"
              className={`input ${errors.stock ? 'input-error' : ''}`}
              placeholder="0"
            />
            {errors.stock && <p className="form-error">{errors.stock}</p>}
          </div>

          {/* Price */}
          <div>
            <label className="form-label">Gi√° b√°n (VNƒê) *</label>
            <input
              type="number"
              name="price"
              value={formData.price}
              onChange={handleChange}
              min="0"
              step="1000"
              className={`input ${errors.price ? 'input-error' : ''}`}
              placeholder="0"
            />
            {errors.price && <p className="form-error">{errors.price}</p>}
            {formData.price && (
              <p className="text-sm text-gray-500 mt-1">
                {formatPrice(formData.price)}
              </p>
            )}
          </div>

          {/* Original Price */}
          <div>
            <label className="form-label">Gi√° g·ªëc (VNƒê)</label>
            <input
              type="number"
              name="originalPrice"
              value={formData.originalPrice}
              onChange={handleChange}
              min="0"
              step="1000"
              className={`input ${errors.originalPrice ? 'input-error' : ''}`}
              placeholder="ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥"
            />
            {errors.originalPrice && <p className="form-error">{errors.originalPrice}</p>}
          </div>

          {/* Category */}
          <div>
            <label className="form-label">Danh m·ª•c *</label>
            <select
              name="category"
              value={formData.category}
              onChange={handleChange}
              className={`input ${errors.category ? 'input-error' : ''}`}
            >
              <option value="">Ch·ªçn danh m·ª•c</option>
              {categories.map((category) => (
                <option key={category._id} value={category._id}>
                  {category.name}
                </option>
              ))}
            </select>
            {errors.category && <p className="form-error">{errors.category}</p>}
          </div>

          {/* Brand */}
          <div>
            <label className="form-label">Th∆∞∆°ng hi·ªáu *</label>
            <select
              name="brand"
              value={formData.brand}
              onChange={handleChange}
              className={`input ${errors.brand ? 'input-error' : ''}`}
            >
              <option value="">Ch·ªçn th∆∞∆°ng hi·ªáu</option>
              {brands.map((brand) => (
                <option key={brand._id} value={brand._id}>
                  {brand.name}
                </option>
              ))}
            </select>
            {errors.brand && <p className="form-error">{errors.brand}</p>}
          </div>
        </div>

        {/* Description */}
        <div>
          <label className="form-label">M√¥ t·∫£ s·∫£n ph·∫©m</label>
          <textarea
            name="description"
            value={formData.description}
            onChange={handleChange}
            rows={4}
            className="input resize-none"
            placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ s·∫£n ph·∫©m..."
          />
        </div>

        {/* Images Section */}
        <div>
          <label className="form-label">
            H√¨nh ·∫£nh s·∫£n ph·∫©m ({formData.images.length + newImageFiles.length}/5)
          </label>
          
          {/* Existing Images (Edit mode) */}
          {formData.images.length > 0 && (
            <div className="mb-4">
              <p className="text-sm text-gray-600 mb-2">·∫¢nh hi·ªán t·∫°i:</p>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {formData.images.map((image, index) => (
                  <div key={index} className="relative group">
                    <img
                      src={getImageUrl(image)}
                      alt={`Current ${index + 1}`}
                      className="w-full h-24 object-cover rounded-lg border border-gray-200"
                      onError={(e) => {
                        e.target.src = '/placeholder-product.jpg';
                      }}
                    />
                    <button
                      type="button"
                      onClick={() => removeExistingImage(index)}
                      className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      <XMarkIcon className="h-3 w-3" />
                    </button>
                    {index === 0 && (
                      <div className="absolute bottom-1 left-1 bg-blue-500 text-white text-xs px-1 py-0.5 rounded">
                        Ch√≠nh
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* New Images Preview */}
          {newImageFiles.length > 0 && (
            <div className="mb-4">
              <p className="text-sm text-gray-600 mb-2">·∫¢nh m·ªõi s·∫Ω upload:</p>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {newImageFiles.map((file, index) => (
                  <div key={index} className="relative group">
                    <img
                      src={URL.createObjectURL(file)}
                      alt={`New ${index + 1}`}
                      className="w-full h-24 object-cover rounded-lg border border-green-200"
                    />
                    <button
                      type="button"
                      onClick={() => removeNewImageFile(index)}
                      className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      <XMarkIcon className="h-3 w-3" />
                    </button>
                    <div className="absolute bottom-1 left-1 bg-green-500 text-white text-xs px-1 py-0.5 rounded">
                      M·ªõi
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Upload New Images */}
          {(formData.images.length + newImageFiles.length) < 5 && (
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <PhotoIcon className="h-12 w-12 text-gray-400 mx-auto mb-2" />
              <label className="cursor-pointer">
                <span className="text-sm font-medium text-blue-600 hover:text-blue-500">
                  Ch·ªçn ·∫£nh ƒë·ªÉ th√™m
                </span>
                <input
                  type="file"
                  multiple
                  accept="image/*"
                  onChange={handleImageFilesChange}
                  className="hidden"
                />
              </label>
              <p className="text-xs text-gray-500 mt-1">
                PNG, JPG, GIF up to 10MB
              </p>
            </div>
          )}

          <p className="text-xs text-gray-500 mt-2">
            ‚Ä¢ ·∫¢nh ƒë·∫ßu ti√™n s·∫Ω ƒë∆∞·ª£c l√†m ·∫£nh ch√≠nh
            ‚Ä¢ ·∫¢nh s·∫Ω ƒë∆∞·ª£c upload khi t·∫°o/c·∫≠p nh·∫≠t s·∫£n ph·∫©m
          </p>
        </div>

        {/* Checkboxes */}
        <div className="flex items-center space-x-6">
          <label className="flex items-center">
            <input
              type="checkbox"
              name="isActive"
              checked={formData.isActive}
              onChange={handleChange}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <span className="ml-2 text-sm text-gray-700">K√≠ch ho·∫°t</span>
          </label>

          <label className="flex items-center">
            <input
              type="checkbox"
              name="isFeatured"
              checked={formData.isFeatured}
              onChange={handleChange}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <span className="ml-2 text-sm text-gray-700">S·∫£n ph·∫©m n·ªïi b·∫≠t</span>
          </label>
        </div>

        {/* Actions */}
        <div className="flex items-center justify-end space-x-3 pt-6 border-t border-gray-200">
          <button
            type="button"
            onClick={onCancel}
            className="btn btn-secondary"
            disabled={loading}
          >
            H·ªßy
          </button>
          <button
            type="submit"
            className="btn btn-primary"
            disabled={loading}
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                {product ? 'ƒêang c·∫≠p nh·∫≠t...' : 'ƒêang t·∫°o...'}
              </>
            ) : (
              product ? 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m' : 'T·∫°o s·∫£n ph·∫©m'
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ProductForm;

==================================================
File: .\src\pages\admin\products\ProductFilter.jsx
==================================================

// src/components/admin/products/ProductFilter.jsx
import React from 'react';

const ProductFilter = ({ onFilterChange, className = '' }) => {
  return (
    <div className={`p-4 bg-gray-50 rounded-lg ${className}`}>
      <p className="text-sm text-gray-600">
        üöß B·ªô l·ªçc chi ti·∫øt ƒëang ph√°t tri·ªÉn. Hi·ªán t·∫°i c√≥ th·ªÉ d√πng search v√† sort ·ªü tr√™n.
      </p>
    </div>
  );
};

export default ProductFilter;

==================================================
File: .\src\pages\admin\products\ProductTable.jsx
==================================================

// src/components/admin/products/ProductTable.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  PencilIcon, 
  TrashIcon, 
  EyeIcon,
  PhotoIcon,
  CheckCircleIcon,
  XCircleIcon,
  StarIcon
} from '@heroicons/react/24/outline';
import { formatPrice, formatDate, getImageUrl } from '../../../lib/utils';
import { useDeleteProduct } from '../../../hooks/useProducts';

const ProductTable = ({ 
  products = [], 
  loading = false, 
  viewMode = 'table'
}) => {
  const navigate = useNavigate();
  const { deleteProduct, loading: deleteLoading } = useDeleteProduct();

  const handleEdit = (productId) => {
    navigate(`/admin/products/edit/${productId}`);
  };

  const handleView = (productId) => {
    // S·∫Ω implement sau
    console.log('View product:', productId);
  };

  const handleDelete = async (productId, productName) => {
    if (window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m "${productName}"?`)) {
      await deleteProduct(productId);
    }
  };

  if (loading) {
    return (
      <div className="p-6">
        <div className="animate-pulse space-y-4">
          {[...Array(5)].map((_, i) => (
            <div key={i} className="h-16 bg-gray-200 rounded"></div>
          ))}
        </div>
      </div>
    );
  }

  if (products.length === 0) {
    return (
      <div className="p-12 text-center">
        <div className="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
          <PhotoIcon className="h-8 w-8 text-gray-400" />
        </div>
        <h3 className="text-lg font-medium text-gray-900 mb-2">
          Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o
        </h3>
        <p className="text-gray-500 mb-6">
          B·∫Øt ƒë·∫ßu b·∫±ng c√°ch th√™m s·∫£n ph·∫©m ƒë·∫ßu ti√™n c·ªßa b·∫°n
        </p>
        <button
          onClick={() => navigate('/admin/products/create')}
          className="btn btn-primary"
        >
          Th√™m s·∫£n ph·∫©m ƒë·∫ßu ti√™n
        </button>
      </div>
    );
  }

  // Grid View
  if (viewMode === 'grid') {
    return (
      <div className="p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {products.map((product) => (
            <div
              key={product._id}
              className="bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-lg transition-shadow"
            >
              {/* Product Image */}
              <div className="relative h-48 bg-gray-100">
                {product.images && product.images.length > 0 ? (
                  <img
                    src={getImageUrl(product.images[0])}
                    alt={product.name}
                    className="w-full h-full object-cover"
                    onError={(e) => {
                      e.target.src = '/placeholder-product.jpg';
                    }}
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center">
                    <PhotoIcon className="h-12 w-12 text-gray-400" />
                  </div>
                )}

                {/* Status badges */}
                <div className="absolute top-2 left-2 flex flex-col space-y-1">
                  {product.isFeatured && (
                    <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                      <StarIcon className="h-3 w-3 mr-1" />
                      N·ªïi b·∫≠t
                    </span>
                  )}
                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                    product.isActive 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {product.isActive ? (
                      <>
                        <CheckCircleIcon className="h-3 w-3 mr-1" />
                        ƒêang b√°n
                      </>
                    ) : (
                      <>
                        <XCircleIcon className="h-3 w-3 mr-1" />
                        T·∫°m d·ª´ng
                      </>
                    )}
                  </span>
                </div>

                {/* Stock warning */}
                {product.stock === 0 && (
                  <div className="absolute bottom-2 left-2">
                    <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                      H·∫øt h√†ng
                    </span>
                  </div>
                )}
              </div>

              {/* Product Info */}
              <div className="p-4">
                <div className="mb-2">
                  <h3 className="text-sm font-medium text-gray-900 line-clamp-2 mb-1">
                    {product.name}
                  </h3>
                  <p className="text-xs text-gray-500">
                    {product.category?.name} ‚Ä¢ {product.brand?.name}
                  </p>
                </div>

                <div className="mb-3">
                  <p className="text-lg font-bold text-red-600">
                    {formatPrice(product.price)}
                  </p>
                  {product.originalPrice && product.originalPrice > product.price && (
                    <p className="text-sm text-gray-500 line-through">
                      {formatPrice(product.originalPrice)}
                    </p>
                  )}
                </div>

                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm text-gray-600">
                    T·ªìn kho: <span className="font-medium">{product.stock}</span>
                  </span>
                  <span className="text-xs text-gray-500">
                    SKU: {product.sku}
                  </span>
                </div>

                {/* Actions */}
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleView(product._id)}
                    className="flex-1 px-3 py-2 text-xs font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    <EyeIcon className="h-3 w-3 mr-1 inline" />
                    Xem
                  </button>
                  <button
                    onClick={() => handleEdit(product._id)}
                    className="flex-1 px-3 py-2 text-xs font-medium text-blue-700 bg-blue-100 rounded-lg hover:bg-blue-200 transition-colors"
                  >
                    <PencilIcon className="h-3 w-3 mr-1 inline" />
                    S·ª≠a
                  </button>
                  <button
                    onClick={() => handleDelete(product._id, product.name)}
                    disabled={deleteLoading}
                    className="px-3 py-2 text-xs font-medium text-red-700 bg-red-100 rounded-lg hover:bg-red-200 transition-colors disabled:opacity-50"
                  >
                    <TrashIcon className="h-3 w-3" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  // Table View (default)
  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              S·∫£n ph·∫©m
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Gi√°
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              T·ªìn kho
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Tr·∫°ng th√°i
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Ng√†y t·∫°o
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Thao t√°c
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {products.map((product) => (
            <tr key={product._id} className="hover:bg-gray-50 transition-colors">
              {/* Product Info */}
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="flex items-center">
                  <div className="flex-shrink-0 h-12 w-12">
                    {product.images && product.images.length > 0 ? (
                      <img
                        className="h-12 w-12 rounded-lg object-cover border border-gray-200"
                        src={getImageUrl(product.images[0])}
                        alt={product.name}
                        onError={(e) => {
                          e.target.src = '/placeholder-product.jpg';
                        }}
                      />
                    ) : (
                      <div className="h-12 w-12 rounded-lg bg-gray-100 flex items-center justify-center">
                        <PhotoIcon className="h-6 w-6 text-gray-400" />
                      </div>
                    )}
                  </div>
                  <div className="ml-4">
                    <div className="text-sm font-medium text-gray-900 max-w-xs truncate">
                      {product.name}
                      {product.isFeatured && (
                        <StarIcon className="h-4 w-4 text-yellow-500 inline ml-1" />
                      )}
                    </div>
                    <div className="text-sm text-gray-500">
                      {product.category?.name} ‚Ä¢ {product.brand?.name}
                    </div>
                    <div className="text-xs text-gray-400">
                      SKU: {product.sku}
                    </div>
                  </div>
                </div>
              </td>

              {/* Price */}
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm font-medium text-gray-900">
                  {formatPrice(product.price)}
                </div>
                {product.originalPrice && product.originalPrice > product.price && (
                  <div className="text-sm text-gray-500 line-through">
                    {formatPrice(product.originalPrice)}
                  </div>
                )}
              </td>

              {/* Stock */}
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {product.stock}
                  {product.stock === 0 && (
                    <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                      H·∫øt h√†ng
                    </span>
                  )}
                  {product.stock > 0 && product.stock <= 10 && (
                    <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800">
                      S·∫Øp h·∫øt
                    </span>
                  )}
                </div>
              </td>

              {/* Status */}
              <td className="px-6 py-4 whitespace-nowrap">
                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  product.isActive 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-red-100 text-red-800'
                }`}>
                  {product.isActive ? (
                    <>
                      <CheckCircleIcon className="h-3 w-3 mr-1" />
                      ƒêang b√°n
                    </>
                  ) : (
                    <>
                      <XCircleIcon className="h-3 w-3 mr-1" />
                      T·∫°m d·ª´ng
                    </>
                  )}
                </span>
              </td>

              {/* Created Date */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {formatDate(product.createdAt)}
              </td>

              {/* Actions */}
              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => handleView(product._id)}
                    className="text-gray-600 hover:text-gray-900 p-1 rounded transition-colors"
                    title="Xem chi ti·∫øt"
                  >
                    <EyeIcon className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => handleEdit(product._id)}
                    className="text-blue-600 hover:text-blue-900 p-1 rounded transition-colors"
                    title="Ch·ªânh s·ª≠a"
                  >
                    <PencilIcon className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => handleDelete(product._id, product.name)}
                    disabled={deleteLoading}
                    className="text-red-600 hover:text-red-900 p-1 rounded transition-colors disabled:opacity-50"
                    title="X√≥a"
                  >
                    <TrashIcon className="h-4 w-4" />
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ProductTable;

==================================================
File: .\src\hooks\useUpload.js
==================================================

// src/hooks/useUpload.js
import { useMutation } from '@apollo/client';
import toast from 'react-hot-toast';

import { 
  UPLOAD_PRODUCT_IMAGE, 
  UPLOAD_PRODUCT_IMAGES, 
  REMOVE_PRODUCT_IMAGE 
} from '../graphql/upload';

export const useUploadProductImage = () => {
  const [uploadMutation, { loading, error }] = useMutation(UPLOAD_PRODUCT_IMAGE, {
    onCompleted: (data) => {
      if (data.uploadProductImage.success) {
        toast.success('Upload ·∫£nh th√†nh c√¥ng!');
      } else {
        toast.error(data.uploadProductImage.message);
      }
    },
    onError: (error) => {
      toast.error('L·ªói upload ·∫£nh');
    }
  });

  const uploadImage = async (productId, file) => {
    try {
      const result = await uploadMutation({
        variables: { productId, file }
      });
      return result.data.uploadProductImage;
    } catch (err) {
      throw err;
    }
  };

  return { uploadImage, loading, error };
};

export const useUploadProductImages = () => {
  const [uploadMutation, { loading, error }] = useMutation(UPLOAD_PRODUCT_IMAGES);

  const uploadImages = async (productId, files) => {
    try {
      const result = await uploadMutation({
        variables: { productId, files }
      });
      return result.data.uploadProductImages;
    } catch (err) {
      throw err;
    }
  };

  return { uploadImages, loading, error };
};

export const useRemoveProductImage = () => {
  const [removeMutation, { loading, error }] = useMutation(REMOVE_PRODUCT_IMAGE);

  const removeImage = async (productId, filename) => {
    try {
      await removeMutation({
        variables: { productId, filename }
      });
      toast.success('X√≥a ·∫£nh th√†nh c√¥ng!');
      return true;
    } catch (err) {
      toast.error('L·ªói x√≥a ·∫£nh');
      throw err;
    }
  };

  return { removeImage, loading, error };
};

==================================================
File: .\src\hooks\useProducts.js
==================================================

// src/hooks/useProducts.js - Fixed Frontend Issues
import { useQuery, useLazyQuery, useMutation } from '@apollo/client';
import { useState } from 'react';
import toast from 'react-hot-toast';

// Import GraphQL operations
import {
  GET_PRODUCTS,
  GET_PRODUCT,
  SEARCH_PRODUCTS,
  GET_FEATURED_PRODUCTS,
  GET_PRODUCTS_BY_CATEGORY,
  GET_PRODUCTS_BY_BRAND,
  GET_ALL_PRODUCTS,
  CREATE_PRODUCT,
  UPDATE_PRODUCT,
  DELETE_PRODUCT
} from '../graphql/products';

import {
  GET_ALL_CATEGORIES
} from '../graphql/categories';

import {
  GET_ALL_BRANDS
} from '../graphql/brands';

// Import upload hooks
import { useUploadProductImages } from './useUpload';

// Default values for null/undefined data
const DEFAULT_BRAND = { _id: '', name: 'Unknown Brand', description: '' };
const DEFAULT_CATEGORY = { _id: '', name: 'Unknown Category', description: '' };

// =================
// PUBLIC HOOKS (Customer facing)
// =================

// Hook ƒë·ªÉ l·∫•y danh s√°ch products v·ªõi pagination v√† filter
export const useProducts = (options = {}) => {
  const {
    first = 12,
    offset = 0,
    orderBy = 'CREATED_DESC',
    condition = null,
    skip = false
  } = options;

  const { data, loading, error, fetchMore, refetch } = useQuery(GET_PRODUCTS, {
    variables: {
      first,
      offset,
      orderBy,
      condition
    },
    skip,
    errorPolicy: 'all',
    notifyOnNetworkStatusChange: true
  });

  const loadMore = () => {
    if (data?.products?.hasNextPage) {
      return fetchMore({
        variables: {
          offset: data.products.nodes.length
        }
      });
    }
  };

  // ‚úÖ Fix: Safe data extraction v·ªõi fallbacks v√† ki·ªÉm tra null/undefined k·ªπ h∆°n
  const products = (data?.products?.nodes || []).map(product => {
    if (!product) return null;
    
    return {
      ...product,
      // ‚úÖ Fix: Ki·ªÉm tra null/undefined k·ªπ h∆°n cho brand
      brand: (product.brand && typeof product.brand === 'object') ? product.brand : DEFAULT_BRAND,
      // ‚úÖ Fix: Ki·ªÉm tra null/undefined k·ªπ h∆°n cho category
      category: (product.category && typeof product.category === 'object') ? product.category : DEFAULT_CATEGORY,
      // ‚úÖ Fix: Ensure images is always array
      images: Array.isArray(product.images) ? product.images : [],
      // ‚úÖ Fix: Ensure stock is number
      stock: typeof product.stock === 'number' ? product.stock : 0,
      // ‚úÖ Fix: Ensure price is number
      price: typeof product.price === 'number' ? product.price : 0
    };
  }).filter(Boolean); // Remove any null products

  return {
    products,
    totalCount: data?.products?.totalCount || 0,
    hasNextPage: data?.products?.hasNextPage || false,
    hasPreviousPage: data?.products?.hasPreviousPage || false,
    loading,
    error,
    loadMore,
    refetch
  };
};

// Hook ƒë·ªÉ search products
export const useSearchProducts = () => {
  const [searchResults, setSearchResults] = useState([]);
  const [isSearching, setIsSearching] = useState(false);

  const [searchProducts] = useLazyQuery(SEARCH_PRODUCTS, {
    onCompleted: (data) => {
      // ‚úÖ Fix: Safe data extraction
      const results = (data?.searchProducts?.nodes || []).map(product => ({
        ...product,
        brand: product.brand || { _id: '', name: 'Unknown Brand' },
        category: product.category || { _id: '', name: 'Unknown Category' },
        images: Array.isArray(product.images) ? product.images : [],
        stock: typeof product.stock === 'number' ? product.stock : 0,
        price: typeof product.price === 'number' ? product.price : 0
      }));
      
      setSearchResults(results);
      setIsSearching(false);
    },
    onError: (error) => {
      console.error('Search error:', error);
      toast.error('L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m');
      setIsSearching(false);
      setSearchResults([]);
    },
    errorPolicy: 'all'
  });

  const search = async (query, options = {}) => {
    if (!query.trim()) {
      setSearchResults([]);
      return;
    }

    setIsSearching(true);
    try {
      await searchProducts({
        variables: {
          query: query.trim(),
          first: options.first || 20,
          offset: options.offset || 0,
          orderBy: options.orderBy || 'CREATED_DESC'
        }
      });
    } catch (error) {
      console.error('Search execution error:', error);
      setIsSearching(false);
      setSearchResults([]);
    }
  };

  const clearSearch = () => {
    setSearchResults([]);
    setIsSearching(false);
  };

  return {
    searchResults,
    isSearching,
    search,
    clearSearch
  };
};

// Hook ƒë·ªÉ l·∫•y chi ti·∫øt 1 product
export const useProduct = (productId) => {
  const { data, loading, error } = useQuery(GET_PRODUCT, {
    variables: { id: productId },
    skip: !productId,
    errorPolicy: 'all'
  });

  // ‚úÖ Fix: Safe product data
  const product = data?.product ? {
    ...data.product,
    brand: data.product.brand || { _id: '', name: 'Unknown Brand' },
    category: data.product.category || { _id: '', name: 'Unknown Category' },
    images: Array.isArray(data.product.images) ? data.product.images : [],
    stock: typeof data.product.stock === 'number' ? data.product.stock : 0,
    price: typeof data.product.price === 'number' ? data.product.price : 0
  } : null;

  return {
    product,
    loading,
    error
  };
};

// Hook ƒë·ªÉ l·∫•y featured products
export const useFeaturedProducts = () => {
  const { data, loading, error } = useQuery(GET_FEATURED_PRODUCTS, {
    errorPolicy: 'all'
  });

  const featuredProducts = (data?.featuredProducts || []).map(product => ({
    ...product,
    brand: product.brand || { _id: '', name: 'Unknown Brand' },
    category: product.category || { _id: '', name: 'Unknown Category' },
    images: Array.isArray(product.images) ? product.images : [],
    stock: typeof product.stock === 'number' ? product.stock : 0,
    price: typeof product.price === 'number' ? product.price : 0
  }));

  return {
    featuredProducts,
    loading,
    error
  };
};

// Hook ƒë·ªÉ l·∫•y products theo category
export const useProductsByCategory = (categoryId) => {
  const { data, loading, error } = useQuery(GET_PRODUCTS_BY_CATEGORY, {
    variables: { categoryId },
    skip: !categoryId,
    errorPolicy: 'all'
  });

  const products = (data?.productsByCategory || []).map(product => ({
    ...product,
    brand: product.brand || { _id: '', name: 'Unknown Brand' },
    category: product.category || { _id: '', name: 'Unknown Category' },
    images: Array.isArray(product.images) ? product.images : [],
    stock: typeof product.stock === 'number' ? product.stock : 0,
    price: typeof product.price === 'number' ? product.price : 0
  }));

  return {
    products,
    loading,
    error
  };
};

// Hook ƒë·ªÉ l·∫•y products theo brand
export const useProductsByBrand = (brandId) => {
  const { data, loading, error } = useQuery(GET_PRODUCTS_BY_BRAND, {
    variables: { brandId },
    skip: !brandId,
    errorPolicy: 'all'
  });

  const products = (data?.productsByBrand || []).map(product => ({
    ...product,
    brand: product.brand || { _id: '', name: 'Unknown Brand' },
    category: product.category || { _id: '', name: 'Unknown Category' },
    images: Array.isArray(product.images) ? product.images : [],
    stock: typeof product.stock === 'number' ? product.stock : 0,
    price: typeof product.price === 'number' ? product.price : 0
  }));

  return {
    products,
    loading,
    error
  };
};

// Hook ƒë·ªÉ l·∫•y categories cho filter
export const useCategories = () => {
  const { data, loading, error } = useQuery(GET_ALL_CATEGORIES, {
    errorPolicy: 'all'
  });

  return {
    categories: data?.allCategories || [],
    loading,
    error
  };
};

// Hook ƒë·ªÉ l·∫•y brands cho filter
export const useBrands = () => {
  const { data, loading, error } = useQuery(GET_ALL_BRANDS, {
    errorPolicy: 'all'
  });

  return {
    brands: data?.allBrands || [],
    loading,
    error
  };
};

// =================
// ADMIN HOOKS
// =================

// Hook ƒë·ªÉ t·∫°o product
export const useCreateProduct = () => {
  const [createProductMutation, { loading, error }] = useMutation(CREATE_PRODUCT, {
    refetchQueries: [
      GET_PRODUCTS,
      GET_ALL_PRODUCTS
    ],
    onCompleted: (data) => {
      console.log('‚úÖ Create product completed:', data);
      if (data?.createProduct) {
        toast.success('T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!');
      } else {
        console.error('‚ùå No createProduct in response:', data);
        toast.error('L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ server');
      }
    },
    onError: (error) => {
      console.error('‚ùå Create product mutation error:', error);
      toast.error(`L·ªói t·∫°o s·∫£n ph·∫©m: ${error.message}`);
    }
  });

  const createProduct = async (productData) => {
    try {
      console.log('üöÄ Creating product with data:', productData);
      
      const result = await createProductMutation({
        variables: {
          input: productData
        }
      });
      
      console.log('üì¶ Mutation result:', result);
      
      // ‚úÖ Fix: Ki·ªÉm tra response structure an to√†n
      if (!result) {
        throw new Error('No result from mutation');
      }
      
      if (!result.data) {
        throw new Error('No data in mutation result');
      }
      
      if (!result.data.createProduct) {
        console.error('‚ùå createProduct is undefined in result.data:', result.data);
        throw new Error('createProduct field is missing from response');
      }
      
      return result.data.createProduct;
      
    } catch (err) {
      console.error('‚ùå Create product error:', err);
      throw err;
    }
  };

  return {
    createProduct,
    loading,
    error
  };
};

// Hook ƒë·ªÉ update product
export const useUpdateProduct = () => {
  const [updateProductMutation, { loading, error }] = useMutation(UPDATE_PRODUCT, {
    refetchQueries: [
      GET_PRODUCTS,
      GET_ALL_PRODUCTS
    ],
    onCompleted: (data) => {
      console.log('‚úÖ Update product completed:', data);
      if (data?.updateProduct) {
        toast.success('C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!');
      } else {
        console.error('‚ùå No updateProduct in response:', data);
        toast.error('L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu c·∫≠p nh·∫≠t t·ª´ server');
      }
    },
    onError: (error) => {
      console.error('‚ùå Update product mutation error:', error);
      toast.error(`L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m: ${error.message}`);
    }
  });

  const updateProduct = async (productId, productData) => {
    try {
      console.log('üîÑ Updating product:', productId, 'with data:', productData);
      
      const result = await updateProductMutation({
        variables: {
          id: productId,
          input: productData
        }
      });
      
      console.log('üì¶ Update result:', result);
      
      // ‚úÖ Fix: Safe response checking
      if (!result?.data?.updateProduct) {
        console.error('‚ùå updateProduct is undefined in result.data:', result?.data);
        throw new Error('updateProduct field is missing from response');
      }
      
      return result.data.updateProduct;
      
    } catch (err) {
      console.error('‚ùå Update product error:', err);
      throw err;
    }
  };

  return {
    updateProduct,
    loading,
    error
  };
};

// Hook ƒë·ªÉ t·∫°o product v·ªõi images
export const useCreateProductWithImages = () => {
  const { createProduct, loading: createLoading } = useCreateProduct();
  const { uploadImages, loading: uploadLoading } = useUploadProductImages();
  
  const [loading, setLoading] = useState(false);

  const createProductWithImages = async (productData, imageFiles) => {
    setLoading(true);
    
    try {
      console.log('üöÄ Step 1: Creating product...');
      console.log('üìù Product data:', productData);
      
      const createdProduct = await createProduct(productData);
      
      console.log('‚úÖ Product created:', createdProduct);
      
      if (!createdProduct) {
        throw new Error('Failed to create product - no product returned');
      }
      
      if (!createdProduct._id) {
        throw new Error('Failed to create product - no product ID returned');
      }

      // B∆∞·ªõc 2: Upload images n·∫øu c√≥
      if (imageFiles && imageFiles.length > 0) {
        console.log('üñºÔ∏è Step 2: Uploading images...');
        try {
          const uploadResult = await uploadImages(createdProduct._id, imageFiles);
          
          if (!uploadResult?.success) {
            toast.warn(`S·∫£n ph·∫©m ƒë√£ t·∫°o th√†nh c√¥ng nh∆∞ng upload ·∫£nh th·∫•t b·∫°i: ${uploadResult?.message || 'Unknown error'}`);
          } else {
            toast.success('T·∫°o s·∫£n ph·∫©m v√† upload ·∫£nh th√†nh c√¥ng!');
          }
        } catch (uploadError) {
          console.error('‚ùå Image upload error:', uploadError);
          toast.warn(`S·∫£n ph·∫©m ƒë√£ t·∫°o th√†nh c√¥ng nh∆∞ng upload ·∫£nh th·∫•t b·∫°i: ${uploadError.message}`);
        }
      } else {
        toast.success('T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!');
      }

      setLoading(false);
      return createdProduct;
      
    } catch (error) {
      setLoading(false);
      console.error('‚ùå Create product with images error:', error);
      toast.error(`L·ªói t·∫°o s·∫£n ph·∫©m: ${error.message}`);
      throw error;
    }
  };

  return {
    createProductWithImages,
    loading: loading || createLoading || uploadLoading
  };
};

// Hook ƒë·ªÉ update product v·ªõi images
export const useUpdateProductWithImages = () => {
  const { updateProduct, loading: updateLoading } = useUpdateProduct();
  const { uploadImages, loading: uploadLoading } = useUploadProductImages();
  
  const [loading, setLoading] = useState(false);

  const updateProductWithImages = async (productId, productData, imageFiles) => {
    setLoading(true);
    
    try {
      console.log('üîÑ Step 1: Updating product...');
      const updatedProduct = await updateProduct(productId, productData);
      
      // B∆∞·ªõc 2: Upload new images n·∫øu c√≥
      if (imageFiles && imageFiles.length > 0) {
        console.log('üñºÔ∏è Step 2: Uploading new images...');
        try {
          const uploadResult = await uploadImages(productId, imageFiles);
          
          if (!uploadResult?.success) {
            toast.warn(`C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng nh∆∞ng upload ·∫£nh th·∫•t b·∫°i: ${uploadResult?.message || 'Unknown error'}`);
          } else {
            toast.success('C·∫≠p nh·∫≠t s·∫£n ph·∫©m v√† upload ·∫£nh th√†nh c√¥ng!');
          }
        } catch (uploadError) {
          console.error('‚ùå Image upload error:', uploadError);
          toast.warn(`C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng nh∆∞ng upload ·∫£nh th·∫•t b·∫°i: ${uploadError.message}`);
        }
      } else {
        toast.success('C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!');
      }

      setLoading(false);
      return updatedProduct;
      
    } catch (error) {
      setLoading(false);
      console.error('‚ùå Update product with images error:', error);
      throw error;
    }
  };

  return {
    updateProductWithImages,
    loading: loading || updateLoading || uploadLoading
  };
};

// Hook ƒë·ªÉ x√≥a product
export const useDeleteProduct = () => {
  const [deleteProductMutation, { loading, error }] = useMutation(DELETE_PRODUCT, {
    refetchQueries: [
      GET_PRODUCTS,
      GET_ALL_PRODUCTS
    ],
    onCompleted: (data) => {
      console.log('‚úÖ Delete product completed:', data);
      toast.success('X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!');
    },
    onError: (error) => {
      console.error('‚ùå Delete product error:', error);
      toast.error(`L·ªói x√≥a s·∫£n ph·∫©m: ${error.message}`);
    }
  });

  const deleteProduct = async (productId) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y?')) {
      return false;
    }
    
    try {
      await deleteProductMutation({
        variables: {
          id: productId
        }
      });
      return true;
    } catch (err) {
      console.error('‚ùå Delete product error:', err);
      throw err;
    }
  };

  return {
    deleteProduct,
    loading,
    error
  };
};

// Hook ƒë·ªÉ l·∫•y categories v√† brands cho form (Admin)
export const useProductFormData = () => {
  const { data: categoriesData, loading: categoriesLoading } = useQuery(GET_ALL_CATEGORIES, {
    errorPolicy: 'all'
  });
  const { data: brandsData, loading: brandsLoading } = useQuery(GET_ALL_BRANDS, {
    errorPolicy: 'all'
  });

  return {
    categories: categoriesData?.allCategories || [],
    brands: brandsData?.allBrands || [],
    loading: categoriesLoading || brandsLoading
  };
};

==================================================
File: .\src\hooks\useAuth.js
==================================================

// src/hooks/useAuth.js
import { useMutation, useQuery } from '@apollo/client';
import { useNavigate } from 'react-router-dom';
import toast from 'react-hot-toast';
import { LOGIN_MUTATION, REGISTER_MUTATION, ME_QUERY } from '../graphql/auth';
import { useAuth as useAuthContext } from '../contexts/AuthContext';

export const useLogin = () => {
  const navigate = useNavigate();
  const { login } = useAuthContext();
  
  const [loginMutation, { loading, error }] = useMutation(LOGIN_MUTATION, {
    onCompleted: (data) => {
      if (data.login.success) {
        const { jwt, user } = data.login.data;
        login(jwt, user);
        toast.success(`Ch√†o m·ª´ng ${user.firstName || user.username}!`);
        
        // Redirect based on role
        if (user.role === 'admin' || user.role === 'manager') {
          navigate('/admin');
        } else {
          navigate('/');
        }
      } else {
        toast.error(data.login.message);
      }
    },
    onError: (error) => {
      console.error('Login error:', error);
      toast.error('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!');
    }
  });

  const handleLogin = async (formData) => {
    try {
      await loginMutation({
        variables: {
          input: {
            username: formData.username,
            password: formData.password
          }
        }
      });
    } catch (err) {
      console.error('Login submission error:', err);
    }
  };

  return {
    login: handleLogin,
    loading,
    error
  };
};

export const useRegister = () => {
  const navigate = useNavigate();
  
  const [registerMutation, { loading, error }] = useMutation(REGISTER_MUTATION, {
    onCompleted: (data) => {
      if (data.register.success) {
        toast.success('ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.');
        navigate('/login');
      } else {
        toast.error(data.register.message);
      }
    },
    onError: (error) => {
      console.error('Register error:', error);
      toast.error('ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!');
    }
  });

  const handleRegister = async (formData) => {
    try {
      await registerMutation({
        variables: {
          input: {
            username: formData.username,
            email: formData.email,
            password: formData.password,
            firstName: formData.firstName,
            lastName: formData.lastName,
            phone: formData.phone || ''
          }
        }
      });
    } catch (err) {
      console.error('Register submission error:', err);
    }
  };

  return {
    register: handleRegister,
    loading,
    error
  };
};

export const useCurrentUser = () => {
  const { isAuthenticated } = useAuthContext();
  
  const { data, loading, error, refetch } = useQuery(ME_QUERY, {
    skip: !isAuthenticated,
    errorPolicy: 'all'
  });

  return {
    user: data?.me,
    loading,
    error,
    refetch
  };
};

==================================================
File: .\src\lib\utils.js
==================================================

// src/lib/utils.js
import { clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

// Utility function to merge Tailwind classes
export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

// Format price to Vietnamese currency
export const formatPrice = (price) => {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
  }).format(price);
};

// Format date to Vietnamese format
export const formatDate = (date) => {
  return new Intl.DateTimeFormat('vi-VN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  }).format(new Date(date));
};

// Format date to short format
export const formatDateShort = (date) => {
  return new Intl.DateTimeFormat('vi-VN', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
  }).format(new Date(date));
};

// Create slug from text
export const slugify = (text) => {
  return text
    .toLowerCase()
    .replace(/[^\w ]+/g, '')
    .replace(/ +/g, '-');
};

// Get image URL
export const getImageUrl = (imageName) => {
  if (!imageName) return '/placeholder-image.jpg';
  if (imageName.startsWith('http')) return imageName;
  return `${import.meta.env.VITE_API_URL || 'http://localhost:4000'}/img/${imageName}`;
};

// Truncate text
export const truncateText = (text, length = 100) => {
  if (!text) return '';
  if (text.length <= length) return text;
  return text.substring(0, length).trim() + '...';
};

// Debounce function
export const debounce = (func, wait) => {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};

// Generate random ID
export const generateId = () => {
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
};

// Validate email
export const isValidEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// Validate phone number (Vietnamese format)
export const isValidPhone = (phone) => {
  const phoneRegex = /^[0-9]{10,11}$/;
  return phoneRegex.test(phone);
};

// Calculate discount percentage
export const calculateDiscountPercentage = (originalPrice, currentPrice) => {
  if (!originalPrice || !currentPrice || originalPrice <= currentPrice) return 0;
  return Math.round(((originalPrice - currentPrice) / originalPrice) * 100);
};

// Format file size
export const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// Copy to clipboard
export const copyToClipboard = async (text) => {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (err) {
    console.error('Failed to copy to clipboard:', err);
    return false;
  }
};

==================================================
File: .\src\lib\apollo.js
==================================================

// src/lib/apollo.js
import { ApolloClient, InMemoryCache, createHttpLink, from } from '@apollo/client';
import { setContext } from '@apollo/client/link/context';
import { onError } from '@apollo/client/link/error';

// HTTP link t·ªõi GraphQL server
const httpLink = createHttpLink({
  uri: import.meta.env.VITE_GRAPHQL_URL || 'http://localhost:4000/',
});

// Auth link ƒë·ªÉ th√™m JWT token v√†o headers
const authLink = setContext((_, { headers }) => {
  const token = localStorage.getItem('smartshop_token');
  
  return {
    headers: {
      ...headers,
      authorization: token ? `Bearer ${token}` : "",
      // Lo·∫°i b·ªè secret header ƒë·ªÉ tr√°nh CORS error
      // secret s·∫Ω ƒë∆∞·ª£c g·ª≠i qua variables trong queries khi c·∫ßn
    }
  };
});

// Error link ƒë·ªÉ handle errors
const errorLink = onError(({ graphQLErrors, networkError, operation, forward }) => {
  if (graphQLErrors) {
    graphQLErrors.forEach(({ message, locations, path }) => {
      console.error(`GraphQL error: Message: ${message}, Location: ${locations}, Path: ${path}`);
      
      // N·∫øu token expired, redirect to login
      if (message.includes('Authentication required') || message.includes('jwt')) {
        localStorage.removeItem('smartshop_token');
        localStorage.removeItem('smartshop_user');
        window.location.href = '/login';
      }
    });
  }

  if (networkError) {
    console.error(`Network error: ${networkError}`);
  }
});

// Apollo Client instance
export const client = new ApolloClient({
  link: from([errorLink, authLink, httpLink]),
  cache: new InMemoryCache({
    typePolicies: {
      Query: {
        fields: {
          // Cache policies cho pagination
          products: {
            keyArgs: ['condition', 'orderBy'],
            merge(existing = { nodes: [], totalCount: 0 }, incoming) {
              return {
                ...incoming,
                nodes: [...(existing.nodes || []), ...incoming.nodes],
              };
            },
          },
          categories: {
            keyArgs: ['condition', 'orderBy'],
            merge(existing = { nodes: [], totalCount: 0 }, incoming) {
              return {
                ...incoming,
                nodes: [...(existing.nodes || []), ...incoming.nodes],
              };
            },
          },
        },
      },
    },
  }),
  defaultOptions: {
    watchQuery: {
      errorPolicy: 'all',
    },
    query: {
      errorPolicy: 'all',
    },
  },
});

==================================================
File: .\src\contexts\AuthContext.jsx
==================================================

// src/contexts/AuthContext.jsx
import React, { createContext, useContext, useReducer, useEffect } from 'react';

// Auth utilities functions
const getToken = () => {
  return localStorage.getItem('smartshop_token');
};

const getUser = () => {
  const userStr = localStorage.getItem('smartshop_user');
  try {
    return userStr ? JSON.parse(userStr) : null;
  } catch {
    return null;
  }
};

const setAuth = (token, user) => {
  localStorage.setItem('smartshop_token', token);
  localStorage.setItem('smartshop_user', JSON.stringify(user));
};

const clearAuth = () => {
  localStorage.removeItem('smartshop_token');
  localStorage.removeItem('smartshop_user');
};

// Create Auth Context
const AuthContext = createContext();

// Auth reducer
const authReducer = (state, action) => {
  switch (action.type) {
    case 'LOGIN':
      return {
        ...state,
        isAuthenticated: true,
        user: action.payload.user,
        token: action.payload.token,
        loading: false,
      };
    case 'LOGOUT':
      return {
        ...state,
        isAuthenticated: false,
        user: null,
        token: null,
        loading: false,
      };
    case 'SET_LOADING':
      return {
        ...state,
        loading: action.payload,
      };
    case 'INIT':
      return {
        ...state,
        isAuthenticated: !!action.payload.token,
        user: action.payload.user,
        token: action.payload.token,
        loading: false,
      };
    default:
      return state;
  }
};

// Initial state
const initialState = {
  isAuthenticated: false,
  user: null,
  token: null,
  loading: true,
};

// Auth Provider Component
export const AuthProvider = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState);

  // Initialize auth state t·ª´ localStorage
  useEffect(() => {
    const token = getToken();
    const user = getUser();
    
    dispatch({
      type: 'INIT',
      payload: { token, user }
    });
  }, []);

  // Login function
  const login = (token, user) => {
    setAuth(token, user);
    dispatch({
      type: 'LOGIN',
      payload: { token, user }
    });
  };

  // Logout function
  const logout = () => {
    clearAuth();
    dispatch({ type: 'LOGOUT' });
  };

  // Set loading function
  const setLoading = (loading) => {
    dispatch({ type: 'SET_LOADING', payload: loading });
  };

  // Context value
  const value = {
    ...state,
    login,
    logout,
    setLoading,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// Custom hook to use Auth context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

==================================================
File: .\src\graphql\auth.js
==================================================

// src/graphql/auth.js
import { gql } from '@apollo/client';

// Login mutation
export const LOGIN_MUTATION = gql`
  mutation Login($input: LoginInput!) {
    login(input: $input) {
      success
      message
      data {
        jwt
        user {
          _id
          username
          email
          firstName
          lastName
          role
        }
      }
    }
  }
`;

// Register mutation
export const REGISTER_MUTATION = gql`
  mutation Register($input: RegisterInput!) {
    register(input: $input) {
      success
      message
      data {
        _id
        username
        email
        firstName
        lastName
        role
      }
    }
  }
`;

// Get current user query
export const ME_QUERY = gql`
  query Me {
    me {
      _id
      username
      email
      firstName
      lastName
      role
    }
  }
`;

==================================================
File: .\src\graphql\categories.js
==================================================

// src/graphql/categories.js
import { gql } from '@apollo/client';

// Fragment cho Category data
export const CATEGORY_FRAGMENT = gql`
  fragment CategoryData on Category {
    _id
    name
    description
    image
    isActive
    createdAt
    updatedAt
  }
`;

// Query ƒë·ªÉ l·∫•y danh s√°ch categories v·ªõi pagination
export const GET_CATEGORIES = gql`
  query GetCategories(
    $first: Int = 20,
    $offset: Int = 0,
    $orderBy: CategoriesOrderBy = NAME_ASC,
    $condition: CategoryConditionInput
  ) {
    categories(
      first: $first,
      offset: $offset,
      orderBy: $orderBy,
      condition: $condition
    ) {
      nodes {
        ...CategoryData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${CATEGORY_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y t·∫•t c·∫£ categories (simple)
export const GET_ALL_CATEGORIES = gql`
  query GetAllCategories {
    allCategories {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y chi ti·∫øt 1 category
export const GET_CATEGORY = gql`
  query GetCategory($id: ID!) {
    category(id: $id) {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

// Mutations
export const CREATE_CATEGORY = gql`
  mutation CreateCategory($input: CategoryInput!) {
    createCategory(input: $input) {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

export const UPDATE_CATEGORY = gql`
  mutation UpdateCategory($id: ID!, $input: CategoryInput!) {
    updateCategory(id: $id, input: $input) {
      ...CategoryData
    }
  }
  ${CATEGORY_FRAGMENT}
`;

export const DELETE_CATEGORY = gql`
  mutation DeleteCategory($id: ID!) {
    deleteCategory(id: $id)
  }
`;

==================================================
File: .\src\graphql\upload.js
==================================================

// src/graphql/upload.js
import { gql } from '@apollo/client';

export const UPLOAD_PRODUCT_IMAGE = gql`
  mutation UploadProductImage($productId: ID!, $file: File!) {
    uploadProductImage(productId: $productId, file: $file) {
      success
      message
      filename
      url
    }
  }
`;

export const UPLOAD_PRODUCT_IMAGES = gql`
  mutation UploadProductImages($productId: ID!, $files: [File!]!) {
    uploadProductImages(productId: $productId, files: $files) {
      success
      message
      filename
      url
    }
  }
`;

export const REMOVE_PRODUCT_IMAGE = gql`
  mutation RemoveProductImage($productId: ID!, $filename: String!) {
    removeProductImage(productId: $productId, filename: $filename)
  }
`;

==================================================
File: .\src\graphql\products.js
==================================================

// src/graphql/products.js
import { gql } from '@apollo/client';

// Fragment cho Product data
export const PRODUCT_FRAGMENT = gql`
  fragment ProductData on Product {
    _id
    name
    description
    price
    originalPrice
    sku
    images
    stock
    isActive
    isFeatured
    createdAt
    updatedAt
    category {
      _id
      name
      description
    }
    brand {
      _id
      name
      description
      logo
    }
  }
`;

// Query ƒë·ªÉ l·∫•y danh s√°ch products v·ªõi pagination v√† filter
export const GET_PRODUCTS = gql`
  query GetProducts(
    $first: Int = 12,
    $offset: Int = 0,
    $orderBy: ProductsOrderBy = CREATED_DESC,
    $condition: ProductConditionInput
  ) {
    products(
      first: $first,
      offset: $offset,
      orderBy: $orderBy,
      condition: $condition
    ) {
      nodes {
        ...ProductData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y chi ti·∫øt 1 product
export const GET_PRODUCT = gql`
  query GetProduct($id: ID!) {
    product(id: $id) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ search products
export const SEARCH_PRODUCTS = gql`
  query SearchProducts(
    $query: String!,
    $first: Int = 12,
    $offset: Int = 0,
    $orderBy: ProductsOrderBy = CREATED_DESC
  ) {
    searchProducts(
      query: $query,
      first: $first,
      offset: $offset,
      orderBy: $orderBy
    ) {
      nodes {
        ...ProductData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y featured products
export const GET_FEATURED_PRODUCTS = gql`
  query GetFeaturedProducts {
    featuredProducts {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y products theo category
export const GET_PRODUCTS_BY_CATEGORY = gql`
  query GetProductsByCategory($categoryId: ID!) {
    productsByCategory(categoryId: $categoryId) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y products theo brand
export const GET_PRODUCTS_BY_BRAND = gql`
  query GetProductsByBrand($brandId: ID!) {
    productsByBrand(brandId: $brandId) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y t·∫•t c·∫£ products (simple)
export const GET_ALL_PRODUCTS = gql`
  query GetAllProducts {
    allProducts {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

// Mutations cho Admin
export const CREATE_PRODUCT = gql`
  mutation CreateProduct($input: ProductInput!) {
    createProduct(input: $input) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

export const UPDATE_PRODUCT = gql`
  mutation UpdateProduct($id: ID!, $input: ProductInput!) {
    updateProduct(id: $id, input: $input) {
      ...ProductData
    }
  }
  ${PRODUCT_FRAGMENT}
`;

export const DELETE_PRODUCT = gql`
  mutation DeleteProduct($id: ID!) {
    deleteProduct(id: $id)
  }
`;

==================================================
File: .\src\graphql\admin.js
==================================================

// src/graphql/admin.js
import { gql } from '@apollo/client';

// Queries cho form data - l·∫•y t·∫•t c·∫£ categories v√† brands
export const GET_ALL_CATEGORIES = gql`
  query GetAllCategoriesForAdmin {
    allCategories {
      _id
      name
      description
      isActive
    }
  }
`;

export const GET_ALL_BRANDS = gql`
  query GetAllBrandsForAdmin {
    allBrands {
      _id
      name
      description
      isActive
    }
  }
`;

// Query ƒë·ªÉ l·∫•y products v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin cho admin
export const GET_ADMIN_PRODUCTS = gql`
  query GetAdminProducts(
    $first: Int = 10,
    $offset: Int = 0,
    $orderBy: ProductsOrderBy = CREATED_DESC,
    $condition: ProductConditionInput
  ) {
    products(
      first: $first,
      offset: $offset,
      orderBy: $orderBy,
      condition: $condition
    ) {
      nodes {
        _id
        name
        description
        price
        originalPrice
        sku
        images
        stock
        isActive
        isFeatured
        createdAt
        updatedAt
        category {
          _id
          name
          description
        }
        brand {
          _id
          name
          description
        }
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
`;

// Query ƒë·ªÉ l·∫•y chi ti·∫øt 1 product cho admin
export const GET_ADMIN_PRODUCT = gql`
  query GetAdminProduct($id: ID!) {
    product(id: $id) {
      _id
      name
      description
      price
      originalPrice
      sku
      images
      stock
      isActive
      isFeatured
      createdAt
      updatedAt
      category {
        _id
        name
        description
      }
      brand {
        _id
        name
        description
      }
    }
  }
`;

// Mutations cho admin
export const ADMIN_CREATE_PRODUCT = gql`
  mutation AdminCreateProduct($input: ProductInput!) {
    createProduct(input: $input) {
      _id
      name
      description
      price
      originalPrice
      sku
      images
      stock
      isActive
      isFeatured
      category {
        _id
        name
      }
      brand {
        _id
        name
      }
      createdAt
      updatedAt
    }
  }
`;

export const ADMIN_UPDATE_PRODUCT = gql`
  mutation AdminUpdateProduct($id: ID!, $input: ProductInput!) {
    updateProduct(id: $id, input: $input) {
      _id
      name
      description
      price
      originalPrice
      sku
      images
      stock
      isActive
      isFeatured
      category {
        _id
        name
      }
      brand {
        _id
        name
      }
      createdAt
      updatedAt
    }
  }
`;

export const ADMIN_DELETE_PRODUCT = gql`
  mutation AdminDeleteProduct($id: ID!) {
    deleteProduct(id: $id)
  }
`;

==================================================
File: .\src\graphql\brands.js
==================================================

// src/graphql/brands.js
import { gql } from '@apollo/client';

// Fragment cho Brand data
export const BRAND_FRAGMENT = gql`
  fragment BrandData on Brand {
    _id
    name
    slug
    description
    logo
    banner
    website
    country
    foundedYear
    isActive
    isFeatured
    createdAt
    updatedAt
    categories {
      _id
      name
    }
  }
`;

// Query ƒë·ªÉ l·∫•y danh s√°ch brands v·ªõi pagination
export const GET_BRANDS = gql`
  query GetBrands(
    $first: Int = 20,
    $offset: Int = 0,
    $orderBy: BrandsOrderBy = NAME_ASC,
    $condition: BrandConditionInput
  ) {
    brands(
      first: $first,
      offset: $offset,
      orderBy: $orderBy,
      condition: $condition
    ) {
      nodes {
        ...BrandData
      }
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y t·∫•t c·∫£ brands (simple)
export const GET_ALL_BRANDS = gql`
  query GetAllBrands {
    allBrands {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y featured brands
export const GET_FEATURED_BRANDS = gql`
  query GetFeaturedBrands {
    featuredBrands {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y chi ti·∫øt 1 brand
export const GET_BRAND = gql`
  query GetBrand($id: ID, $slug: String) {
    brand(id: $id, slug: $slug) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Query ƒë·ªÉ l·∫•y brands theo category
export const GET_BRANDS_BY_CATEGORY = gql`
  query GetBrandsByCategory($categoryId: ID!) {
    brandsByCategory(categoryId: $categoryId) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

// Mutations
export const CREATE_BRAND = gql`
  mutation CreateBrand($input: BrandInput!) {
    createBrand(input: $input) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

export const UPDATE_BRAND = gql`
  mutation UpdateBrand($id: ID!, $input: BrandInput!) {
    updateBrand(id: $id, input: $input) {
      ...BrandData
    }
  }
  ${BRAND_FRAGMENT}
`;

export const DELETE_BRAND = gql`
  mutation DeleteBrand($id: ID!) {
    deleteBrand(id: $id)
  }
`;

==================================================
File: .\public\vite.svg
==================================================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
